/*
 * Bumbal Client Api
 *
 * Bumbal API documentation
 *
 * API version: 2.0
 * Contact: info@bumbal.eu
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// UnsuccessfulModel struct for UnsuccessfulModel
type UnsuccessfulModel struct {
	// Unsuccessful activity identifier
	ActivityId *int64 `json:"activity_id,omitempty"`
	// Reason why activity was unsuccessful identifier
	ReasonId *int64 `json:"reason_id,omitempty"`
	// Reason why activity was unsuccessful content text
	Reason *string `json:"reason,omitempty"`
}

// NewUnsuccessfulModel instantiates a new UnsuccessfulModel object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUnsuccessfulModel() *UnsuccessfulModel {
	this := UnsuccessfulModel{}
	return &this
}

// NewUnsuccessfulModelWithDefaults instantiates a new UnsuccessfulModel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUnsuccessfulModelWithDefaults() *UnsuccessfulModel {
	this := UnsuccessfulModel{}
	return &this
}

// GetActivityId returns the ActivityId field value if set, zero value otherwise.
func (o *UnsuccessfulModel) GetActivityId() int64 {
	if o == nil || o.ActivityId == nil {
		var ret int64
		return ret
	}
	return *o.ActivityId
}

// GetActivityIdOk returns a tuple with the ActivityId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UnsuccessfulModel) GetActivityIdOk() (*int64, bool) {
	if o == nil || o.ActivityId == nil {
		return nil, false
	}
	return o.ActivityId, true
}

// HasActivityId returns a boolean if a field has been set.
func (o *UnsuccessfulModel) HasActivityId() bool {
	if o != nil && o.ActivityId != nil {
		return true
	}

	return false
}

// SetActivityId gets a reference to the given int64 and assigns it to the ActivityId field.
func (o *UnsuccessfulModel) SetActivityId(v int64) {
	o.ActivityId = &v
}

// GetReasonId returns the ReasonId field value if set, zero value otherwise.
func (o *UnsuccessfulModel) GetReasonId() int64 {
	if o == nil || o.ReasonId == nil {
		var ret int64
		return ret
	}
	return *o.ReasonId
}

// GetReasonIdOk returns a tuple with the ReasonId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UnsuccessfulModel) GetReasonIdOk() (*int64, bool) {
	if o == nil || o.ReasonId == nil {
		return nil, false
	}
	return o.ReasonId, true
}

// HasReasonId returns a boolean if a field has been set.
func (o *UnsuccessfulModel) HasReasonId() bool {
	if o != nil && o.ReasonId != nil {
		return true
	}

	return false
}

// SetReasonId gets a reference to the given int64 and assigns it to the ReasonId field.
func (o *UnsuccessfulModel) SetReasonId(v int64) {
	o.ReasonId = &v
}

// GetReason returns the Reason field value if set, zero value otherwise.
func (o *UnsuccessfulModel) GetReason() string {
	if o == nil || o.Reason == nil {
		var ret string
		return ret
	}
	return *o.Reason
}

// GetReasonOk returns a tuple with the Reason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UnsuccessfulModel) GetReasonOk() (*string, bool) {
	if o == nil || o.Reason == nil {
		return nil, false
	}
	return o.Reason, true
}

// HasReason returns a boolean if a field has been set.
func (o *UnsuccessfulModel) HasReason() bool {
	if o != nil && o.Reason != nil {
		return true
	}

	return false
}

// SetReason gets a reference to the given string and assigns it to the Reason field.
func (o *UnsuccessfulModel) SetReason(v string) {
	o.Reason = &v
}

func (o UnsuccessfulModel) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ActivityId != nil {
		toSerialize["activity_id"] = o.ActivityId
	}
	if o.ReasonId != nil {
		toSerialize["reason_id"] = o.ReasonId
	}
	if o.Reason != nil {
		toSerialize["reason"] = o.Reason
	}
	return json.Marshal(toSerialize)
}

type NullableUnsuccessfulModel struct {
	value *UnsuccessfulModel
	isSet bool
}

func (v NullableUnsuccessfulModel) Get() *UnsuccessfulModel {
	return v.value
}

func (v *NullableUnsuccessfulModel) Set(val *UnsuccessfulModel) {
	v.value = val
	v.isSet = true
}

func (v NullableUnsuccessfulModel) IsSet() bool {
	return v.isSet
}

func (v *NullableUnsuccessfulModel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUnsuccessfulModel(val *UnsuccessfulModel) *NullableUnsuccessfulModel {
	return &NullableUnsuccessfulModel{value: val, isSet: true}
}

func (v NullableUnsuccessfulModel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUnsuccessfulModel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


