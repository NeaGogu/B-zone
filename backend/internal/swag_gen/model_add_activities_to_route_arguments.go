/*
 * Bumbal Client Api
 *
 * Bumbal API documentation
 *
 * API version: 2.0
 * Contact: info@bumbal.eu
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// AddActivitiesToRouteArguments struct for AddActivitiesToRouteArguments
type AddActivitiesToRouteArguments struct {
	// Unique ID of Route
	RouteId *int64 `json:"route_id,omitempty"`
	// 
	Activities *[]ActivityForToRouteModel `json:"activities,omitempty"`
	// 
	Options *map[string]bool `json:"options,omitempty"`
	Filters *AddActivitiesToRouteFiltersModel `json:"filters,omitempty"`
}

// NewAddActivitiesToRouteArguments instantiates a new AddActivitiesToRouteArguments object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAddActivitiesToRouteArguments() *AddActivitiesToRouteArguments {
	this := AddActivitiesToRouteArguments{}
	return &this
}

// NewAddActivitiesToRouteArgumentsWithDefaults instantiates a new AddActivitiesToRouteArguments object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAddActivitiesToRouteArgumentsWithDefaults() *AddActivitiesToRouteArguments {
	this := AddActivitiesToRouteArguments{}
	return &this
}

// GetRouteId returns the RouteId field value if set, zero value otherwise.
func (o *AddActivitiesToRouteArguments) GetRouteId() int64 {
	if o == nil || o.RouteId == nil {
		var ret int64
		return ret
	}
	return *o.RouteId
}

// GetRouteIdOk returns a tuple with the RouteId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddActivitiesToRouteArguments) GetRouteIdOk() (*int64, bool) {
	if o == nil || o.RouteId == nil {
		return nil, false
	}
	return o.RouteId, true
}

// HasRouteId returns a boolean if a field has been set.
func (o *AddActivitiesToRouteArguments) HasRouteId() bool {
	if o != nil && o.RouteId != nil {
		return true
	}

	return false
}

// SetRouteId gets a reference to the given int64 and assigns it to the RouteId field.
func (o *AddActivitiesToRouteArguments) SetRouteId(v int64) {
	o.RouteId = &v
}

// GetActivities returns the Activities field value if set, zero value otherwise.
func (o *AddActivitiesToRouteArguments) GetActivities() []ActivityForToRouteModel {
	if o == nil || o.Activities == nil {
		var ret []ActivityForToRouteModel
		return ret
	}
	return *o.Activities
}

// GetActivitiesOk returns a tuple with the Activities field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddActivitiesToRouteArguments) GetActivitiesOk() (*[]ActivityForToRouteModel, bool) {
	if o == nil || o.Activities == nil {
		return nil, false
	}
	return o.Activities, true
}

// HasActivities returns a boolean if a field has been set.
func (o *AddActivitiesToRouteArguments) HasActivities() bool {
	if o != nil && o.Activities != nil {
		return true
	}

	return false
}

// SetActivities gets a reference to the given []ActivityForToRouteModel and assigns it to the Activities field.
func (o *AddActivitiesToRouteArguments) SetActivities(v []ActivityForToRouteModel) {
	o.Activities = &v
}

// GetOptions returns the Options field value if set, zero value otherwise.
func (o *AddActivitiesToRouteArguments) GetOptions() map[string]bool {
	if o == nil || o.Options == nil {
		var ret map[string]bool
		return ret
	}
	return *o.Options
}

// GetOptionsOk returns a tuple with the Options field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddActivitiesToRouteArguments) GetOptionsOk() (*map[string]bool, bool) {
	if o == nil || o.Options == nil {
		return nil, false
	}
	return o.Options, true
}

// HasOptions returns a boolean if a field has been set.
func (o *AddActivitiesToRouteArguments) HasOptions() bool {
	if o != nil && o.Options != nil {
		return true
	}

	return false
}

// SetOptions gets a reference to the given map[string]bool and assigns it to the Options field.
func (o *AddActivitiesToRouteArguments) SetOptions(v map[string]bool) {
	o.Options = &v
}

// GetFilters returns the Filters field value if set, zero value otherwise.
func (o *AddActivitiesToRouteArguments) GetFilters() AddActivitiesToRouteFiltersModel {
	if o == nil || o.Filters == nil {
		var ret AddActivitiesToRouteFiltersModel
		return ret
	}
	return *o.Filters
}

// GetFiltersOk returns a tuple with the Filters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddActivitiesToRouteArguments) GetFiltersOk() (*AddActivitiesToRouteFiltersModel, bool) {
	if o == nil || o.Filters == nil {
		return nil, false
	}
	return o.Filters, true
}

// HasFilters returns a boolean if a field has been set.
func (o *AddActivitiesToRouteArguments) HasFilters() bool {
	if o != nil && o.Filters != nil {
		return true
	}

	return false
}

// SetFilters gets a reference to the given AddActivitiesToRouteFiltersModel and assigns it to the Filters field.
func (o *AddActivitiesToRouteArguments) SetFilters(v AddActivitiesToRouteFiltersModel) {
	o.Filters = &v
}

func (o AddActivitiesToRouteArguments) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.RouteId != nil {
		toSerialize["route_id"] = o.RouteId
	}
	if o.Activities != nil {
		toSerialize["activities"] = o.Activities
	}
	if o.Options != nil {
		toSerialize["options"] = o.Options
	}
	if o.Filters != nil {
		toSerialize["filters"] = o.Filters
	}
	return json.Marshal(toSerialize)
}

type NullableAddActivitiesToRouteArguments struct {
	value *AddActivitiesToRouteArguments
	isSet bool
}

func (v NullableAddActivitiesToRouteArguments) Get() *AddActivitiesToRouteArguments {
	return v.value
}

func (v *NullableAddActivitiesToRouteArguments) Set(val *AddActivitiesToRouteArguments) {
	v.value = val
	v.isSet = true
}

func (v NullableAddActivitiesToRouteArguments) IsSet() bool {
	return v.isSet
}

func (v *NullableAddActivitiesToRouteArguments) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAddActivitiesToRouteArguments(val *AddActivitiesToRouteArguments) *NullableAddActivitiesToRouteArguments {
	return &NullableAddActivitiesToRouteArguments{value: val, isSet: true}
}

func (v NullableAddActivitiesToRouteArguments) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAddActivitiesToRouteArguments) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


