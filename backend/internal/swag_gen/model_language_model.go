/*
 * Bumbal Client Api
 *
 * Bumbal API documentation
 *
 * API version: 2.0
 * Contact: info@bumbal.eu
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// LanguageModel struct for LanguageModel
type LanguageModel struct {
	// Unique Identifier
	Id *int64 `json:"id,omitempty"`
	// Name of the language in English
	Name *int32 `json:"name,omitempty"`
	// Two character language code
	LangCode *int32 `json:"lang_code,omitempty"`
	// if active=0: Language has been removed and is no longer visible in any bumbal interface
	Active *bool `json:"active,omitempty"`
}

// NewLanguageModel instantiates a new LanguageModel object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLanguageModel() *LanguageModel {
	this := LanguageModel{}
	return &this
}

// NewLanguageModelWithDefaults instantiates a new LanguageModel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLanguageModelWithDefaults() *LanguageModel {
	this := LanguageModel{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *LanguageModel) GetId() int64 {
	if o == nil || o.Id == nil {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LanguageModel) GetIdOk() (*int64, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *LanguageModel) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *LanguageModel) SetId(v int64) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *LanguageModel) GetName() int32 {
	if o == nil || o.Name == nil {
		var ret int32
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LanguageModel) GetNameOk() (*int32, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *LanguageModel) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given int32 and assigns it to the Name field.
func (o *LanguageModel) SetName(v int32) {
	o.Name = &v
}

// GetLangCode returns the LangCode field value if set, zero value otherwise.
func (o *LanguageModel) GetLangCode() int32 {
	if o == nil || o.LangCode == nil {
		var ret int32
		return ret
	}
	return *o.LangCode
}

// GetLangCodeOk returns a tuple with the LangCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LanguageModel) GetLangCodeOk() (*int32, bool) {
	if o == nil || o.LangCode == nil {
		return nil, false
	}
	return o.LangCode, true
}

// HasLangCode returns a boolean if a field has been set.
func (o *LanguageModel) HasLangCode() bool {
	if o != nil && o.LangCode != nil {
		return true
	}

	return false
}

// SetLangCode gets a reference to the given int32 and assigns it to the LangCode field.
func (o *LanguageModel) SetLangCode(v int32) {
	o.LangCode = &v
}

// GetActive returns the Active field value if set, zero value otherwise.
func (o *LanguageModel) GetActive() bool {
	if o == nil || o.Active == nil {
		var ret bool
		return ret
	}
	return *o.Active
}

// GetActiveOk returns a tuple with the Active field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LanguageModel) GetActiveOk() (*bool, bool) {
	if o == nil || o.Active == nil {
		return nil, false
	}
	return o.Active, true
}

// HasActive returns a boolean if a field has been set.
func (o *LanguageModel) HasActive() bool {
	if o != nil && o.Active != nil {
		return true
	}

	return false
}

// SetActive gets a reference to the given bool and assigns it to the Active field.
func (o *LanguageModel) SetActive(v bool) {
	o.Active = &v
}

func (o LanguageModel) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.LangCode != nil {
		toSerialize["lang_code"] = o.LangCode
	}
	if o.Active != nil {
		toSerialize["active"] = o.Active
	}
	return json.Marshal(toSerialize)
}

type NullableLanguageModel struct {
	value *LanguageModel
	isSet bool
}

func (v NullableLanguageModel) Get() *LanguageModel {
	return v.value
}

func (v *NullableLanguageModel) Set(val *LanguageModel) {
	v.value = val
	v.isSet = true
}

func (v NullableLanguageModel) IsSet() bool {
	return v.isSet
}

func (v *NullableLanguageModel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLanguageModel(val *LanguageModel) *NullableLanguageModel {
	return &NullableLanguageModel{value: val, isSet: true}
}

func (v NullableLanguageModel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLanguageModel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


