/*
 * Bumbal Client Api
 *
 * Bumbal API documentation
 *
 * API version: 2.0
 * Contact: info@bumbal.eu
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// SettingsModel struct for SettingsModel
type SettingsModel struct {
	// 
	Id *int64 `json:"id,omitempty"`
	// SettingsGroup id of this setting. Possible values: 1: general, 2: address, 3: package, 4: activity, 5: equipment, 6: note, 7: optimisation, 8: filters
	SettingsGroupId *int32 `json:"settings_group_id,omitempty"`
	// SettingsGroup name of this setting
	SettingsGroupName *string `json:"settings_group_name,omitempty"`
	// Unique string key for setting identification
	Key *string `json:"key,omitempty"`
	// Set value for setting
	Value *string `json:"value,omitempty"`
	// 
	ValueOptions *[]ValueOptionModel `json:"value_options,omitempty"`
	// If the return value is obscured because it is sensitive data
	Obscured *bool `json:"obscured,omitempty"`
	// updated_at date time
	SettingUpdatedAt *time.Time `json:"setting_updated_at,omitempty"`
	// updated_by user id
	SettingUpdatedBy *int32 `json:"setting_updated_by,omitempty"`
	SettingUpdatedByUser *UsersModel `json:"setting_updated_by_user,omitempty"`
}

// NewSettingsModel instantiates a new SettingsModel object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSettingsModel() *SettingsModel {
	this := SettingsModel{}
	return &this
}

// NewSettingsModelWithDefaults instantiates a new SettingsModel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSettingsModelWithDefaults() *SettingsModel {
	this := SettingsModel{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *SettingsModel) GetId() int64 {
	if o == nil || o.Id == nil {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SettingsModel) GetIdOk() (*int64, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *SettingsModel) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *SettingsModel) SetId(v int64) {
	o.Id = &v
}

// GetSettingsGroupId returns the SettingsGroupId field value if set, zero value otherwise.
func (o *SettingsModel) GetSettingsGroupId() int32 {
	if o == nil || o.SettingsGroupId == nil {
		var ret int32
		return ret
	}
	return *o.SettingsGroupId
}

// GetSettingsGroupIdOk returns a tuple with the SettingsGroupId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SettingsModel) GetSettingsGroupIdOk() (*int32, bool) {
	if o == nil || o.SettingsGroupId == nil {
		return nil, false
	}
	return o.SettingsGroupId, true
}

// HasSettingsGroupId returns a boolean if a field has been set.
func (o *SettingsModel) HasSettingsGroupId() bool {
	if o != nil && o.SettingsGroupId != nil {
		return true
	}

	return false
}

// SetSettingsGroupId gets a reference to the given int32 and assigns it to the SettingsGroupId field.
func (o *SettingsModel) SetSettingsGroupId(v int32) {
	o.SettingsGroupId = &v
}

// GetSettingsGroupName returns the SettingsGroupName field value if set, zero value otherwise.
func (o *SettingsModel) GetSettingsGroupName() string {
	if o == nil || o.SettingsGroupName == nil {
		var ret string
		return ret
	}
	return *o.SettingsGroupName
}

// GetSettingsGroupNameOk returns a tuple with the SettingsGroupName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SettingsModel) GetSettingsGroupNameOk() (*string, bool) {
	if o == nil || o.SettingsGroupName == nil {
		return nil, false
	}
	return o.SettingsGroupName, true
}

// HasSettingsGroupName returns a boolean if a field has been set.
func (o *SettingsModel) HasSettingsGroupName() bool {
	if o != nil && o.SettingsGroupName != nil {
		return true
	}

	return false
}

// SetSettingsGroupName gets a reference to the given string and assigns it to the SettingsGroupName field.
func (o *SettingsModel) SetSettingsGroupName(v string) {
	o.SettingsGroupName = &v
}

// GetKey returns the Key field value if set, zero value otherwise.
func (o *SettingsModel) GetKey() string {
	if o == nil || o.Key == nil {
		var ret string
		return ret
	}
	return *o.Key
}

// GetKeyOk returns a tuple with the Key field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SettingsModel) GetKeyOk() (*string, bool) {
	if o == nil || o.Key == nil {
		return nil, false
	}
	return o.Key, true
}

// HasKey returns a boolean if a field has been set.
func (o *SettingsModel) HasKey() bool {
	if o != nil && o.Key != nil {
		return true
	}

	return false
}

// SetKey gets a reference to the given string and assigns it to the Key field.
func (o *SettingsModel) SetKey(v string) {
	o.Key = &v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *SettingsModel) GetValue() string {
	if o == nil || o.Value == nil {
		var ret string
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SettingsModel) GetValueOk() (*string, bool) {
	if o == nil || o.Value == nil {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *SettingsModel) HasValue() bool {
	if o != nil && o.Value != nil {
		return true
	}

	return false
}

// SetValue gets a reference to the given string and assigns it to the Value field.
func (o *SettingsModel) SetValue(v string) {
	o.Value = &v
}

// GetValueOptions returns the ValueOptions field value if set, zero value otherwise.
func (o *SettingsModel) GetValueOptions() []ValueOptionModel {
	if o == nil || o.ValueOptions == nil {
		var ret []ValueOptionModel
		return ret
	}
	return *o.ValueOptions
}

// GetValueOptionsOk returns a tuple with the ValueOptions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SettingsModel) GetValueOptionsOk() (*[]ValueOptionModel, bool) {
	if o == nil || o.ValueOptions == nil {
		return nil, false
	}
	return o.ValueOptions, true
}

// HasValueOptions returns a boolean if a field has been set.
func (o *SettingsModel) HasValueOptions() bool {
	if o != nil && o.ValueOptions != nil {
		return true
	}

	return false
}

// SetValueOptions gets a reference to the given []ValueOptionModel and assigns it to the ValueOptions field.
func (o *SettingsModel) SetValueOptions(v []ValueOptionModel) {
	o.ValueOptions = &v
}

// GetObscured returns the Obscured field value if set, zero value otherwise.
func (o *SettingsModel) GetObscured() bool {
	if o == nil || o.Obscured == nil {
		var ret bool
		return ret
	}
	return *o.Obscured
}

// GetObscuredOk returns a tuple with the Obscured field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SettingsModel) GetObscuredOk() (*bool, bool) {
	if o == nil || o.Obscured == nil {
		return nil, false
	}
	return o.Obscured, true
}

// HasObscured returns a boolean if a field has been set.
func (o *SettingsModel) HasObscured() bool {
	if o != nil && o.Obscured != nil {
		return true
	}

	return false
}

// SetObscured gets a reference to the given bool and assigns it to the Obscured field.
func (o *SettingsModel) SetObscured(v bool) {
	o.Obscured = &v
}

// GetSettingUpdatedAt returns the SettingUpdatedAt field value if set, zero value otherwise.
func (o *SettingsModel) GetSettingUpdatedAt() time.Time {
	if o == nil || o.SettingUpdatedAt == nil {
		var ret time.Time
		return ret
	}
	return *o.SettingUpdatedAt
}

// GetSettingUpdatedAtOk returns a tuple with the SettingUpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SettingsModel) GetSettingUpdatedAtOk() (*time.Time, bool) {
	if o == nil || o.SettingUpdatedAt == nil {
		return nil, false
	}
	return o.SettingUpdatedAt, true
}

// HasSettingUpdatedAt returns a boolean if a field has been set.
func (o *SettingsModel) HasSettingUpdatedAt() bool {
	if o != nil && o.SettingUpdatedAt != nil {
		return true
	}

	return false
}

// SetSettingUpdatedAt gets a reference to the given time.Time and assigns it to the SettingUpdatedAt field.
func (o *SettingsModel) SetSettingUpdatedAt(v time.Time) {
	o.SettingUpdatedAt = &v
}

// GetSettingUpdatedBy returns the SettingUpdatedBy field value if set, zero value otherwise.
func (o *SettingsModel) GetSettingUpdatedBy() int32 {
	if o == nil || o.SettingUpdatedBy == nil {
		var ret int32
		return ret
	}
	return *o.SettingUpdatedBy
}

// GetSettingUpdatedByOk returns a tuple with the SettingUpdatedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SettingsModel) GetSettingUpdatedByOk() (*int32, bool) {
	if o == nil || o.SettingUpdatedBy == nil {
		return nil, false
	}
	return o.SettingUpdatedBy, true
}

// HasSettingUpdatedBy returns a boolean if a field has been set.
func (o *SettingsModel) HasSettingUpdatedBy() bool {
	if o != nil && o.SettingUpdatedBy != nil {
		return true
	}

	return false
}

// SetSettingUpdatedBy gets a reference to the given int32 and assigns it to the SettingUpdatedBy field.
func (o *SettingsModel) SetSettingUpdatedBy(v int32) {
	o.SettingUpdatedBy = &v
}

// GetSettingUpdatedByUser returns the SettingUpdatedByUser field value if set, zero value otherwise.
func (o *SettingsModel) GetSettingUpdatedByUser() UsersModel {
	if o == nil || o.SettingUpdatedByUser == nil {
		var ret UsersModel
		return ret
	}
	return *o.SettingUpdatedByUser
}

// GetSettingUpdatedByUserOk returns a tuple with the SettingUpdatedByUser field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SettingsModel) GetSettingUpdatedByUserOk() (*UsersModel, bool) {
	if o == nil || o.SettingUpdatedByUser == nil {
		return nil, false
	}
	return o.SettingUpdatedByUser, true
}

// HasSettingUpdatedByUser returns a boolean if a field has been set.
func (o *SettingsModel) HasSettingUpdatedByUser() bool {
	if o != nil && o.SettingUpdatedByUser != nil {
		return true
	}

	return false
}

// SetSettingUpdatedByUser gets a reference to the given UsersModel and assigns it to the SettingUpdatedByUser field.
func (o *SettingsModel) SetSettingUpdatedByUser(v UsersModel) {
	o.SettingUpdatedByUser = &v
}

func (o SettingsModel) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.SettingsGroupId != nil {
		toSerialize["settings_group_id"] = o.SettingsGroupId
	}
	if o.SettingsGroupName != nil {
		toSerialize["settings_group_name"] = o.SettingsGroupName
	}
	if o.Key != nil {
		toSerialize["key"] = o.Key
	}
	if o.Value != nil {
		toSerialize["value"] = o.Value
	}
	if o.ValueOptions != nil {
		toSerialize["value_options"] = o.ValueOptions
	}
	if o.Obscured != nil {
		toSerialize["obscured"] = o.Obscured
	}
	if o.SettingUpdatedAt != nil {
		toSerialize["setting_updated_at"] = o.SettingUpdatedAt
	}
	if o.SettingUpdatedBy != nil {
		toSerialize["setting_updated_by"] = o.SettingUpdatedBy
	}
	if o.SettingUpdatedByUser != nil {
		toSerialize["setting_updated_by_user"] = o.SettingUpdatedByUser
	}
	return json.Marshal(toSerialize)
}

type NullableSettingsModel struct {
	value *SettingsModel
	isSet bool
}

func (v NullableSettingsModel) Get() *SettingsModel {
	return v.value
}

func (v *NullableSettingsModel) Set(val *SettingsModel) {
	v.value = val
	v.isSet = true
}

func (v NullableSettingsModel) IsSet() bool {
	return v.isSet
}

func (v *NullableSettingsModel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSettingsModel(val *SettingsModel) *NullableSettingsModel {
	return &NullableSettingsModel{value: val, isSet: true}
}

func (v NullableSettingsModel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSettingsModel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


