/*
 * Bumbal Client Api
 *
 * Bumbal API documentation
 *
 * API version: 2.0
 * Contact: info@bumbal.eu
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// RecurrenceProcessRunsArguments struct for RecurrenceProcessRunsArguments
type RecurrenceProcessRunsArguments struct {
	// Recurrence IDs
	RecurrenceIds *[]int32 `json:"recurrence_ids,omitempty"`
}

// NewRecurrenceProcessRunsArguments instantiates a new RecurrenceProcessRunsArguments object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRecurrenceProcessRunsArguments() *RecurrenceProcessRunsArguments {
	this := RecurrenceProcessRunsArguments{}
	return &this
}

// NewRecurrenceProcessRunsArgumentsWithDefaults instantiates a new RecurrenceProcessRunsArguments object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRecurrenceProcessRunsArgumentsWithDefaults() *RecurrenceProcessRunsArguments {
	this := RecurrenceProcessRunsArguments{}
	return &this
}

// GetRecurrenceIds returns the RecurrenceIds field value if set, zero value otherwise.
func (o *RecurrenceProcessRunsArguments) GetRecurrenceIds() []int32 {
	if o == nil || o.RecurrenceIds == nil {
		var ret []int32
		return ret
	}
	return *o.RecurrenceIds
}

// GetRecurrenceIdsOk returns a tuple with the RecurrenceIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecurrenceProcessRunsArguments) GetRecurrenceIdsOk() (*[]int32, bool) {
	if o == nil || o.RecurrenceIds == nil {
		return nil, false
	}
	return o.RecurrenceIds, true
}

// HasRecurrenceIds returns a boolean if a field has been set.
func (o *RecurrenceProcessRunsArguments) HasRecurrenceIds() bool {
	if o != nil && o.RecurrenceIds != nil {
		return true
	}

	return false
}

// SetRecurrenceIds gets a reference to the given []int32 and assigns it to the RecurrenceIds field.
func (o *RecurrenceProcessRunsArguments) SetRecurrenceIds(v []int32) {
	o.RecurrenceIds = &v
}

func (o RecurrenceProcessRunsArguments) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.RecurrenceIds != nil {
		toSerialize["recurrence_ids"] = o.RecurrenceIds
	}
	return json.Marshal(toSerialize)
}

type NullableRecurrenceProcessRunsArguments struct {
	value *RecurrenceProcessRunsArguments
	isSet bool
}

func (v NullableRecurrenceProcessRunsArguments) Get() *RecurrenceProcessRunsArguments {
	return v.value
}

func (v *NullableRecurrenceProcessRunsArguments) Set(val *RecurrenceProcessRunsArguments) {
	v.value = val
	v.isSet = true
}

func (v NullableRecurrenceProcessRunsArguments) IsSet() bool {
	return v.isSet
}

func (v *NullableRecurrenceProcessRunsArguments) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRecurrenceProcessRunsArguments(val *RecurrenceProcessRunsArguments) *NullableRecurrenceProcessRunsArguments {
	return &NullableRecurrenceProcessRunsArguments{value: val, isSet: true}
}

func (v NullableRecurrenceProcessRunsArguments) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRecurrenceProcessRunsArguments) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


