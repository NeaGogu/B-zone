/*
 * Bumbal Client Api
 *
 * Bumbal API documentation
 *
 * API version: 2.0
 * Contact: info@bumbal.eu
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// PackageLineUpdateArguments struct for PackageLineUpdateArguments
type PackageLineUpdateArguments struct {
	Filters *PackageLineFiltersModel `json:"filters,omitempty"`
	Data *PackageLineModel `json:"data,omitempty"`
}

// NewPackageLineUpdateArguments instantiates a new PackageLineUpdateArguments object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPackageLineUpdateArguments() *PackageLineUpdateArguments {
	this := PackageLineUpdateArguments{}
	return &this
}

// NewPackageLineUpdateArgumentsWithDefaults instantiates a new PackageLineUpdateArguments object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPackageLineUpdateArgumentsWithDefaults() *PackageLineUpdateArguments {
	this := PackageLineUpdateArguments{}
	return &this
}

// GetFilters returns the Filters field value if set, zero value otherwise.
func (o *PackageLineUpdateArguments) GetFilters() PackageLineFiltersModel {
	if o == nil || o.Filters == nil {
		var ret PackageLineFiltersModel
		return ret
	}
	return *o.Filters
}

// GetFiltersOk returns a tuple with the Filters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PackageLineUpdateArguments) GetFiltersOk() (*PackageLineFiltersModel, bool) {
	if o == nil || o.Filters == nil {
		return nil, false
	}
	return o.Filters, true
}

// HasFilters returns a boolean if a field has been set.
func (o *PackageLineUpdateArguments) HasFilters() bool {
	if o != nil && o.Filters != nil {
		return true
	}

	return false
}

// SetFilters gets a reference to the given PackageLineFiltersModel and assigns it to the Filters field.
func (o *PackageLineUpdateArguments) SetFilters(v PackageLineFiltersModel) {
	o.Filters = &v
}

// GetData returns the Data field value if set, zero value otherwise.
func (o *PackageLineUpdateArguments) GetData() PackageLineModel {
	if o == nil || o.Data == nil {
		var ret PackageLineModel
		return ret
	}
	return *o.Data
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PackageLineUpdateArguments) GetDataOk() (*PackageLineModel, bool) {
	if o == nil || o.Data == nil {
		return nil, false
	}
	return o.Data, true
}

// HasData returns a boolean if a field has been set.
func (o *PackageLineUpdateArguments) HasData() bool {
	if o != nil && o.Data != nil {
		return true
	}

	return false
}

// SetData gets a reference to the given PackageLineModel and assigns it to the Data field.
func (o *PackageLineUpdateArguments) SetData(v PackageLineModel) {
	o.Data = &v
}

func (o PackageLineUpdateArguments) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Filters != nil {
		toSerialize["filters"] = o.Filters
	}
	if o.Data != nil {
		toSerialize["data"] = o.Data
	}
	return json.Marshal(toSerialize)
}

type NullablePackageLineUpdateArguments struct {
	value *PackageLineUpdateArguments
	isSet bool
}

func (v NullablePackageLineUpdateArguments) Get() *PackageLineUpdateArguments {
	return v.value
}

func (v *NullablePackageLineUpdateArguments) Set(val *PackageLineUpdateArguments) {
	v.value = val
	v.isSet = true
}

func (v NullablePackageLineUpdateArguments) IsSet() bool {
	return v.isSet
}

func (v *NullablePackageLineUpdateArguments) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePackageLineUpdateArguments(val *PackageLineUpdateArguments) *NullablePackageLineUpdateArguments {
	return &NullablePackageLineUpdateArguments{value: val, isSet: true}
}

func (v NullablePackageLineUpdateArguments) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePackageLineUpdateArguments) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


