/*
 * Bumbal Client Api
 *
 * Bumbal API documentation
 *
 * API version: 2.0
 * Contact: info@bumbal.eu
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// MetaDataOptionsModel struct for MetaDataOptionsModel
type MetaDataOptionsModel struct {
	// 
	IncludeObjectTypeName *bool `json:"include_object_type_name,omitempty"`
	// 
	IncludeRecordInfo *bool `json:"include_record_info,omitempty"`
}

// NewMetaDataOptionsModel instantiates a new MetaDataOptionsModel object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMetaDataOptionsModel() *MetaDataOptionsModel {
	this := MetaDataOptionsModel{}
	return &this
}

// NewMetaDataOptionsModelWithDefaults instantiates a new MetaDataOptionsModel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMetaDataOptionsModelWithDefaults() *MetaDataOptionsModel {
	this := MetaDataOptionsModel{}
	return &this
}

// GetIncludeObjectTypeName returns the IncludeObjectTypeName field value if set, zero value otherwise.
func (o *MetaDataOptionsModel) GetIncludeObjectTypeName() bool {
	if o == nil || o.IncludeObjectTypeName == nil {
		var ret bool
		return ret
	}
	return *o.IncludeObjectTypeName
}

// GetIncludeObjectTypeNameOk returns a tuple with the IncludeObjectTypeName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetaDataOptionsModel) GetIncludeObjectTypeNameOk() (*bool, bool) {
	if o == nil || o.IncludeObjectTypeName == nil {
		return nil, false
	}
	return o.IncludeObjectTypeName, true
}

// HasIncludeObjectTypeName returns a boolean if a field has been set.
func (o *MetaDataOptionsModel) HasIncludeObjectTypeName() bool {
	if o != nil && o.IncludeObjectTypeName != nil {
		return true
	}

	return false
}

// SetIncludeObjectTypeName gets a reference to the given bool and assigns it to the IncludeObjectTypeName field.
func (o *MetaDataOptionsModel) SetIncludeObjectTypeName(v bool) {
	o.IncludeObjectTypeName = &v
}

// GetIncludeRecordInfo returns the IncludeRecordInfo field value if set, zero value otherwise.
func (o *MetaDataOptionsModel) GetIncludeRecordInfo() bool {
	if o == nil || o.IncludeRecordInfo == nil {
		var ret bool
		return ret
	}
	return *o.IncludeRecordInfo
}

// GetIncludeRecordInfoOk returns a tuple with the IncludeRecordInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetaDataOptionsModel) GetIncludeRecordInfoOk() (*bool, bool) {
	if o == nil || o.IncludeRecordInfo == nil {
		return nil, false
	}
	return o.IncludeRecordInfo, true
}

// HasIncludeRecordInfo returns a boolean if a field has been set.
func (o *MetaDataOptionsModel) HasIncludeRecordInfo() bool {
	if o != nil && o.IncludeRecordInfo != nil {
		return true
	}

	return false
}

// SetIncludeRecordInfo gets a reference to the given bool and assigns it to the IncludeRecordInfo field.
func (o *MetaDataOptionsModel) SetIncludeRecordInfo(v bool) {
	o.IncludeRecordInfo = &v
}

func (o MetaDataOptionsModel) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.IncludeObjectTypeName != nil {
		toSerialize["include_object_type_name"] = o.IncludeObjectTypeName
	}
	if o.IncludeRecordInfo != nil {
		toSerialize["include_record_info"] = o.IncludeRecordInfo
	}
	return json.Marshal(toSerialize)
}

type NullableMetaDataOptionsModel struct {
	value *MetaDataOptionsModel
	isSet bool
}

func (v NullableMetaDataOptionsModel) Get() *MetaDataOptionsModel {
	return v.value
}

func (v *NullableMetaDataOptionsModel) Set(val *MetaDataOptionsModel) {
	v.value = val
	v.isSet = true
}

func (v NullableMetaDataOptionsModel) IsSet() bool {
	return v.isSet
}

func (v *NullableMetaDataOptionsModel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMetaDataOptionsModel(val *MetaDataOptionsModel) *NullableMetaDataOptionsModel {
	return &NullableMetaDataOptionsModel{value: val, isSet: true}
}

func (v NullableMetaDataOptionsModel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMetaDataOptionsModel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


