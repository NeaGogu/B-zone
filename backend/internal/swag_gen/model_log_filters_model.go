/*
 * Bumbal Client Api
 *
 * Bumbal API documentation
 *
 * API version: 2.0
 * Contact: info@bumbal.eu
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// LogFiltersModel struct for LogFiltersModel
type LogFiltersModel struct {
	// Graylog query, see Graylog docs for syntax (https://docs.graylog.org/en/3.1/pages/queries.html#time-frame-selector)
	Query *string `json:"query,omitempty"`
	// Datetime from. When left empty, default value will be now -10 minutes
	DateTimeFrom *string `json:"date_time_from,omitempty"`
	// Datetime to. When left empty, default value will be now
	DateTimeTo *string `json:"date_time_to,omitempty"`
}

// NewLogFiltersModel instantiates a new LogFiltersModel object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLogFiltersModel() *LogFiltersModel {
	this := LogFiltersModel{}
	return &this
}

// NewLogFiltersModelWithDefaults instantiates a new LogFiltersModel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLogFiltersModelWithDefaults() *LogFiltersModel {
	this := LogFiltersModel{}
	return &this
}

// GetQuery returns the Query field value if set, zero value otherwise.
func (o *LogFiltersModel) GetQuery() string {
	if o == nil || o.Query == nil {
		var ret string
		return ret
	}
	return *o.Query
}

// GetQueryOk returns a tuple with the Query field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LogFiltersModel) GetQueryOk() (*string, bool) {
	if o == nil || o.Query == nil {
		return nil, false
	}
	return o.Query, true
}

// HasQuery returns a boolean if a field has been set.
func (o *LogFiltersModel) HasQuery() bool {
	if o != nil && o.Query != nil {
		return true
	}

	return false
}

// SetQuery gets a reference to the given string and assigns it to the Query field.
func (o *LogFiltersModel) SetQuery(v string) {
	o.Query = &v
}

// GetDateTimeFrom returns the DateTimeFrom field value if set, zero value otherwise.
func (o *LogFiltersModel) GetDateTimeFrom() string {
	if o == nil || o.DateTimeFrom == nil {
		var ret string
		return ret
	}
	return *o.DateTimeFrom
}

// GetDateTimeFromOk returns a tuple with the DateTimeFrom field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LogFiltersModel) GetDateTimeFromOk() (*string, bool) {
	if o == nil || o.DateTimeFrom == nil {
		return nil, false
	}
	return o.DateTimeFrom, true
}

// HasDateTimeFrom returns a boolean if a field has been set.
func (o *LogFiltersModel) HasDateTimeFrom() bool {
	if o != nil && o.DateTimeFrom != nil {
		return true
	}

	return false
}

// SetDateTimeFrom gets a reference to the given string and assigns it to the DateTimeFrom field.
func (o *LogFiltersModel) SetDateTimeFrom(v string) {
	o.DateTimeFrom = &v
}

// GetDateTimeTo returns the DateTimeTo field value if set, zero value otherwise.
func (o *LogFiltersModel) GetDateTimeTo() string {
	if o == nil || o.DateTimeTo == nil {
		var ret string
		return ret
	}
	return *o.DateTimeTo
}

// GetDateTimeToOk returns a tuple with the DateTimeTo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LogFiltersModel) GetDateTimeToOk() (*string, bool) {
	if o == nil || o.DateTimeTo == nil {
		return nil, false
	}
	return o.DateTimeTo, true
}

// HasDateTimeTo returns a boolean if a field has been set.
func (o *LogFiltersModel) HasDateTimeTo() bool {
	if o != nil && o.DateTimeTo != nil {
		return true
	}

	return false
}

// SetDateTimeTo gets a reference to the given string and assigns it to the DateTimeTo field.
func (o *LogFiltersModel) SetDateTimeTo(v string) {
	o.DateTimeTo = &v
}

func (o LogFiltersModel) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Query != nil {
		toSerialize["query"] = o.Query
	}
	if o.DateTimeFrom != nil {
		toSerialize["date_time_from"] = o.DateTimeFrom
	}
	if o.DateTimeTo != nil {
		toSerialize["date_time_to"] = o.DateTimeTo
	}
	return json.Marshal(toSerialize)
}

type NullableLogFiltersModel struct {
	value *LogFiltersModel
	isSet bool
}

func (v NullableLogFiltersModel) Get() *LogFiltersModel {
	return v.value
}

func (v *NullableLogFiltersModel) Set(val *LogFiltersModel) {
	v.value = val
	v.isSet = true
}

func (v NullableLogFiltersModel) IsSet() bool {
	return v.isSet
}

func (v *NullableLogFiltersModel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLogFiltersModel(val *LogFiltersModel) *NullableLogFiltersModel {
	return &NullableLogFiltersModel{value: val, isSet: true}
}

func (v NullableLogFiltersModel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLogFiltersModel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


