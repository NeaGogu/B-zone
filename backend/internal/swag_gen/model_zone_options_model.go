/*
 * Bumbal Client Api
 *
 * Bumbal API documentation
 *
 * API version: 2.0
 * Contact: info@bumbal.eu
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// ZoneOptionsModel struct for ZoneOptionsModel
type ZoneOptionsModel struct {
	// 
	IncludeZoneRanges *bool `json:"include_zone_ranges,omitempty"`
	// 
	IncludeBrands *bool `json:"include_brands,omitempty"`
}

// NewZoneOptionsModel instantiates a new ZoneOptionsModel object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewZoneOptionsModel() *ZoneOptionsModel {
	this := ZoneOptionsModel{}
	return &this
}

// NewZoneOptionsModelWithDefaults instantiates a new ZoneOptionsModel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewZoneOptionsModelWithDefaults() *ZoneOptionsModel {
	this := ZoneOptionsModel{}
	return &this
}

// GetIncludeZoneRanges returns the IncludeZoneRanges field value if set, zero value otherwise.
func (o *ZoneOptionsModel) GetIncludeZoneRanges() bool {
	if o == nil || o.IncludeZoneRanges == nil {
		var ret bool
		return ret
	}
	return *o.IncludeZoneRanges
}

// GetIncludeZoneRangesOk returns a tuple with the IncludeZoneRanges field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneOptionsModel) GetIncludeZoneRangesOk() (*bool, bool) {
	if o == nil || o.IncludeZoneRanges == nil {
		return nil, false
	}
	return o.IncludeZoneRanges, true
}

// HasIncludeZoneRanges returns a boolean if a field has been set.
func (o *ZoneOptionsModel) HasIncludeZoneRanges() bool {
	if o != nil && o.IncludeZoneRanges != nil {
		return true
	}

	return false
}

// SetIncludeZoneRanges gets a reference to the given bool and assigns it to the IncludeZoneRanges field.
func (o *ZoneOptionsModel) SetIncludeZoneRanges(v bool) {
	o.IncludeZoneRanges = &v
}

// GetIncludeBrands returns the IncludeBrands field value if set, zero value otherwise.
func (o *ZoneOptionsModel) GetIncludeBrands() bool {
	if o == nil || o.IncludeBrands == nil {
		var ret bool
		return ret
	}
	return *o.IncludeBrands
}

// GetIncludeBrandsOk returns a tuple with the IncludeBrands field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneOptionsModel) GetIncludeBrandsOk() (*bool, bool) {
	if o == nil || o.IncludeBrands == nil {
		return nil, false
	}
	return o.IncludeBrands, true
}

// HasIncludeBrands returns a boolean if a field has been set.
func (o *ZoneOptionsModel) HasIncludeBrands() bool {
	if o != nil && o.IncludeBrands != nil {
		return true
	}

	return false
}

// SetIncludeBrands gets a reference to the given bool and assigns it to the IncludeBrands field.
func (o *ZoneOptionsModel) SetIncludeBrands(v bool) {
	o.IncludeBrands = &v
}

func (o ZoneOptionsModel) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.IncludeZoneRanges != nil {
		toSerialize["include_zone_ranges"] = o.IncludeZoneRanges
	}
	if o.IncludeBrands != nil {
		toSerialize["include_brands"] = o.IncludeBrands
	}
	return json.Marshal(toSerialize)
}

type NullableZoneOptionsModel struct {
	value *ZoneOptionsModel
	isSet bool
}

func (v NullableZoneOptionsModel) Get() *ZoneOptionsModel {
	return v.value
}

func (v *NullableZoneOptionsModel) Set(val *ZoneOptionsModel) {
	v.value = val
	v.isSet = true
}

func (v NullableZoneOptionsModel) IsSet() bool {
	return v.isSet
}

func (v *NullableZoneOptionsModel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableZoneOptionsModel(val *ZoneOptionsModel) *NullableZoneOptionsModel {
	return &NullableZoneOptionsModel{value: val, isSet: true}
}

func (v NullableZoneOptionsModel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableZoneOptionsModel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


