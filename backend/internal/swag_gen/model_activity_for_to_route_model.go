/*
 * Bumbal Client Api
 *
 * Bumbal API documentation
 *
 * API version: 2.0
 * Contact: info@bumbal.eu
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// ActivityForToRouteModel struct for ActivityForToRouteModel
type ActivityForToRouteModel struct {
	// Unique ID of Route
	ActivityId *int64 `json:"activity_id,omitempty"`
	// Sequence number on Route
	SequenceNr *int64 `json:"sequence_nr,omitempty"`
}

// NewActivityForToRouteModel instantiates a new ActivityForToRouteModel object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewActivityForToRouteModel() *ActivityForToRouteModel {
	this := ActivityForToRouteModel{}
	return &this
}

// NewActivityForToRouteModelWithDefaults instantiates a new ActivityForToRouteModel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewActivityForToRouteModelWithDefaults() *ActivityForToRouteModel {
	this := ActivityForToRouteModel{}
	return &this
}

// GetActivityId returns the ActivityId field value if set, zero value otherwise.
func (o *ActivityForToRouteModel) GetActivityId() int64 {
	if o == nil || o.ActivityId == nil {
		var ret int64
		return ret
	}
	return *o.ActivityId
}

// GetActivityIdOk returns a tuple with the ActivityId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActivityForToRouteModel) GetActivityIdOk() (*int64, bool) {
	if o == nil || o.ActivityId == nil {
		return nil, false
	}
	return o.ActivityId, true
}

// HasActivityId returns a boolean if a field has been set.
func (o *ActivityForToRouteModel) HasActivityId() bool {
	if o != nil && o.ActivityId != nil {
		return true
	}

	return false
}

// SetActivityId gets a reference to the given int64 and assigns it to the ActivityId field.
func (o *ActivityForToRouteModel) SetActivityId(v int64) {
	o.ActivityId = &v
}

// GetSequenceNr returns the SequenceNr field value if set, zero value otherwise.
func (o *ActivityForToRouteModel) GetSequenceNr() int64 {
	if o == nil || o.SequenceNr == nil {
		var ret int64
		return ret
	}
	return *o.SequenceNr
}

// GetSequenceNrOk returns a tuple with the SequenceNr field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActivityForToRouteModel) GetSequenceNrOk() (*int64, bool) {
	if o == nil || o.SequenceNr == nil {
		return nil, false
	}
	return o.SequenceNr, true
}

// HasSequenceNr returns a boolean if a field has been set.
func (o *ActivityForToRouteModel) HasSequenceNr() bool {
	if o != nil && o.SequenceNr != nil {
		return true
	}

	return false
}

// SetSequenceNr gets a reference to the given int64 and assigns it to the SequenceNr field.
func (o *ActivityForToRouteModel) SetSequenceNr(v int64) {
	o.SequenceNr = &v
}

func (o ActivityForToRouteModel) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ActivityId != nil {
		toSerialize["activity_id"] = o.ActivityId
	}
	if o.SequenceNr != nil {
		toSerialize["sequence_nr"] = o.SequenceNr
	}
	return json.Marshal(toSerialize)
}

type NullableActivityForToRouteModel struct {
	value *ActivityForToRouteModel
	isSet bool
}

func (v NullableActivityForToRouteModel) Get() *ActivityForToRouteModel {
	return v.value
}

func (v *NullableActivityForToRouteModel) Set(val *ActivityForToRouteModel) {
	v.value = val
	v.isSet = true
}

func (v NullableActivityForToRouteModel) IsSet() bool {
	return v.isSet
}

func (v *NullableActivityForToRouteModel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableActivityForToRouteModel(val *ActivityForToRouteModel) *NullableActivityForToRouteModel {
	return &NullableActivityForToRouteModel{value: val, isSet: true}
}

func (v NullableActivityForToRouteModel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableActivityForToRouteModel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


