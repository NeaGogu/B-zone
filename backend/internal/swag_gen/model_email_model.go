/*
 * Bumbal Client Api
 *
 * Bumbal API documentation
 *
 * API version: 2.0
 * Contact: info@bumbal.eu
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// EmailModel struct for EmailModel
type EmailModel struct {
	// Unique ID
	Id *int64 `json:"id,omitempty"`
	// Address ID asociated with this email address
	AddressId *int64 `json:"address_id,omitempty"`
	// Email address
	Email *string `json:"email,omitempty"`
	// Email address description
	Description *string `json:"description,omitempty"`
	// primary Email address
	Primary *bool `json:"primary,omitempty"`
}

// NewEmailModel instantiates a new EmailModel object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEmailModel() *EmailModel {
	this := EmailModel{}
	return &this
}

// NewEmailModelWithDefaults instantiates a new EmailModel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEmailModelWithDefaults() *EmailModel {
	this := EmailModel{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *EmailModel) GetId() int64 {
	if o == nil || o.Id == nil {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmailModel) GetIdOk() (*int64, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *EmailModel) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *EmailModel) SetId(v int64) {
	o.Id = &v
}

// GetAddressId returns the AddressId field value if set, zero value otherwise.
func (o *EmailModel) GetAddressId() int64 {
	if o == nil || o.AddressId == nil {
		var ret int64
		return ret
	}
	return *o.AddressId
}

// GetAddressIdOk returns a tuple with the AddressId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmailModel) GetAddressIdOk() (*int64, bool) {
	if o == nil || o.AddressId == nil {
		return nil, false
	}
	return o.AddressId, true
}

// HasAddressId returns a boolean if a field has been set.
func (o *EmailModel) HasAddressId() bool {
	if o != nil && o.AddressId != nil {
		return true
	}

	return false
}

// SetAddressId gets a reference to the given int64 and assigns it to the AddressId field.
func (o *EmailModel) SetAddressId(v int64) {
	o.AddressId = &v
}

// GetEmail returns the Email field value if set, zero value otherwise.
func (o *EmailModel) GetEmail() string {
	if o == nil || o.Email == nil {
		var ret string
		return ret
	}
	return *o.Email
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmailModel) GetEmailOk() (*string, bool) {
	if o == nil || o.Email == nil {
		return nil, false
	}
	return o.Email, true
}

// HasEmail returns a boolean if a field has been set.
func (o *EmailModel) HasEmail() bool {
	if o != nil && o.Email != nil {
		return true
	}

	return false
}

// SetEmail gets a reference to the given string and assigns it to the Email field.
func (o *EmailModel) SetEmail(v string) {
	o.Email = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *EmailModel) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmailModel) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *EmailModel) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *EmailModel) SetDescription(v string) {
	o.Description = &v
}

// GetPrimary returns the Primary field value if set, zero value otherwise.
func (o *EmailModel) GetPrimary() bool {
	if o == nil || o.Primary == nil {
		var ret bool
		return ret
	}
	return *o.Primary
}

// GetPrimaryOk returns a tuple with the Primary field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmailModel) GetPrimaryOk() (*bool, bool) {
	if o == nil || o.Primary == nil {
		return nil, false
	}
	return o.Primary, true
}

// HasPrimary returns a boolean if a field has been set.
func (o *EmailModel) HasPrimary() bool {
	if o != nil && o.Primary != nil {
		return true
	}

	return false
}

// SetPrimary gets a reference to the given bool and assigns it to the Primary field.
func (o *EmailModel) SetPrimary(v bool) {
	o.Primary = &v
}

func (o EmailModel) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.AddressId != nil {
		toSerialize["address_id"] = o.AddressId
	}
	if o.Email != nil {
		toSerialize["email"] = o.Email
	}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	if o.Primary != nil {
		toSerialize["primary"] = o.Primary
	}
	return json.Marshal(toSerialize)
}

type NullableEmailModel struct {
	value *EmailModel
	isSet bool
}

func (v NullableEmailModel) Get() *EmailModel {
	return v.value
}

func (v *NullableEmailModel) Set(val *EmailModel) {
	v.value = val
	v.isSet = true
}

func (v NullableEmailModel) IsSet() bool {
	return v.isSet
}

func (v *NullableEmailModel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEmailModel(val *EmailModel) *NullableEmailModel {
	return &NullableEmailModel{value: val, isSet: true}
}

func (v NullableEmailModel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEmailModel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


