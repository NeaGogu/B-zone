/*
 * Bumbal Client Api
 *
 * Bumbal API documentation
 *
 * API version: 2.0
 * Contact: info@bumbal.eu
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// TagModel struct for TagModel
type TagModel struct {
	// Unique ID
	Id *int64 `json:"id,omitempty"`
	// Object type ID
	ObjectType *int64 `json:"object_type,omitempty"`
	// Tag type ID
	TagTypeId *int64 `json:"tag_type_id,omitempty"`
	// Tag type Name
	TagTypeName *string `json:"tag_type_name,omitempty"`
	// Tag Name (same as tag_type_name, but tag_type_name will become deprecated in the future)
	TagName *string `json:"tag_name,omitempty"`
}

// NewTagModel instantiates a new TagModel object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTagModel() *TagModel {
	this := TagModel{}
	return &this
}

// NewTagModelWithDefaults instantiates a new TagModel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTagModelWithDefaults() *TagModel {
	this := TagModel{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *TagModel) GetId() int64 {
	if o == nil || o.Id == nil {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TagModel) GetIdOk() (*int64, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *TagModel) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *TagModel) SetId(v int64) {
	o.Id = &v
}

// GetObjectType returns the ObjectType field value if set, zero value otherwise.
func (o *TagModel) GetObjectType() int64 {
	if o == nil || o.ObjectType == nil {
		var ret int64
		return ret
	}
	return *o.ObjectType
}

// GetObjectTypeOk returns a tuple with the ObjectType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TagModel) GetObjectTypeOk() (*int64, bool) {
	if o == nil || o.ObjectType == nil {
		return nil, false
	}
	return o.ObjectType, true
}

// HasObjectType returns a boolean if a field has been set.
func (o *TagModel) HasObjectType() bool {
	if o != nil && o.ObjectType != nil {
		return true
	}

	return false
}

// SetObjectType gets a reference to the given int64 and assigns it to the ObjectType field.
func (o *TagModel) SetObjectType(v int64) {
	o.ObjectType = &v
}

// GetTagTypeId returns the TagTypeId field value if set, zero value otherwise.
func (o *TagModel) GetTagTypeId() int64 {
	if o == nil || o.TagTypeId == nil {
		var ret int64
		return ret
	}
	return *o.TagTypeId
}

// GetTagTypeIdOk returns a tuple with the TagTypeId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TagModel) GetTagTypeIdOk() (*int64, bool) {
	if o == nil || o.TagTypeId == nil {
		return nil, false
	}
	return o.TagTypeId, true
}

// HasTagTypeId returns a boolean if a field has been set.
func (o *TagModel) HasTagTypeId() bool {
	if o != nil && o.TagTypeId != nil {
		return true
	}

	return false
}

// SetTagTypeId gets a reference to the given int64 and assigns it to the TagTypeId field.
func (o *TagModel) SetTagTypeId(v int64) {
	o.TagTypeId = &v
}

// GetTagTypeName returns the TagTypeName field value if set, zero value otherwise.
func (o *TagModel) GetTagTypeName() string {
	if o == nil || o.TagTypeName == nil {
		var ret string
		return ret
	}
	return *o.TagTypeName
}

// GetTagTypeNameOk returns a tuple with the TagTypeName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TagModel) GetTagTypeNameOk() (*string, bool) {
	if o == nil || o.TagTypeName == nil {
		return nil, false
	}
	return o.TagTypeName, true
}

// HasTagTypeName returns a boolean if a field has been set.
func (o *TagModel) HasTagTypeName() bool {
	if o != nil && o.TagTypeName != nil {
		return true
	}

	return false
}

// SetTagTypeName gets a reference to the given string and assigns it to the TagTypeName field.
func (o *TagModel) SetTagTypeName(v string) {
	o.TagTypeName = &v
}

// GetTagName returns the TagName field value if set, zero value otherwise.
func (o *TagModel) GetTagName() string {
	if o == nil || o.TagName == nil {
		var ret string
		return ret
	}
	return *o.TagName
}

// GetTagNameOk returns a tuple with the TagName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TagModel) GetTagNameOk() (*string, bool) {
	if o == nil || o.TagName == nil {
		return nil, false
	}
	return o.TagName, true
}

// HasTagName returns a boolean if a field has been set.
func (o *TagModel) HasTagName() bool {
	if o != nil && o.TagName != nil {
		return true
	}

	return false
}

// SetTagName gets a reference to the given string and assigns it to the TagName field.
func (o *TagModel) SetTagName(v string) {
	o.TagName = &v
}

func (o TagModel) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.ObjectType != nil {
		toSerialize["object_type"] = o.ObjectType
	}
	if o.TagTypeId != nil {
		toSerialize["tag_type_id"] = o.TagTypeId
	}
	if o.TagTypeName != nil {
		toSerialize["tag_type_name"] = o.TagTypeName
	}
	if o.TagName != nil {
		toSerialize["tag_name"] = o.TagName
	}
	return json.Marshal(toSerialize)
}

type NullableTagModel struct {
	value *TagModel
	isSet bool
}

func (v NullableTagModel) Get() *TagModel {
	return v.value
}

func (v *NullableTagModel) Set(val *TagModel) {
	v.value = val
	v.isSet = true
}

func (v NullableTagModel) IsSet() bool {
	return v.isSet
}

func (v *NullableTagModel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTagModel(val *TagModel) *NullableTagModel {
	return &NullableTagModel{value: val, isSet: true}
}

func (v NullableTagModel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTagModel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


