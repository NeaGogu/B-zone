/*
 * Bumbal Client Api
 *
 * Bumbal API documentation
 *
 * API version: 2.0
 * Contact: info@bumbal.eu
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// NoteModel struct for NoteModel
type NoteModel struct {
	// Unique Identifier
	Id *int64 `json:"id,omitempty"`
	// Object type ID
	ObjectType *int64 `json:"object_type,omitempty"`
	// Object type name
	ObjectTypeName *string `json:"object_type_name,omitempty"`
	// Object ID
	ObjectId *int32 `json:"object_id,omitempty"`
	ObjectLink *LinkModel `json:"object_link,omitempty"`
	// Note category id
	NoteCategoryId *int32 `json:"note_category_id,omitempty"`
	// Note category name
	NoteCategoryName *string `json:"note_category_name,omitempty"`
	// Notition is visible in driver App
	VisibleForDriver *bool `json:"visible_for_driver,omitempty"`
	// Note title
	Title *string `json:"title,omitempty"`
	// Note updated by user full name
	UpdatedByName *string `json:"updated_by_name,omitempty"`
	// Note content
	Content *string `json:"content,omitempty"`
	// 
	Files *[]FileModel `json:"files,omitempty"`
	// 
	Links *[]LinkModel `json:"links,omitempty"`
	// 
	MetaData *[]MetaDataModel `json:"meta_data,omitempty"`
	// if active=0: note has been removed and is no longer visible in any bumbal interface
	Active *bool `json:"active,omitempty"`
	// created_at date time
	CreatedAt *time.Time `json:"created_at,omitempty"`
	// updated_at date time
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
	// created_by user id
	CreatedBy *int32 `json:"created_by,omitempty"`
	// updated_by user id
	UpdatedBy *int32 `json:"updated_by,omitempty"`
}

// NewNoteModel instantiates a new NoteModel object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNoteModel() *NoteModel {
	this := NoteModel{}
	return &this
}

// NewNoteModelWithDefaults instantiates a new NoteModel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNoteModelWithDefaults() *NoteModel {
	this := NoteModel{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *NoteModel) GetId() int64 {
	if o == nil || o.Id == nil {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NoteModel) GetIdOk() (*int64, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *NoteModel) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *NoteModel) SetId(v int64) {
	o.Id = &v
}

// GetObjectType returns the ObjectType field value if set, zero value otherwise.
func (o *NoteModel) GetObjectType() int64 {
	if o == nil || o.ObjectType == nil {
		var ret int64
		return ret
	}
	return *o.ObjectType
}

// GetObjectTypeOk returns a tuple with the ObjectType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NoteModel) GetObjectTypeOk() (*int64, bool) {
	if o == nil || o.ObjectType == nil {
		return nil, false
	}
	return o.ObjectType, true
}

// HasObjectType returns a boolean if a field has been set.
func (o *NoteModel) HasObjectType() bool {
	if o != nil && o.ObjectType != nil {
		return true
	}

	return false
}

// SetObjectType gets a reference to the given int64 and assigns it to the ObjectType field.
func (o *NoteModel) SetObjectType(v int64) {
	o.ObjectType = &v
}

// GetObjectTypeName returns the ObjectTypeName field value if set, zero value otherwise.
func (o *NoteModel) GetObjectTypeName() string {
	if o == nil || o.ObjectTypeName == nil {
		var ret string
		return ret
	}
	return *o.ObjectTypeName
}

// GetObjectTypeNameOk returns a tuple with the ObjectTypeName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NoteModel) GetObjectTypeNameOk() (*string, bool) {
	if o == nil || o.ObjectTypeName == nil {
		return nil, false
	}
	return o.ObjectTypeName, true
}

// HasObjectTypeName returns a boolean if a field has been set.
func (o *NoteModel) HasObjectTypeName() bool {
	if o != nil && o.ObjectTypeName != nil {
		return true
	}

	return false
}

// SetObjectTypeName gets a reference to the given string and assigns it to the ObjectTypeName field.
func (o *NoteModel) SetObjectTypeName(v string) {
	o.ObjectTypeName = &v
}

// GetObjectId returns the ObjectId field value if set, zero value otherwise.
func (o *NoteModel) GetObjectId() int32 {
	if o == nil || o.ObjectId == nil {
		var ret int32
		return ret
	}
	return *o.ObjectId
}

// GetObjectIdOk returns a tuple with the ObjectId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NoteModel) GetObjectIdOk() (*int32, bool) {
	if o == nil || o.ObjectId == nil {
		return nil, false
	}
	return o.ObjectId, true
}

// HasObjectId returns a boolean if a field has been set.
func (o *NoteModel) HasObjectId() bool {
	if o != nil && o.ObjectId != nil {
		return true
	}

	return false
}

// SetObjectId gets a reference to the given int32 and assigns it to the ObjectId field.
func (o *NoteModel) SetObjectId(v int32) {
	o.ObjectId = &v
}

// GetObjectLink returns the ObjectLink field value if set, zero value otherwise.
func (o *NoteModel) GetObjectLink() LinkModel {
	if o == nil || o.ObjectLink == nil {
		var ret LinkModel
		return ret
	}
	return *o.ObjectLink
}

// GetObjectLinkOk returns a tuple with the ObjectLink field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NoteModel) GetObjectLinkOk() (*LinkModel, bool) {
	if o == nil || o.ObjectLink == nil {
		return nil, false
	}
	return o.ObjectLink, true
}

// HasObjectLink returns a boolean if a field has been set.
func (o *NoteModel) HasObjectLink() bool {
	if o != nil && o.ObjectLink != nil {
		return true
	}

	return false
}

// SetObjectLink gets a reference to the given LinkModel and assigns it to the ObjectLink field.
func (o *NoteModel) SetObjectLink(v LinkModel) {
	o.ObjectLink = &v
}

// GetNoteCategoryId returns the NoteCategoryId field value if set, zero value otherwise.
func (o *NoteModel) GetNoteCategoryId() int32 {
	if o == nil || o.NoteCategoryId == nil {
		var ret int32
		return ret
	}
	return *o.NoteCategoryId
}

// GetNoteCategoryIdOk returns a tuple with the NoteCategoryId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NoteModel) GetNoteCategoryIdOk() (*int32, bool) {
	if o == nil || o.NoteCategoryId == nil {
		return nil, false
	}
	return o.NoteCategoryId, true
}

// HasNoteCategoryId returns a boolean if a field has been set.
func (o *NoteModel) HasNoteCategoryId() bool {
	if o != nil && o.NoteCategoryId != nil {
		return true
	}

	return false
}

// SetNoteCategoryId gets a reference to the given int32 and assigns it to the NoteCategoryId field.
func (o *NoteModel) SetNoteCategoryId(v int32) {
	o.NoteCategoryId = &v
}

// GetNoteCategoryName returns the NoteCategoryName field value if set, zero value otherwise.
func (o *NoteModel) GetNoteCategoryName() string {
	if o == nil || o.NoteCategoryName == nil {
		var ret string
		return ret
	}
	return *o.NoteCategoryName
}

// GetNoteCategoryNameOk returns a tuple with the NoteCategoryName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NoteModel) GetNoteCategoryNameOk() (*string, bool) {
	if o == nil || o.NoteCategoryName == nil {
		return nil, false
	}
	return o.NoteCategoryName, true
}

// HasNoteCategoryName returns a boolean if a field has been set.
func (o *NoteModel) HasNoteCategoryName() bool {
	if o != nil && o.NoteCategoryName != nil {
		return true
	}

	return false
}

// SetNoteCategoryName gets a reference to the given string and assigns it to the NoteCategoryName field.
func (o *NoteModel) SetNoteCategoryName(v string) {
	o.NoteCategoryName = &v
}

// GetVisibleForDriver returns the VisibleForDriver field value if set, zero value otherwise.
func (o *NoteModel) GetVisibleForDriver() bool {
	if o == nil || o.VisibleForDriver == nil {
		var ret bool
		return ret
	}
	return *o.VisibleForDriver
}

// GetVisibleForDriverOk returns a tuple with the VisibleForDriver field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NoteModel) GetVisibleForDriverOk() (*bool, bool) {
	if o == nil || o.VisibleForDriver == nil {
		return nil, false
	}
	return o.VisibleForDriver, true
}

// HasVisibleForDriver returns a boolean if a field has been set.
func (o *NoteModel) HasVisibleForDriver() bool {
	if o != nil && o.VisibleForDriver != nil {
		return true
	}

	return false
}

// SetVisibleForDriver gets a reference to the given bool and assigns it to the VisibleForDriver field.
func (o *NoteModel) SetVisibleForDriver(v bool) {
	o.VisibleForDriver = &v
}

// GetTitle returns the Title field value if set, zero value otherwise.
func (o *NoteModel) GetTitle() string {
	if o == nil || o.Title == nil {
		var ret string
		return ret
	}
	return *o.Title
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NoteModel) GetTitleOk() (*string, bool) {
	if o == nil || o.Title == nil {
		return nil, false
	}
	return o.Title, true
}

// HasTitle returns a boolean if a field has been set.
func (o *NoteModel) HasTitle() bool {
	if o != nil && o.Title != nil {
		return true
	}

	return false
}

// SetTitle gets a reference to the given string and assigns it to the Title field.
func (o *NoteModel) SetTitle(v string) {
	o.Title = &v
}

// GetUpdatedByName returns the UpdatedByName field value if set, zero value otherwise.
func (o *NoteModel) GetUpdatedByName() string {
	if o == nil || o.UpdatedByName == nil {
		var ret string
		return ret
	}
	return *o.UpdatedByName
}

// GetUpdatedByNameOk returns a tuple with the UpdatedByName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NoteModel) GetUpdatedByNameOk() (*string, bool) {
	if o == nil || o.UpdatedByName == nil {
		return nil, false
	}
	return o.UpdatedByName, true
}

// HasUpdatedByName returns a boolean if a field has been set.
func (o *NoteModel) HasUpdatedByName() bool {
	if o != nil && o.UpdatedByName != nil {
		return true
	}

	return false
}

// SetUpdatedByName gets a reference to the given string and assigns it to the UpdatedByName field.
func (o *NoteModel) SetUpdatedByName(v string) {
	o.UpdatedByName = &v
}

// GetContent returns the Content field value if set, zero value otherwise.
func (o *NoteModel) GetContent() string {
	if o == nil || o.Content == nil {
		var ret string
		return ret
	}
	return *o.Content
}

// GetContentOk returns a tuple with the Content field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NoteModel) GetContentOk() (*string, bool) {
	if o == nil || o.Content == nil {
		return nil, false
	}
	return o.Content, true
}

// HasContent returns a boolean if a field has been set.
func (o *NoteModel) HasContent() bool {
	if o != nil && o.Content != nil {
		return true
	}

	return false
}

// SetContent gets a reference to the given string and assigns it to the Content field.
func (o *NoteModel) SetContent(v string) {
	o.Content = &v
}

// GetFiles returns the Files field value if set, zero value otherwise.
func (o *NoteModel) GetFiles() []FileModel {
	if o == nil || o.Files == nil {
		var ret []FileModel
		return ret
	}
	return *o.Files
}

// GetFilesOk returns a tuple with the Files field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NoteModel) GetFilesOk() (*[]FileModel, bool) {
	if o == nil || o.Files == nil {
		return nil, false
	}
	return o.Files, true
}

// HasFiles returns a boolean if a field has been set.
func (o *NoteModel) HasFiles() bool {
	if o != nil && o.Files != nil {
		return true
	}

	return false
}

// SetFiles gets a reference to the given []FileModel and assigns it to the Files field.
func (o *NoteModel) SetFiles(v []FileModel) {
	o.Files = &v
}

// GetLinks returns the Links field value if set, zero value otherwise.
func (o *NoteModel) GetLinks() []LinkModel {
	if o == nil || o.Links == nil {
		var ret []LinkModel
		return ret
	}
	return *o.Links
}

// GetLinksOk returns a tuple with the Links field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NoteModel) GetLinksOk() (*[]LinkModel, bool) {
	if o == nil || o.Links == nil {
		return nil, false
	}
	return o.Links, true
}

// HasLinks returns a boolean if a field has been set.
func (o *NoteModel) HasLinks() bool {
	if o != nil && o.Links != nil {
		return true
	}

	return false
}

// SetLinks gets a reference to the given []LinkModel and assigns it to the Links field.
func (o *NoteModel) SetLinks(v []LinkModel) {
	o.Links = &v
}

// GetMetaData returns the MetaData field value if set, zero value otherwise.
func (o *NoteModel) GetMetaData() []MetaDataModel {
	if o == nil || o.MetaData == nil {
		var ret []MetaDataModel
		return ret
	}
	return *o.MetaData
}

// GetMetaDataOk returns a tuple with the MetaData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NoteModel) GetMetaDataOk() (*[]MetaDataModel, bool) {
	if o == nil || o.MetaData == nil {
		return nil, false
	}
	return o.MetaData, true
}

// HasMetaData returns a boolean if a field has been set.
func (o *NoteModel) HasMetaData() bool {
	if o != nil && o.MetaData != nil {
		return true
	}

	return false
}

// SetMetaData gets a reference to the given []MetaDataModel and assigns it to the MetaData field.
func (o *NoteModel) SetMetaData(v []MetaDataModel) {
	o.MetaData = &v
}

// GetActive returns the Active field value if set, zero value otherwise.
func (o *NoteModel) GetActive() bool {
	if o == nil || o.Active == nil {
		var ret bool
		return ret
	}
	return *o.Active
}

// GetActiveOk returns a tuple with the Active field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NoteModel) GetActiveOk() (*bool, bool) {
	if o == nil || o.Active == nil {
		return nil, false
	}
	return o.Active, true
}

// HasActive returns a boolean if a field has been set.
func (o *NoteModel) HasActive() bool {
	if o != nil && o.Active != nil {
		return true
	}

	return false
}

// SetActive gets a reference to the given bool and assigns it to the Active field.
func (o *NoteModel) SetActive(v bool) {
	o.Active = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *NoteModel) GetCreatedAt() time.Time {
	if o == nil || o.CreatedAt == nil {
		var ret time.Time
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NoteModel) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil || o.CreatedAt == nil {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *NoteModel) HasCreatedAt() bool {
	if o != nil && o.CreatedAt != nil {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given time.Time and assigns it to the CreatedAt field.
func (o *NoteModel) SetCreatedAt(v time.Time) {
	o.CreatedAt = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *NoteModel) GetUpdatedAt() time.Time {
	if o == nil || o.UpdatedAt == nil {
		var ret time.Time
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NoteModel) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil || o.UpdatedAt == nil {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *NoteModel) HasUpdatedAt() bool {
	if o != nil && o.UpdatedAt != nil {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given time.Time and assigns it to the UpdatedAt field.
func (o *NoteModel) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = &v
}

// GetCreatedBy returns the CreatedBy field value if set, zero value otherwise.
func (o *NoteModel) GetCreatedBy() int32 {
	if o == nil || o.CreatedBy == nil {
		var ret int32
		return ret
	}
	return *o.CreatedBy
}

// GetCreatedByOk returns a tuple with the CreatedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NoteModel) GetCreatedByOk() (*int32, bool) {
	if o == nil || o.CreatedBy == nil {
		return nil, false
	}
	return o.CreatedBy, true
}

// HasCreatedBy returns a boolean if a field has been set.
func (o *NoteModel) HasCreatedBy() bool {
	if o != nil && o.CreatedBy != nil {
		return true
	}

	return false
}

// SetCreatedBy gets a reference to the given int32 and assigns it to the CreatedBy field.
func (o *NoteModel) SetCreatedBy(v int32) {
	o.CreatedBy = &v
}

// GetUpdatedBy returns the UpdatedBy field value if set, zero value otherwise.
func (o *NoteModel) GetUpdatedBy() int32 {
	if o == nil || o.UpdatedBy == nil {
		var ret int32
		return ret
	}
	return *o.UpdatedBy
}

// GetUpdatedByOk returns a tuple with the UpdatedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NoteModel) GetUpdatedByOk() (*int32, bool) {
	if o == nil || o.UpdatedBy == nil {
		return nil, false
	}
	return o.UpdatedBy, true
}

// HasUpdatedBy returns a boolean if a field has been set.
func (o *NoteModel) HasUpdatedBy() bool {
	if o != nil && o.UpdatedBy != nil {
		return true
	}

	return false
}

// SetUpdatedBy gets a reference to the given int32 and assigns it to the UpdatedBy field.
func (o *NoteModel) SetUpdatedBy(v int32) {
	o.UpdatedBy = &v
}

func (o NoteModel) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.ObjectType != nil {
		toSerialize["object_type"] = o.ObjectType
	}
	if o.ObjectTypeName != nil {
		toSerialize["object_type_name"] = o.ObjectTypeName
	}
	if o.ObjectId != nil {
		toSerialize["object_id"] = o.ObjectId
	}
	if o.ObjectLink != nil {
		toSerialize["object_link"] = o.ObjectLink
	}
	if o.NoteCategoryId != nil {
		toSerialize["note_category_id"] = o.NoteCategoryId
	}
	if o.NoteCategoryName != nil {
		toSerialize["note_category_name"] = o.NoteCategoryName
	}
	if o.VisibleForDriver != nil {
		toSerialize["visible_for_driver"] = o.VisibleForDriver
	}
	if o.Title != nil {
		toSerialize["title"] = o.Title
	}
	if o.UpdatedByName != nil {
		toSerialize["updated_by_name"] = o.UpdatedByName
	}
	if o.Content != nil {
		toSerialize["content"] = o.Content
	}
	if o.Files != nil {
		toSerialize["files"] = o.Files
	}
	if o.Links != nil {
		toSerialize["links"] = o.Links
	}
	if o.MetaData != nil {
		toSerialize["meta_data"] = o.MetaData
	}
	if o.Active != nil {
		toSerialize["active"] = o.Active
	}
	if o.CreatedAt != nil {
		toSerialize["created_at"] = o.CreatedAt
	}
	if o.UpdatedAt != nil {
		toSerialize["updated_at"] = o.UpdatedAt
	}
	if o.CreatedBy != nil {
		toSerialize["created_by"] = o.CreatedBy
	}
	if o.UpdatedBy != nil {
		toSerialize["updated_by"] = o.UpdatedBy
	}
	return json.Marshal(toSerialize)
}

type NullableNoteModel struct {
	value *NoteModel
	isSet bool
}

func (v NullableNoteModel) Get() *NoteModel {
	return v.value
}

func (v *NullableNoteModel) Set(val *NoteModel) {
	v.value = val
	v.isSet = true
}

func (v NullableNoteModel) IsSet() bool {
	return v.isSet
}

func (v *NullableNoteModel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNoteModel(val *NoteModel) *NullableNoteModel {
	return &NullableNoteModel{value: val, isSet: true}
}

func (v NullableNoteModel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNoteModel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


