/*
 * Bumbal Client Api
 *
 * Bumbal API documentation
 *
 * API version: 2.0
 * Contact: info@bumbal.eu
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// AddressSuggestionArguments struct for AddressSuggestionArguments
type AddressSuggestionArguments struct {
	// 
	IsoCountry *float32 `json:"iso_country,omitempty"`
	// 
	Zipcode *int32 `json:"zipcode,omitempty"`
	// 
	HouseNr *string `json:"house_nr,omitempty"`
}

// NewAddressSuggestionArguments instantiates a new AddressSuggestionArguments object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAddressSuggestionArguments() *AddressSuggestionArguments {
	this := AddressSuggestionArguments{}
	return &this
}

// NewAddressSuggestionArgumentsWithDefaults instantiates a new AddressSuggestionArguments object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAddressSuggestionArgumentsWithDefaults() *AddressSuggestionArguments {
	this := AddressSuggestionArguments{}
	return &this
}

// GetIsoCountry returns the IsoCountry field value if set, zero value otherwise.
func (o *AddressSuggestionArguments) GetIsoCountry() float32 {
	if o == nil || o.IsoCountry == nil {
		var ret float32
		return ret
	}
	return *o.IsoCountry
}

// GetIsoCountryOk returns a tuple with the IsoCountry field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddressSuggestionArguments) GetIsoCountryOk() (*float32, bool) {
	if o == nil || o.IsoCountry == nil {
		return nil, false
	}
	return o.IsoCountry, true
}

// HasIsoCountry returns a boolean if a field has been set.
func (o *AddressSuggestionArguments) HasIsoCountry() bool {
	if o != nil && o.IsoCountry != nil {
		return true
	}

	return false
}

// SetIsoCountry gets a reference to the given float32 and assigns it to the IsoCountry field.
func (o *AddressSuggestionArguments) SetIsoCountry(v float32) {
	o.IsoCountry = &v
}

// GetZipcode returns the Zipcode field value if set, zero value otherwise.
func (o *AddressSuggestionArguments) GetZipcode() int32 {
	if o == nil || o.Zipcode == nil {
		var ret int32
		return ret
	}
	return *o.Zipcode
}

// GetZipcodeOk returns a tuple with the Zipcode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddressSuggestionArguments) GetZipcodeOk() (*int32, bool) {
	if o == nil || o.Zipcode == nil {
		return nil, false
	}
	return o.Zipcode, true
}

// HasZipcode returns a boolean if a field has been set.
func (o *AddressSuggestionArguments) HasZipcode() bool {
	if o != nil && o.Zipcode != nil {
		return true
	}

	return false
}

// SetZipcode gets a reference to the given int32 and assigns it to the Zipcode field.
func (o *AddressSuggestionArguments) SetZipcode(v int32) {
	o.Zipcode = &v
}

// GetHouseNr returns the HouseNr field value if set, zero value otherwise.
func (o *AddressSuggestionArguments) GetHouseNr() string {
	if o == nil || o.HouseNr == nil {
		var ret string
		return ret
	}
	return *o.HouseNr
}

// GetHouseNrOk returns a tuple with the HouseNr field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddressSuggestionArguments) GetHouseNrOk() (*string, bool) {
	if o == nil || o.HouseNr == nil {
		return nil, false
	}
	return o.HouseNr, true
}

// HasHouseNr returns a boolean if a field has been set.
func (o *AddressSuggestionArguments) HasHouseNr() bool {
	if o != nil && o.HouseNr != nil {
		return true
	}

	return false
}

// SetHouseNr gets a reference to the given string and assigns it to the HouseNr field.
func (o *AddressSuggestionArguments) SetHouseNr(v string) {
	o.HouseNr = &v
}

func (o AddressSuggestionArguments) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.IsoCountry != nil {
		toSerialize["iso_country"] = o.IsoCountry
	}
	if o.Zipcode != nil {
		toSerialize["zipcode"] = o.Zipcode
	}
	if o.HouseNr != nil {
		toSerialize["house_nr"] = o.HouseNr
	}
	return json.Marshal(toSerialize)
}

type NullableAddressSuggestionArguments struct {
	value *AddressSuggestionArguments
	isSet bool
}

func (v NullableAddressSuggestionArguments) Get() *AddressSuggestionArguments {
	return v.value
}

func (v *NullableAddressSuggestionArguments) Set(val *AddressSuggestionArguments) {
	v.value = val
	v.isSet = true
}

func (v NullableAddressSuggestionArguments) IsSet() bool {
	return v.isSet
}

func (v *NullableAddressSuggestionArguments) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAddressSuggestionArguments(val *AddressSuggestionArguments) *NullableAddressSuggestionArguments {
	return &NullableAddressSuggestionArguments{value: val, isSet: true}
}

func (v NullableAddressSuggestionArguments) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAddressSuggestionArguments) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


