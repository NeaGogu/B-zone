/*
 * Bumbal Client Api
 *
 * Bumbal API documentation
 *
 * API version: 2.0
 * Contact: info@bumbal.eu
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// ActivityTypeModel struct for ActivityTypeModel
type ActivityTypeModel struct {
	// Unique Activity type ID. 1 (:pickup), 2 (:dropoff), 3 (:route_start), 4 (:route_end), 5 (:car_start), 6 (:car_end), 9 (:driver_start), 10 (:driver_end), 11 (:stop), 13 (:pause), 14 (:gas_refill), 15 (:maintenance_planned), 16 (:maintenance_unplanned), 17 (:user_other), 18 (:unplanned_stop), 19 (:wait), 20 (:breakdown), 21 (:sanitary), 26 (:maintenance), 27 (:car_wash), 28 (:depot), 29 (:combi), 30 (:interior_wash), 31 (:other), 32 (:bundled)
	Id *int64 `json:"id,omitempty"`
	// Activity Type Name. breakdown (:20), bundled (:32), car_end (:6), car_start (:5), car_wash (:27), combi (:29), depot (:28), driver_end (:10), driver_start (:9), dropoff (:2), gas_refill (:14), interior_wash (:30), maintenance (:26), maintenance_planned (:15), maintenance_unplanned (:16), other (:31), pause (:13), pickup (:1), route_end (:4), route_start (:3), sanitary (:21), stop (:11), unplanned_stop (:18), user_other (:17), wait (:19)
	Name *string `json:"name,omitempty"`
	// special activities are ones which are not planned but simly added by the driver during the route execution
	Special *bool `json:"special,omitempty"`
	// assignment_entry activity types are used for order entry forms
	AssignmentEntry *bool `json:"assignment_entry,omitempty"`
}

// NewActivityTypeModel instantiates a new ActivityTypeModel object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewActivityTypeModel() *ActivityTypeModel {
	this := ActivityTypeModel{}
	return &this
}

// NewActivityTypeModelWithDefaults instantiates a new ActivityTypeModel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewActivityTypeModelWithDefaults() *ActivityTypeModel {
	this := ActivityTypeModel{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ActivityTypeModel) GetId() int64 {
	if o == nil || o.Id == nil {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActivityTypeModel) GetIdOk() (*int64, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ActivityTypeModel) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *ActivityTypeModel) SetId(v int64) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ActivityTypeModel) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActivityTypeModel) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ActivityTypeModel) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ActivityTypeModel) SetName(v string) {
	o.Name = &v
}

// GetSpecial returns the Special field value if set, zero value otherwise.
func (o *ActivityTypeModel) GetSpecial() bool {
	if o == nil || o.Special == nil {
		var ret bool
		return ret
	}
	return *o.Special
}

// GetSpecialOk returns a tuple with the Special field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActivityTypeModel) GetSpecialOk() (*bool, bool) {
	if o == nil || o.Special == nil {
		return nil, false
	}
	return o.Special, true
}

// HasSpecial returns a boolean if a field has been set.
func (o *ActivityTypeModel) HasSpecial() bool {
	if o != nil && o.Special != nil {
		return true
	}

	return false
}

// SetSpecial gets a reference to the given bool and assigns it to the Special field.
func (o *ActivityTypeModel) SetSpecial(v bool) {
	o.Special = &v
}

// GetAssignmentEntry returns the AssignmentEntry field value if set, zero value otherwise.
func (o *ActivityTypeModel) GetAssignmentEntry() bool {
	if o == nil || o.AssignmentEntry == nil {
		var ret bool
		return ret
	}
	return *o.AssignmentEntry
}

// GetAssignmentEntryOk returns a tuple with the AssignmentEntry field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActivityTypeModel) GetAssignmentEntryOk() (*bool, bool) {
	if o == nil || o.AssignmentEntry == nil {
		return nil, false
	}
	return o.AssignmentEntry, true
}

// HasAssignmentEntry returns a boolean if a field has been set.
func (o *ActivityTypeModel) HasAssignmentEntry() bool {
	if o != nil && o.AssignmentEntry != nil {
		return true
	}

	return false
}

// SetAssignmentEntry gets a reference to the given bool and assigns it to the AssignmentEntry field.
func (o *ActivityTypeModel) SetAssignmentEntry(v bool) {
	o.AssignmentEntry = &v
}

func (o ActivityTypeModel) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Special != nil {
		toSerialize["special"] = o.Special
	}
	if o.AssignmentEntry != nil {
		toSerialize["assignment_entry"] = o.AssignmentEntry
	}
	return json.Marshal(toSerialize)
}

type NullableActivityTypeModel struct {
	value *ActivityTypeModel
	isSet bool
}

func (v NullableActivityTypeModel) Get() *ActivityTypeModel {
	return v.value
}

func (v *NullableActivityTypeModel) Set(val *ActivityTypeModel) {
	v.value = val
	v.isSet = true
}

func (v NullableActivityTypeModel) IsSet() bool {
	return v.isSet
}

func (v *NullableActivityTypeModel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableActivityTypeModel(val *ActivityTypeModel) *NullableActivityTypeModel {
	return &NullableActivityTypeModel{value: val, isSet: true}
}

func (v NullableActivityTypeModel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableActivityTypeModel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


