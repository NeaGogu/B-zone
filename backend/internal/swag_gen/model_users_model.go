/*
 * Bumbal Client Api
 *
 * Bumbal API documentation
 *
 * API version: 2.0
 * Contact: info@bumbal.eu
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// UsersModel struct for UsersModel
type UsersModel struct {
	// 
	Id *int64 `json:"id,omitempty"`
	// unique per user
	Uuid *string `json:"uuid,omitempty"`
	// id of the user role, 1: Guest, 2: Driver, 3: Planner, 4: Manager, 5: Admin
	RoleId *int64 `json:"role_id,omitempty"`
	// Role name
	RoleName *string `json:"role_name,omitempty"`
	// Associated Party ID
	PartyId *int64 `json:"party_id,omitempty"`
	// 
	PartyName *string `json:"party_name,omitempty"`
	// First name
	FirstName *string `json:"first_name,omitempty"`
	// Name prefix
	NamePrefix *string `json:"name_prefix,omitempty"`
	// Last name
	LastName *string `json:"last_name,omitempty"`
	// Full name
	FullName *string `json:"full_name,omitempty"`
	// user password (set only, no read)
	Initials *string `json:"initials,omitempty"`
	// user email (used for login)
	Email *string `json:"email,omitempty"`
	// user password (set only, no read)
	Password *string `json:"password,omitempty"`
	// lang code (nl = default)
	LangCode *string `json:"lang_code,omitempty"`
	// id of the user address
	AddressId *int64 `json:"address_id,omitempty"`
	// user address (mostly interesting for drivers)
	Addresses *[]AddressModel `json:"addresses,omitempty"`
	// id of the pause to be applied by default for new user routes
	PauseId *int64 `json:"pause_id,omitempty"`
	// Speed Factor
	SpeedFactor *float64 `json:"speed_factor,omitempty"`
	// Duration Factor
	DurationFactor *float64 `json:"duration_factor,omitempty"`
	// Whether user is activated or not
	Activated *bool `json:"activated,omitempty"`
	// Whether user is removed or not
	Removed *bool `json:"removed,omitempty"`
	// Whether user is still active or not
	Active *bool `json:"active,omitempty"`
	// 
	Tags *[]TagModel `json:"tags,omitempty"`
	// Tag names
	TagNames *[]string `json:"tag_names,omitempty"`
	// The user can also be used as driver
	Driver *bool `json:"driver,omitempty"`
	// 
	Zones *[]ZoneModel `json:"zones,omitempty"`
	// Zone names
	ZoneNames *[]string `json:"zone_names,omitempty"`
	// 
	Links *[]LinkModel `json:"links,omitempty"`
	// 
	MetaData *[]MetaDataModel `json:"meta_data,omitempty"`
	// 
	DriverUnavailabilities *[]DriverUnavailabilityModel `json:"driver_unavailabilities,omitempty"`
}

// NewUsersModel instantiates a new UsersModel object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUsersModel() *UsersModel {
	this := UsersModel{}
	return &this
}

// NewUsersModelWithDefaults instantiates a new UsersModel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUsersModelWithDefaults() *UsersModel {
	this := UsersModel{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *UsersModel) GetId() int64 {
	if o == nil || o.Id == nil {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UsersModel) GetIdOk() (*int64, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *UsersModel) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *UsersModel) SetId(v int64) {
	o.Id = &v
}

// GetUuid returns the Uuid field value if set, zero value otherwise.
func (o *UsersModel) GetUuid() string {
	if o == nil || o.Uuid == nil {
		var ret string
		return ret
	}
	return *o.Uuid
}

// GetUuidOk returns a tuple with the Uuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UsersModel) GetUuidOk() (*string, bool) {
	if o == nil || o.Uuid == nil {
		return nil, false
	}
	return o.Uuid, true
}

// HasUuid returns a boolean if a field has been set.
func (o *UsersModel) HasUuid() bool {
	if o != nil && o.Uuid != nil {
		return true
	}

	return false
}

// SetUuid gets a reference to the given string and assigns it to the Uuid field.
func (o *UsersModel) SetUuid(v string) {
	o.Uuid = &v
}

// GetRoleId returns the RoleId field value if set, zero value otherwise.
func (o *UsersModel) GetRoleId() int64 {
	if o == nil || o.RoleId == nil {
		var ret int64
		return ret
	}
	return *o.RoleId
}

// GetRoleIdOk returns a tuple with the RoleId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UsersModel) GetRoleIdOk() (*int64, bool) {
	if o == nil || o.RoleId == nil {
		return nil, false
	}
	return o.RoleId, true
}

// HasRoleId returns a boolean if a field has been set.
func (o *UsersModel) HasRoleId() bool {
	if o != nil && o.RoleId != nil {
		return true
	}

	return false
}

// SetRoleId gets a reference to the given int64 and assigns it to the RoleId field.
func (o *UsersModel) SetRoleId(v int64) {
	o.RoleId = &v
}

// GetRoleName returns the RoleName field value if set, zero value otherwise.
func (o *UsersModel) GetRoleName() string {
	if o == nil || o.RoleName == nil {
		var ret string
		return ret
	}
	return *o.RoleName
}

// GetRoleNameOk returns a tuple with the RoleName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UsersModel) GetRoleNameOk() (*string, bool) {
	if o == nil || o.RoleName == nil {
		return nil, false
	}
	return o.RoleName, true
}

// HasRoleName returns a boolean if a field has been set.
func (o *UsersModel) HasRoleName() bool {
	if o != nil && o.RoleName != nil {
		return true
	}

	return false
}

// SetRoleName gets a reference to the given string and assigns it to the RoleName field.
func (o *UsersModel) SetRoleName(v string) {
	o.RoleName = &v
}

// GetPartyId returns the PartyId field value if set, zero value otherwise.
func (o *UsersModel) GetPartyId() int64 {
	if o == nil || o.PartyId == nil {
		var ret int64
		return ret
	}
	return *o.PartyId
}

// GetPartyIdOk returns a tuple with the PartyId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UsersModel) GetPartyIdOk() (*int64, bool) {
	if o == nil || o.PartyId == nil {
		return nil, false
	}
	return o.PartyId, true
}

// HasPartyId returns a boolean if a field has been set.
func (o *UsersModel) HasPartyId() bool {
	if o != nil && o.PartyId != nil {
		return true
	}

	return false
}

// SetPartyId gets a reference to the given int64 and assigns it to the PartyId field.
func (o *UsersModel) SetPartyId(v int64) {
	o.PartyId = &v
}

// GetPartyName returns the PartyName field value if set, zero value otherwise.
func (o *UsersModel) GetPartyName() string {
	if o == nil || o.PartyName == nil {
		var ret string
		return ret
	}
	return *o.PartyName
}

// GetPartyNameOk returns a tuple with the PartyName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UsersModel) GetPartyNameOk() (*string, bool) {
	if o == nil || o.PartyName == nil {
		return nil, false
	}
	return o.PartyName, true
}

// HasPartyName returns a boolean if a field has been set.
func (o *UsersModel) HasPartyName() bool {
	if o != nil && o.PartyName != nil {
		return true
	}

	return false
}

// SetPartyName gets a reference to the given string and assigns it to the PartyName field.
func (o *UsersModel) SetPartyName(v string) {
	o.PartyName = &v
}

// GetFirstName returns the FirstName field value if set, zero value otherwise.
func (o *UsersModel) GetFirstName() string {
	if o == nil || o.FirstName == nil {
		var ret string
		return ret
	}
	return *o.FirstName
}

// GetFirstNameOk returns a tuple with the FirstName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UsersModel) GetFirstNameOk() (*string, bool) {
	if o == nil || o.FirstName == nil {
		return nil, false
	}
	return o.FirstName, true
}

// HasFirstName returns a boolean if a field has been set.
func (o *UsersModel) HasFirstName() bool {
	if o != nil && o.FirstName != nil {
		return true
	}

	return false
}

// SetFirstName gets a reference to the given string and assigns it to the FirstName field.
func (o *UsersModel) SetFirstName(v string) {
	o.FirstName = &v
}

// GetNamePrefix returns the NamePrefix field value if set, zero value otherwise.
func (o *UsersModel) GetNamePrefix() string {
	if o == nil || o.NamePrefix == nil {
		var ret string
		return ret
	}
	return *o.NamePrefix
}

// GetNamePrefixOk returns a tuple with the NamePrefix field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UsersModel) GetNamePrefixOk() (*string, bool) {
	if o == nil || o.NamePrefix == nil {
		return nil, false
	}
	return o.NamePrefix, true
}

// HasNamePrefix returns a boolean if a field has been set.
func (o *UsersModel) HasNamePrefix() bool {
	if o != nil && o.NamePrefix != nil {
		return true
	}

	return false
}

// SetNamePrefix gets a reference to the given string and assigns it to the NamePrefix field.
func (o *UsersModel) SetNamePrefix(v string) {
	o.NamePrefix = &v
}

// GetLastName returns the LastName field value if set, zero value otherwise.
func (o *UsersModel) GetLastName() string {
	if o == nil || o.LastName == nil {
		var ret string
		return ret
	}
	return *o.LastName
}

// GetLastNameOk returns a tuple with the LastName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UsersModel) GetLastNameOk() (*string, bool) {
	if o == nil || o.LastName == nil {
		return nil, false
	}
	return o.LastName, true
}

// HasLastName returns a boolean if a field has been set.
func (o *UsersModel) HasLastName() bool {
	if o != nil && o.LastName != nil {
		return true
	}

	return false
}

// SetLastName gets a reference to the given string and assigns it to the LastName field.
func (o *UsersModel) SetLastName(v string) {
	o.LastName = &v
}

// GetFullName returns the FullName field value if set, zero value otherwise.
func (o *UsersModel) GetFullName() string {
	if o == nil || o.FullName == nil {
		var ret string
		return ret
	}
	return *o.FullName
}

// GetFullNameOk returns a tuple with the FullName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UsersModel) GetFullNameOk() (*string, bool) {
	if o == nil || o.FullName == nil {
		return nil, false
	}
	return o.FullName, true
}

// HasFullName returns a boolean if a field has been set.
func (o *UsersModel) HasFullName() bool {
	if o != nil && o.FullName != nil {
		return true
	}

	return false
}

// SetFullName gets a reference to the given string and assigns it to the FullName field.
func (o *UsersModel) SetFullName(v string) {
	o.FullName = &v
}

// GetInitials returns the Initials field value if set, zero value otherwise.
func (o *UsersModel) GetInitials() string {
	if o == nil || o.Initials == nil {
		var ret string
		return ret
	}
	return *o.Initials
}

// GetInitialsOk returns a tuple with the Initials field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UsersModel) GetInitialsOk() (*string, bool) {
	if o == nil || o.Initials == nil {
		return nil, false
	}
	return o.Initials, true
}

// HasInitials returns a boolean if a field has been set.
func (o *UsersModel) HasInitials() bool {
	if o != nil && o.Initials != nil {
		return true
	}

	return false
}

// SetInitials gets a reference to the given string and assigns it to the Initials field.
func (o *UsersModel) SetInitials(v string) {
	o.Initials = &v
}

// GetEmail returns the Email field value if set, zero value otherwise.
func (o *UsersModel) GetEmail() string {
	if o == nil || o.Email == nil {
		var ret string
		return ret
	}
	return *o.Email
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UsersModel) GetEmailOk() (*string, bool) {
	if o == nil || o.Email == nil {
		return nil, false
	}
	return o.Email, true
}

// HasEmail returns a boolean if a field has been set.
func (o *UsersModel) HasEmail() bool {
	if o != nil && o.Email != nil {
		return true
	}

	return false
}

// SetEmail gets a reference to the given string and assigns it to the Email field.
func (o *UsersModel) SetEmail(v string) {
	o.Email = &v
}

// GetPassword returns the Password field value if set, zero value otherwise.
func (o *UsersModel) GetPassword() string {
	if o == nil || o.Password == nil {
		var ret string
		return ret
	}
	return *o.Password
}

// GetPasswordOk returns a tuple with the Password field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UsersModel) GetPasswordOk() (*string, bool) {
	if o == nil || o.Password == nil {
		return nil, false
	}
	return o.Password, true
}

// HasPassword returns a boolean if a field has been set.
func (o *UsersModel) HasPassword() bool {
	if o != nil && o.Password != nil {
		return true
	}

	return false
}

// SetPassword gets a reference to the given string and assigns it to the Password field.
func (o *UsersModel) SetPassword(v string) {
	o.Password = &v
}

// GetLangCode returns the LangCode field value if set, zero value otherwise.
func (o *UsersModel) GetLangCode() string {
	if o == nil || o.LangCode == nil {
		var ret string
		return ret
	}
	return *o.LangCode
}

// GetLangCodeOk returns a tuple with the LangCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UsersModel) GetLangCodeOk() (*string, bool) {
	if o == nil || o.LangCode == nil {
		return nil, false
	}
	return o.LangCode, true
}

// HasLangCode returns a boolean if a field has been set.
func (o *UsersModel) HasLangCode() bool {
	if o != nil && o.LangCode != nil {
		return true
	}

	return false
}

// SetLangCode gets a reference to the given string and assigns it to the LangCode field.
func (o *UsersModel) SetLangCode(v string) {
	o.LangCode = &v
}

// GetAddressId returns the AddressId field value if set, zero value otherwise.
func (o *UsersModel) GetAddressId() int64 {
	if o == nil || o.AddressId == nil {
		var ret int64
		return ret
	}
	return *o.AddressId
}

// GetAddressIdOk returns a tuple with the AddressId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UsersModel) GetAddressIdOk() (*int64, bool) {
	if o == nil || o.AddressId == nil {
		return nil, false
	}
	return o.AddressId, true
}

// HasAddressId returns a boolean if a field has been set.
func (o *UsersModel) HasAddressId() bool {
	if o != nil && o.AddressId != nil {
		return true
	}

	return false
}

// SetAddressId gets a reference to the given int64 and assigns it to the AddressId field.
func (o *UsersModel) SetAddressId(v int64) {
	o.AddressId = &v
}

// GetAddresses returns the Addresses field value if set, zero value otherwise.
func (o *UsersModel) GetAddresses() []AddressModel {
	if o == nil || o.Addresses == nil {
		var ret []AddressModel
		return ret
	}
	return *o.Addresses
}

// GetAddressesOk returns a tuple with the Addresses field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UsersModel) GetAddressesOk() (*[]AddressModel, bool) {
	if o == nil || o.Addresses == nil {
		return nil, false
	}
	return o.Addresses, true
}

// HasAddresses returns a boolean if a field has been set.
func (o *UsersModel) HasAddresses() bool {
	if o != nil && o.Addresses != nil {
		return true
	}

	return false
}

// SetAddresses gets a reference to the given []AddressModel and assigns it to the Addresses field.
func (o *UsersModel) SetAddresses(v []AddressModel) {
	o.Addresses = &v
}

// GetPauseId returns the PauseId field value if set, zero value otherwise.
func (o *UsersModel) GetPauseId() int64 {
	if o == nil || o.PauseId == nil {
		var ret int64
		return ret
	}
	return *o.PauseId
}

// GetPauseIdOk returns a tuple with the PauseId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UsersModel) GetPauseIdOk() (*int64, bool) {
	if o == nil || o.PauseId == nil {
		return nil, false
	}
	return o.PauseId, true
}

// HasPauseId returns a boolean if a field has been set.
func (o *UsersModel) HasPauseId() bool {
	if o != nil && o.PauseId != nil {
		return true
	}

	return false
}

// SetPauseId gets a reference to the given int64 and assigns it to the PauseId field.
func (o *UsersModel) SetPauseId(v int64) {
	o.PauseId = &v
}

// GetSpeedFactor returns the SpeedFactor field value if set, zero value otherwise.
func (o *UsersModel) GetSpeedFactor() float64 {
	if o == nil || o.SpeedFactor == nil {
		var ret float64
		return ret
	}
	return *o.SpeedFactor
}

// GetSpeedFactorOk returns a tuple with the SpeedFactor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UsersModel) GetSpeedFactorOk() (*float64, bool) {
	if o == nil || o.SpeedFactor == nil {
		return nil, false
	}
	return o.SpeedFactor, true
}

// HasSpeedFactor returns a boolean if a field has been set.
func (o *UsersModel) HasSpeedFactor() bool {
	if o != nil && o.SpeedFactor != nil {
		return true
	}

	return false
}

// SetSpeedFactor gets a reference to the given float64 and assigns it to the SpeedFactor field.
func (o *UsersModel) SetSpeedFactor(v float64) {
	o.SpeedFactor = &v
}

// GetDurationFactor returns the DurationFactor field value if set, zero value otherwise.
func (o *UsersModel) GetDurationFactor() float64 {
	if o == nil || o.DurationFactor == nil {
		var ret float64
		return ret
	}
	return *o.DurationFactor
}

// GetDurationFactorOk returns a tuple with the DurationFactor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UsersModel) GetDurationFactorOk() (*float64, bool) {
	if o == nil || o.DurationFactor == nil {
		return nil, false
	}
	return o.DurationFactor, true
}

// HasDurationFactor returns a boolean if a field has been set.
func (o *UsersModel) HasDurationFactor() bool {
	if o != nil && o.DurationFactor != nil {
		return true
	}

	return false
}

// SetDurationFactor gets a reference to the given float64 and assigns it to the DurationFactor field.
func (o *UsersModel) SetDurationFactor(v float64) {
	o.DurationFactor = &v
}

// GetActivated returns the Activated field value if set, zero value otherwise.
func (o *UsersModel) GetActivated() bool {
	if o == nil || o.Activated == nil {
		var ret bool
		return ret
	}
	return *o.Activated
}

// GetActivatedOk returns a tuple with the Activated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UsersModel) GetActivatedOk() (*bool, bool) {
	if o == nil || o.Activated == nil {
		return nil, false
	}
	return o.Activated, true
}

// HasActivated returns a boolean if a field has been set.
func (o *UsersModel) HasActivated() bool {
	if o != nil && o.Activated != nil {
		return true
	}

	return false
}

// SetActivated gets a reference to the given bool and assigns it to the Activated field.
func (o *UsersModel) SetActivated(v bool) {
	o.Activated = &v
}

// GetRemoved returns the Removed field value if set, zero value otherwise.
func (o *UsersModel) GetRemoved() bool {
	if o == nil || o.Removed == nil {
		var ret bool
		return ret
	}
	return *o.Removed
}

// GetRemovedOk returns a tuple with the Removed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UsersModel) GetRemovedOk() (*bool, bool) {
	if o == nil || o.Removed == nil {
		return nil, false
	}
	return o.Removed, true
}

// HasRemoved returns a boolean if a field has been set.
func (o *UsersModel) HasRemoved() bool {
	if o != nil && o.Removed != nil {
		return true
	}

	return false
}

// SetRemoved gets a reference to the given bool and assigns it to the Removed field.
func (o *UsersModel) SetRemoved(v bool) {
	o.Removed = &v
}

// GetActive returns the Active field value if set, zero value otherwise.
func (o *UsersModel) GetActive() bool {
	if o == nil || o.Active == nil {
		var ret bool
		return ret
	}
	return *o.Active
}

// GetActiveOk returns a tuple with the Active field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UsersModel) GetActiveOk() (*bool, bool) {
	if o == nil || o.Active == nil {
		return nil, false
	}
	return o.Active, true
}

// HasActive returns a boolean if a field has been set.
func (o *UsersModel) HasActive() bool {
	if o != nil && o.Active != nil {
		return true
	}

	return false
}

// SetActive gets a reference to the given bool and assigns it to the Active field.
func (o *UsersModel) SetActive(v bool) {
	o.Active = &v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *UsersModel) GetTags() []TagModel {
	if o == nil || o.Tags == nil {
		var ret []TagModel
		return ret
	}
	return *o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UsersModel) GetTagsOk() (*[]TagModel, bool) {
	if o == nil || o.Tags == nil {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *UsersModel) HasTags() bool {
	if o != nil && o.Tags != nil {
		return true
	}

	return false
}

// SetTags gets a reference to the given []TagModel and assigns it to the Tags field.
func (o *UsersModel) SetTags(v []TagModel) {
	o.Tags = &v
}

// GetTagNames returns the TagNames field value if set, zero value otherwise.
func (o *UsersModel) GetTagNames() []string {
	if o == nil || o.TagNames == nil {
		var ret []string
		return ret
	}
	return *o.TagNames
}

// GetTagNamesOk returns a tuple with the TagNames field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UsersModel) GetTagNamesOk() (*[]string, bool) {
	if o == nil || o.TagNames == nil {
		return nil, false
	}
	return o.TagNames, true
}

// HasTagNames returns a boolean if a field has been set.
func (o *UsersModel) HasTagNames() bool {
	if o != nil && o.TagNames != nil {
		return true
	}

	return false
}

// SetTagNames gets a reference to the given []string and assigns it to the TagNames field.
func (o *UsersModel) SetTagNames(v []string) {
	o.TagNames = &v
}

// GetDriver returns the Driver field value if set, zero value otherwise.
func (o *UsersModel) GetDriver() bool {
	if o == nil || o.Driver == nil {
		var ret bool
		return ret
	}
	return *o.Driver
}

// GetDriverOk returns a tuple with the Driver field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UsersModel) GetDriverOk() (*bool, bool) {
	if o == nil || o.Driver == nil {
		return nil, false
	}
	return o.Driver, true
}

// HasDriver returns a boolean if a field has been set.
func (o *UsersModel) HasDriver() bool {
	if o != nil && o.Driver != nil {
		return true
	}

	return false
}

// SetDriver gets a reference to the given bool and assigns it to the Driver field.
func (o *UsersModel) SetDriver(v bool) {
	o.Driver = &v
}

// GetZones returns the Zones field value if set, zero value otherwise.
func (o *UsersModel) GetZones() []ZoneModel {
	if o == nil || o.Zones == nil {
		var ret []ZoneModel
		return ret
	}
	return *o.Zones
}

// GetZonesOk returns a tuple with the Zones field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UsersModel) GetZonesOk() (*[]ZoneModel, bool) {
	if o == nil || o.Zones == nil {
		return nil, false
	}
	return o.Zones, true
}

// HasZones returns a boolean if a field has been set.
func (o *UsersModel) HasZones() bool {
	if o != nil && o.Zones != nil {
		return true
	}

	return false
}

// SetZones gets a reference to the given []ZoneModel and assigns it to the Zones field.
func (o *UsersModel) SetZones(v []ZoneModel) {
	o.Zones = &v
}

// GetZoneNames returns the ZoneNames field value if set, zero value otherwise.
func (o *UsersModel) GetZoneNames() []string {
	if o == nil || o.ZoneNames == nil {
		var ret []string
		return ret
	}
	return *o.ZoneNames
}

// GetZoneNamesOk returns a tuple with the ZoneNames field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UsersModel) GetZoneNamesOk() (*[]string, bool) {
	if o == nil || o.ZoneNames == nil {
		return nil, false
	}
	return o.ZoneNames, true
}

// HasZoneNames returns a boolean if a field has been set.
func (o *UsersModel) HasZoneNames() bool {
	if o != nil && o.ZoneNames != nil {
		return true
	}

	return false
}

// SetZoneNames gets a reference to the given []string and assigns it to the ZoneNames field.
func (o *UsersModel) SetZoneNames(v []string) {
	o.ZoneNames = &v
}

// GetLinks returns the Links field value if set, zero value otherwise.
func (o *UsersModel) GetLinks() []LinkModel {
	if o == nil || o.Links == nil {
		var ret []LinkModel
		return ret
	}
	return *o.Links
}

// GetLinksOk returns a tuple with the Links field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UsersModel) GetLinksOk() (*[]LinkModel, bool) {
	if o == nil || o.Links == nil {
		return nil, false
	}
	return o.Links, true
}

// HasLinks returns a boolean if a field has been set.
func (o *UsersModel) HasLinks() bool {
	if o != nil && o.Links != nil {
		return true
	}

	return false
}

// SetLinks gets a reference to the given []LinkModel and assigns it to the Links field.
func (o *UsersModel) SetLinks(v []LinkModel) {
	o.Links = &v
}

// GetMetaData returns the MetaData field value if set, zero value otherwise.
func (o *UsersModel) GetMetaData() []MetaDataModel {
	if o == nil || o.MetaData == nil {
		var ret []MetaDataModel
		return ret
	}
	return *o.MetaData
}

// GetMetaDataOk returns a tuple with the MetaData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UsersModel) GetMetaDataOk() (*[]MetaDataModel, bool) {
	if o == nil || o.MetaData == nil {
		return nil, false
	}
	return o.MetaData, true
}

// HasMetaData returns a boolean if a field has been set.
func (o *UsersModel) HasMetaData() bool {
	if o != nil && o.MetaData != nil {
		return true
	}

	return false
}

// SetMetaData gets a reference to the given []MetaDataModel and assigns it to the MetaData field.
func (o *UsersModel) SetMetaData(v []MetaDataModel) {
	o.MetaData = &v
}

// GetDriverUnavailabilities returns the DriverUnavailabilities field value if set, zero value otherwise.
func (o *UsersModel) GetDriverUnavailabilities() []DriverUnavailabilityModel {
	if o == nil || o.DriverUnavailabilities == nil {
		var ret []DriverUnavailabilityModel
		return ret
	}
	return *o.DriverUnavailabilities
}

// GetDriverUnavailabilitiesOk returns a tuple with the DriverUnavailabilities field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UsersModel) GetDriverUnavailabilitiesOk() (*[]DriverUnavailabilityModel, bool) {
	if o == nil || o.DriverUnavailabilities == nil {
		return nil, false
	}
	return o.DriverUnavailabilities, true
}

// HasDriverUnavailabilities returns a boolean if a field has been set.
func (o *UsersModel) HasDriverUnavailabilities() bool {
	if o != nil && o.DriverUnavailabilities != nil {
		return true
	}

	return false
}

// SetDriverUnavailabilities gets a reference to the given []DriverUnavailabilityModel and assigns it to the DriverUnavailabilities field.
func (o *UsersModel) SetDriverUnavailabilities(v []DriverUnavailabilityModel) {
	o.DriverUnavailabilities = &v
}

func (o UsersModel) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Uuid != nil {
		toSerialize["uuid"] = o.Uuid
	}
	if o.RoleId != nil {
		toSerialize["role_id"] = o.RoleId
	}
	if o.RoleName != nil {
		toSerialize["role_name"] = o.RoleName
	}
	if o.PartyId != nil {
		toSerialize["party_id"] = o.PartyId
	}
	if o.PartyName != nil {
		toSerialize["party_name"] = o.PartyName
	}
	if o.FirstName != nil {
		toSerialize["first_name"] = o.FirstName
	}
	if o.NamePrefix != nil {
		toSerialize["name_prefix"] = o.NamePrefix
	}
	if o.LastName != nil {
		toSerialize["last_name"] = o.LastName
	}
	if o.FullName != nil {
		toSerialize["full_name"] = o.FullName
	}
	if o.Initials != nil {
		toSerialize["initials"] = o.Initials
	}
	if o.Email != nil {
		toSerialize["email"] = o.Email
	}
	if o.Password != nil {
		toSerialize["password"] = o.Password
	}
	if o.LangCode != nil {
		toSerialize["lang_code"] = o.LangCode
	}
	if o.AddressId != nil {
		toSerialize["address_id"] = o.AddressId
	}
	if o.Addresses != nil {
		toSerialize["addresses"] = o.Addresses
	}
	if o.PauseId != nil {
		toSerialize["pause_id"] = o.PauseId
	}
	if o.SpeedFactor != nil {
		toSerialize["speed_factor"] = o.SpeedFactor
	}
	if o.DurationFactor != nil {
		toSerialize["duration_factor"] = o.DurationFactor
	}
	if o.Activated != nil {
		toSerialize["activated"] = o.Activated
	}
	if o.Removed != nil {
		toSerialize["removed"] = o.Removed
	}
	if o.Active != nil {
		toSerialize["active"] = o.Active
	}
	if o.Tags != nil {
		toSerialize["tags"] = o.Tags
	}
	if o.TagNames != nil {
		toSerialize["tag_names"] = o.TagNames
	}
	if o.Driver != nil {
		toSerialize["driver"] = o.Driver
	}
	if o.Zones != nil {
		toSerialize["zones"] = o.Zones
	}
	if o.ZoneNames != nil {
		toSerialize["zone_names"] = o.ZoneNames
	}
	if o.Links != nil {
		toSerialize["links"] = o.Links
	}
	if o.MetaData != nil {
		toSerialize["meta_data"] = o.MetaData
	}
	if o.DriverUnavailabilities != nil {
		toSerialize["driver_unavailabilities"] = o.DriverUnavailabilities
	}
	return json.Marshal(toSerialize)
}

type NullableUsersModel struct {
	value *UsersModel
	isSet bool
}

func (v NullableUsersModel) Get() *UsersModel {
	return v.value
}

func (v *NullableUsersModel) Set(val *UsersModel) {
	v.value = val
	v.isSet = true
}

func (v NullableUsersModel) IsSet() bool {
	return v.isSet
}

func (v *NullableUsersModel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUsersModel(val *UsersModel) *NullableUsersModel {
	return &NullableUsersModel{value: val, isSet: true}
}

func (v NullableUsersModel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUsersModel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


