/*
 * Bumbal Client Api
 *
 * Bumbal API documentation
 *
 * API version: 2.0
 * Contact: info@bumbal.eu
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// EquipmentFiltersModel struct for EquipmentFiltersModel
type EquipmentFiltersModel struct {
	// Equipment ID
	Id *int32 `json:"id,omitempty"`
	// Equipment Type ID's
	EquipmentTypeId *[]int32 `json:"equipment_type_id,omitempty"`
}

// NewEquipmentFiltersModel instantiates a new EquipmentFiltersModel object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEquipmentFiltersModel() *EquipmentFiltersModel {
	this := EquipmentFiltersModel{}
	return &this
}

// NewEquipmentFiltersModelWithDefaults instantiates a new EquipmentFiltersModel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEquipmentFiltersModelWithDefaults() *EquipmentFiltersModel {
	this := EquipmentFiltersModel{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *EquipmentFiltersModel) GetId() int32 {
	if o == nil || o.Id == nil {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EquipmentFiltersModel) GetIdOk() (*int32, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *EquipmentFiltersModel) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *EquipmentFiltersModel) SetId(v int32) {
	o.Id = &v
}

// GetEquipmentTypeId returns the EquipmentTypeId field value if set, zero value otherwise.
func (o *EquipmentFiltersModel) GetEquipmentTypeId() []int32 {
	if o == nil || o.EquipmentTypeId == nil {
		var ret []int32
		return ret
	}
	return *o.EquipmentTypeId
}

// GetEquipmentTypeIdOk returns a tuple with the EquipmentTypeId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EquipmentFiltersModel) GetEquipmentTypeIdOk() (*[]int32, bool) {
	if o == nil || o.EquipmentTypeId == nil {
		return nil, false
	}
	return o.EquipmentTypeId, true
}

// HasEquipmentTypeId returns a boolean if a field has been set.
func (o *EquipmentFiltersModel) HasEquipmentTypeId() bool {
	if o != nil && o.EquipmentTypeId != nil {
		return true
	}

	return false
}

// SetEquipmentTypeId gets a reference to the given []int32 and assigns it to the EquipmentTypeId field.
func (o *EquipmentFiltersModel) SetEquipmentTypeId(v []int32) {
	o.EquipmentTypeId = &v
}

func (o EquipmentFiltersModel) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.EquipmentTypeId != nil {
		toSerialize["equipment_type_id"] = o.EquipmentTypeId
	}
	return json.Marshal(toSerialize)
}

type NullableEquipmentFiltersModel struct {
	value *EquipmentFiltersModel
	isSet bool
}

func (v NullableEquipmentFiltersModel) Get() *EquipmentFiltersModel {
	return v.value
}

func (v *NullableEquipmentFiltersModel) Set(val *EquipmentFiltersModel) {
	v.value = val
	v.isSet = true
}

func (v NullableEquipmentFiltersModel) IsSet() bool {
	return v.isSet
}

func (v *NullableEquipmentFiltersModel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEquipmentFiltersModel(val *EquipmentFiltersModel) *NullableEquipmentFiltersModel {
	return &NullableEquipmentFiltersModel{value: val, isSet: true}
}

func (v NullableEquipmentFiltersModel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEquipmentFiltersModel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


