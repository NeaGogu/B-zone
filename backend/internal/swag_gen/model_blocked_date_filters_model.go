/*
 * Bumbal Client Api
 *
 * Bumbal API documentation
 *
 * API version: 2.0
 * Contact: info@bumbal.eu
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// BlockedDateFiltersModel struct for BlockedDateFiltersModel
type BlockedDateFiltersModel struct {
	// Unique Identifier
	Id *[]int32 `json:"id,omitempty"`
	// DateTime From
	DateTimeFrom *time.Time `json:"date_time_from,omitempty"`
	// DateTime To
	DateTimeTo *time.Time `json:"date_time_to,omitempty"`
}

// NewBlockedDateFiltersModel instantiates a new BlockedDateFiltersModel object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBlockedDateFiltersModel() *BlockedDateFiltersModel {
	this := BlockedDateFiltersModel{}
	return &this
}

// NewBlockedDateFiltersModelWithDefaults instantiates a new BlockedDateFiltersModel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBlockedDateFiltersModelWithDefaults() *BlockedDateFiltersModel {
	this := BlockedDateFiltersModel{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *BlockedDateFiltersModel) GetId() []int32 {
	if o == nil || o.Id == nil {
		var ret []int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockedDateFiltersModel) GetIdOk() (*[]int32, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *BlockedDateFiltersModel) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given []int32 and assigns it to the Id field.
func (o *BlockedDateFiltersModel) SetId(v []int32) {
	o.Id = &v
}

// GetDateTimeFrom returns the DateTimeFrom field value if set, zero value otherwise.
func (o *BlockedDateFiltersModel) GetDateTimeFrom() time.Time {
	if o == nil || o.DateTimeFrom == nil {
		var ret time.Time
		return ret
	}
	return *o.DateTimeFrom
}

// GetDateTimeFromOk returns a tuple with the DateTimeFrom field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockedDateFiltersModel) GetDateTimeFromOk() (*time.Time, bool) {
	if o == nil || o.DateTimeFrom == nil {
		return nil, false
	}
	return o.DateTimeFrom, true
}

// HasDateTimeFrom returns a boolean if a field has been set.
func (o *BlockedDateFiltersModel) HasDateTimeFrom() bool {
	if o != nil && o.DateTimeFrom != nil {
		return true
	}

	return false
}

// SetDateTimeFrom gets a reference to the given time.Time and assigns it to the DateTimeFrom field.
func (o *BlockedDateFiltersModel) SetDateTimeFrom(v time.Time) {
	o.DateTimeFrom = &v
}

// GetDateTimeTo returns the DateTimeTo field value if set, zero value otherwise.
func (o *BlockedDateFiltersModel) GetDateTimeTo() time.Time {
	if o == nil || o.DateTimeTo == nil {
		var ret time.Time
		return ret
	}
	return *o.DateTimeTo
}

// GetDateTimeToOk returns a tuple with the DateTimeTo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockedDateFiltersModel) GetDateTimeToOk() (*time.Time, bool) {
	if o == nil || o.DateTimeTo == nil {
		return nil, false
	}
	return o.DateTimeTo, true
}

// HasDateTimeTo returns a boolean if a field has been set.
func (o *BlockedDateFiltersModel) HasDateTimeTo() bool {
	if o != nil && o.DateTimeTo != nil {
		return true
	}

	return false
}

// SetDateTimeTo gets a reference to the given time.Time and assigns it to the DateTimeTo field.
func (o *BlockedDateFiltersModel) SetDateTimeTo(v time.Time) {
	o.DateTimeTo = &v
}

func (o BlockedDateFiltersModel) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.DateTimeFrom != nil {
		toSerialize["date_time_from"] = o.DateTimeFrom
	}
	if o.DateTimeTo != nil {
		toSerialize["date_time_to"] = o.DateTimeTo
	}
	return json.Marshal(toSerialize)
}

type NullableBlockedDateFiltersModel struct {
	value *BlockedDateFiltersModel
	isSet bool
}

func (v NullableBlockedDateFiltersModel) Get() *BlockedDateFiltersModel {
	return v.value
}

func (v *NullableBlockedDateFiltersModel) Set(val *BlockedDateFiltersModel) {
	v.value = val
	v.isSet = true
}

func (v NullableBlockedDateFiltersModel) IsSet() bool {
	return v.isSet
}

func (v *NullableBlockedDateFiltersModel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBlockedDateFiltersModel(val *BlockedDateFiltersModel) *NullableBlockedDateFiltersModel {
	return &NullableBlockedDateFiltersModel{value: val, isSet: true}
}

func (v NullableBlockedDateFiltersModel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBlockedDateFiltersModel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


