/*
 * Bumbal Client Api
 *
 * Bumbal API documentation
 *
 * API version: 2.0
 * Contact: info@bumbal.eu
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// UserNotificationModel struct for UserNotificationModel
type UserNotificationModel struct {
	// Unique Identifier
	Id *int64 `json:"id,omitempty"`
	// User Identifier
	UserId *int64 `json:"user_id,omitempty"`
	// Notification Identifier
	NotificationId *int64 `json:"notification_id,omitempty"`
	// Unread status
	Unread *int64 `json:"unread,omitempty"`
	// Pinned status
	Pinned *int64 `json:"pinned,omitempty"`
	// Archived status
	Archived *int64 `json:"archived,omitempty"`
	// Archive date
	ArchiveDate *time.Time `json:"archive_date,omitempty"`
	// Creation date
	NotificationCreatedAt *time.Time `json:"notification_created_at,omitempty"`
	// Object Identifier
	ObjectId *int64 `json:"object_id,omitempty"`
	// Object type ID
	ObjectType *int64 `json:"object_type,omitempty"`
	// Modification date
	NotificationUpdatedAt *time.Time `json:"notification_updated_at,omitempty"`
	// Object type name
	ObjectTypeName *string `json:"object_type_name,omitempty"`
}

// NewUserNotificationModel instantiates a new UserNotificationModel object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserNotificationModel() *UserNotificationModel {
	this := UserNotificationModel{}
	return &this
}

// NewUserNotificationModelWithDefaults instantiates a new UserNotificationModel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserNotificationModelWithDefaults() *UserNotificationModel {
	this := UserNotificationModel{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *UserNotificationModel) GetId() int64 {
	if o == nil || o.Id == nil {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserNotificationModel) GetIdOk() (*int64, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *UserNotificationModel) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *UserNotificationModel) SetId(v int64) {
	o.Id = &v
}

// GetUserId returns the UserId field value if set, zero value otherwise.
func (o *UserNotificationModel) GetUserId() int64 {
	if o == nil || o.UserId == nil {
		var ret int64
		return ret
	}
	return *o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserNotificationModel) GetUserIdOk() (*int64, bool) {
	if o == nil || o.UserId == nil {
		return nil, false
	}
	return o.UserId, true
}

// HasUserId returns a boolean if a field has been set.
func (o *UserNotificationModel) HasUserId() bool {
	if o != nil && o.UserId != nil {
		return true
	}

	return false
}

// SetUserId gets a reference to the given int64 and assigns it to the UserId field.
func (o *UserNotificationModel) SetUserId(v int64) {
	o.UserId = &v
}

// GetNotificationId returns the NotificationId field value if set, zero value otherwise.
func (o *UserNotificationModel) GetNotificationId() int64 {
	if o == nil || o.NotificationId == nil {
		var ret int64
		return ret
	}
	return *o.NotificationId
}

// GetNotificationIdOk returns a tuple with the NotificationId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserNotificationModel) GetNotificationIdOk() (*int64, bool) {
	if o == nil || o.NotificationId == nil {
		return nil, false
	}
	return o.NotificationId, true
}

// HasNotificationId returns a boolean if a field has been set.
func (o *UserNotificationModel) HasNotificationId() bool {
	if o != nil && o.NotificationId != nil {
		return true
	}

	return false
}

// SetNotificationId gets a reference to the given int64 and assigns it to the NotificationId field.
func (o *UserNotificationModel) SetNotificationId(v int64) {
	o.NotificationId = &v
}

// GetUnread returns the Unread field value if set, zero value otherwise.
func (o *UserNotificationModel) GetUnread() int64 {
	if o == nil || o.Unread == nil {
		var ret int64
		return ret
	}
	return *o.Unread
}

// GetUnreadOk returns a tuple with the Unread field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserNotificationModel) GetUnreadOk() (*int64, bool) {
	if o == nil || o.Unread == nil {
		return nil, false
	}
	return o.Unread, true
}

// HasUnread returns a boolean if a field has been set.
func (o *UserNotificationModel) HasUnread() bool {
	if o != nil && o.Unread != nil {
		return true
	}

	return false
}

// SetUnread gets a reference to the given int64 and assigns it to the Unread field.
func (o *UserNotificationModel) SetUnread(v int64) {
	o.Unread = &v
}

// GetPinned returns the Pinned field value if set, zero value otherwise.
func (o *UserNotificationModel) GetPinned() int64 {
	if o == nil || o.Pinned == nil {
		var ret int64
		return ret
	}
	return *o.Pinned
}

// GetPinnedOk returns a tuple with the Pinned field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserNotificationModel) GetPinnedOk() (*int64, bool) {
	if o == nil || o.Pinned == nil {
		return nil, false
	}
	return o.Pinned, true
}

// HasPinned returns a boolean if a field has been set.
func (o *UserNotificationModel) HasPinned() bool {
	if o != nil && o.Pinned != nil {
		return true
	}

	return false
}

// SetPinned gets a reference to the given int64 and assigns it to the Pinned field.
func (o *UserNotificationModel) SetPinned(v int64) {
	o.Pinned = &v
}

// GetArchived returns the Archived field value if set, zero value otherwise.
func (o *UserNotificationModel) GetArchived() int64 {
	if o == nil || o.Archived == nil {
		var ret int64
		return ret
	}
	return *o.Archived
}

// GetArchivedOk returns a tuple with the Archived field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserNotificationModel) GetArchivedOk() (*int64, bool) {
	if o == nil || o.Archived == nil {
		return nil, false
	}
	return o.Archived, true
}

// HasArchived returns a boolean if a field has been set.
func (o *UserNotificationModel) HasArchived() bool {
	if o != nil && o.Archived != nil {
		return true
	}

	return false
}

// SetArchived gets a reference to the given int64 and assigns it to the Archived field.
func (o *UserNotificationModel) SetArchived(v int64) {
	o.Archived = &v
}

// GetArchiveDate returns the ArchiveDate field value if set, zero value otherwise.
func (o *UserNotificationModel) GetArchiveDate() time.Time {
	if o == nil || o.ArchiveDate == nil {
		var ret time.Time
		return ret
	}
	return *o.ArchiveDate
}

// GetArchiveDateOk returns a tuple with the ArchiveDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserNotificationModel) GetArchiveDateOk() (*time.Time, bool) {
	if o == nil || o.ArchiveDate == nil {
		return nil, false
	}
	return o.ArchiveDate, true
}

// HasArchiveDate returns a boolean if a field has been set.
func (o *UserNotificationModel) HasArchiveDate() bool {
	if o != nil && o.ArchiveDate != nil {
		return true
	}

	return false
}

// SetArchiveDate gets a reference to the given time.Time and assigns it to the ArchiveDate field.
func (o *UserNotificationModel) SetArchiveDate(v time.Time) {
	o.ArchiveDate = &v
}

// GetNotificationCreatedAt returns the NotificationCreatedAt field value if set, zero value otherwise.
func (o *UserNotificationModel) GetNotificationCreatedAt() time.Time {
	if o == nil || o.NotificationCreatedAt == nil {
		var ret time.Time
		return ret
	}
	return *o.NotificationCreatedAt
}

// GetNotificationCreatedAtOk returns a tuple with the NotificationCreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserNotificationModel) GetNotificationCreatedAtOk() (*time.Time, bool) {
	if o == nil || o.NotificationCreatedAt == nil {
		return nil, false
	}
	return o.NotificationCreatedAt, true
}

// HasNotificationCreatedAt returns a boolean if a field has been set.
func (o *UserNotificationModel) HasNotificationCreatedAt() bool {
	if o != nil && o.NotificationCreatedAt != nil {
		return true
	}

	return false
}

// SetNotificationCreatedAt gets a reference to the given time.Time and assigns it to the NotificationCreatedAt field.
func (o *UserNotificationModel) SetNotificationCreatedAt(v time.Time) {
	o.NotificationCreatedAt = &v
}

// GetObjectId returns the ObjectId field value if set, zero value otherwise.
func (o *UserNotificationModel) GetObjectId() int64 {
	if o == nil || o.ObjectId == nil {
		var ret int64
		return ret
	}
	return *o.ObjectId
}

// GetObjectIdOk returns a tuple with the ObjectId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserNotificationModel) GetObjectIdOk() (*int64, bool) {
	if o == nil || o.ObjectId == nil {
		return nil, false
	}
	return o.ObjectId, true
}

// HasObjectId returns a boolean if a field has been set.
func (o *UserNotificationModel) HasObjectId() bool {
	if o != nil && o.ObjectId != nil {
		return true
	}

	return false
}

// SetObjectId gets a reference to the given int64 and assigns it to the ObjectId field.
func (o *UserNotificationModel) SetObjectId(v int64) {
	o.ObjectId = &v
}

// GetObjectType returns the ObjectType field value if set, zero value otherwise.
func (o *UserNotificationModel) GetObjectType() int64 {
	if o == nil || o.ObjectType == nil {
		var ret int64
		return ret
	}
	return *o.ObjectType
}

// GetObjectTypeOk returns a tuple with the ObjectType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserNotificationModel) GetObjectTypeOk() (*int64, bool) {
	if o == nil || o.ObjectType == nil {
		return nil, false
	}
	return o.ObjectType, true
}

// HasObjectType returns a boolean if a field has been set.
func (o *UserNotificationModel) HasObjectType() bool {
	if o != nil && o.ObjectType != nil {
		return true
	}

	return false
}

// SetObjectType gets a reference to the given int64 and assigns it to the ObjectType field.
func (o *UserNotificationModel) SetObjectType(v int64) {
	o.ObjectType = &v
}

// GetNotificationUpdatedAt returns the NotificationUpdatedAt field value if set, zero value otherwise.
func (o *UserNotificationModel) GetNotificationUpdatedAt() time.Time {
	if o == nil || o.NotificationUpdatedAt == nil {
		var ret time.Time
		return ret
	}
	return *o.NotificationUpdatedAt
}

// GetNotificationUpdatedAtOk returns a tuple with the NotificationUpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserNotificationModel) GetNotificationUpdatedAtOk() (*time.Time, bool) {
	if o == nil || o.NotificationUpdatedAt == nil {
		return nil, false
	}
	return o.NotificationUpdatedAt, true
}

// HasNotificationUpdatedAt returns a boolean if a field has been set.
func (o *UserNotificationModel) HasNotificationUpdatedAt() bool {
	if o != nil && o.NotificationUpdatedAt != nil {
		return true
	}

	return false
}

// SetNotificationUpdatedAt gets a reference to the given time.Time and assigns it to the NotificationUpdatedAt field.
func (o *UserNotificationModel) SetNotificationUpdatedAt(v time.Time) {
	o.NotificationUpdatedAt = &v
}

// GetObjectTypeName returns the ObjectTypeName field value if set, zero value otherwise.
func (o *UserNotificationModel) GetObjectTypeName() string {
	if o == nil || o.ObjectTypeName == nil {
		var ret string
		return ret
	}
	return *o.ObjectTypeName
}

// GetObjectTypeNameOk returns a tuple with the ObjectTypeName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserNotificationModel) GetObjectTypeNameOk() (*string, bool) {
	if o == nil || o.ObjectTypeName == nil {
		return nil, false
	}
	return o.ObjectTypeName, true
}

// HasObjectTypeName returns a boolean if a field has been set.
func (o *UserNotificationModel) HasObjectTypeName() bool {
	if o != nil && o.ObjectTypeName != nil {
		return true
	}

	return false
}

// SetObjectTypeName gets a reference to the given string and assigns it to the ObjectTypeName field.
func (o *UserNotificationModel) SetObjectTypeName(v string) {
	o.ObjectTypeName = &v
}

func (o UserNotificationModel) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.UserId != nil {
		toSerialize["user_id"] = o.UserId
	}
	if o.NotificationId != nil {
		toSerialize["notification_id"] = o.NotificationId
	}
	if o.Unread != nil {
		toSerialize["unread"] = o.Unread
	}
	if o.Pinned != nil {
		toSerialize["pinned"] = o.Pinned
	}
	if o.Archived != nil {
		toSerialize["archived"] = o.Archived
	}
	if o.ArchiveDate != nil {
		toSerialize["archive_date"] = o.ArchiveDate
	}
	if o.NotificationCreatedAt != nil {
		toSerialize["notification_created_at"] = o.NotificationCreatedAt
	}
	if o.ObjectId != nil {
		toSerialize["object_id"] = o.ObjectId
	}
	if o.ObjectType != nil {
		toSerialize["object_type"] = o.ObjectType
	}
	if o.NotificationUpdatedAt != nil {
		toSerialize["notification_updated_at"] = o.NotificationUpdatedAt
	}
	if o.ObjectTypeName != nil {
		toSerialize["object_type_name"] = o.ObjectTypeName
	}
	return json.Marshal(toSerialize)
}

type NullableUserNotificationModel struct {
	value *UserNotificationModel
	isSet bool
}

func (v NullableUserNotificationModel) Get() *UserNotificationModel {
	return v.value
}

func (v *NullableUserNotificationModel) Set(val *UserNotificationModel) {
	v.value = val
	v.isSet = true
}

func (v NullableUserNotificationModel) IsSet() bool {
	return v.isSet
}

func (v *NullableUserNotificationModel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserNotificationModel(val *UserNotificationModel) *NullableUserNotificationModel {
	return &NullableUserNotificationModel{value: val, isSet: true}
}

func (v NullableUserNotificationModel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserNotificationModel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


