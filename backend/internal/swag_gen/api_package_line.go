/*
 * Bumbal Client Api
 *
 * Bumbal API documentation
 *
 * API version: 2.0
 * Contact: info@bumbal.eu
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
)

// Linger please
var (
	_ _context.Context
)

// PackageLineApiService PackageLineApi service
type PackageLineApiService service

type ApiCreatePackageLineRequest struct {
	ctx _context.Context
	ApiService *PackageLineApiService
	body *PackageLineModel
}

func (r ApiCreatePackageLineRequest) Body(body PackageLineModel) ApiCreatePackageLineRequest {
	r.body = &body
	return r
}

func (r ApiCreatePackageLineRequest) Execute() (ApiResponse, *_nethttp.Response, GenericOpenAPIError) {
	return r.ApiService.CreatePackageLineExecute(r)
}

/*
 * CreatePackageLine Create or update an Package Line
 * Create or update an PackageLine. If id or links are set in the data, and a corresponding package-line
  *     is found in Bumbal, an update will be performed.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiCreatePackageLineRequest
 */
func (a *PackageLineApiService) CreatePackageLine(ctx _context.Context) ApiCreatePackageLineRequest {
	return ApiCreatePackageLineRequest{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 * @return ApiResponse
 */
func (a *PackageLineApiService) CreatePackageLineExecute(r ApiCreatePackageLineRequest) (ApiResponse, *_nethttp.Response, GenericOpenAPIError) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		executionError       GenericOpenAPIError
		localVarReturnValue  ApiResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PackageLineApiService.CreatePackageLine")
	if err != nil {
		executionError.error = err.Error()
		return localVarReturnValue, nil, executionError
	}

	localVarPath := localBasePath + "/package-line"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/xml"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["api_key"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["ApiKey"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["jwt"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		executionError.error = err.Error()
		return localVarReturnValue, nil, executionError
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		executionError.error = err.Error()
		return localVarReturnValue, localVarHTTPResponse, executionError
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		executionError.error = err.Error()
		return localVarReturnValue, localVarHTTPResponse, executionError
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, executionError
}

type ApiDeletePackageLineRequest struct {
	ctx _context.Context
	ApiService *PackageLineApiService
	packageLineId int64
}


func (r ApiDeletePackageLineRequest) Execute() (ApiResponse, *_nethttp.Response, GenericOpenAPIError) {
	return r.ApiService.DeletePackageLineExecute(r)
}

/*
 * DeletePackageLine Delete an package-line
 * Delete an package-line
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param packageLineId ID of the package-line to delete
 * @return ApiDeletePackageLineRequest
 */
func (a *PackageLineApiService) DeletePackageLine(ctx _context.Context, packageLineId int64) ApiDeletePackageLineRequest {
	return ApiDeletePackageLineRequest{
		ApiService: a,
		ctx: ctx,
		packageLineId: packageLineId,
	}
}

/*
 * Execute executes the request
 * @return ApiResponse
 */
func (a *PackageLineApiService) DeletePackageLineExecute(r ApiDeletePackageLineRequest) (ApiResponse, *_nethttp.Response, GenericOpenAPIError) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		executionError       GenericOpenAPIError
		localVarReturnValue  ApiResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PackageLineApiService.DeletePackageLine")
	if err != nil {
		executionError.error = err.Error()
		return localVarReturnValue, nil, executionError
	}

	localVarPath := localBasePath + "/package-line/{packageLineId}"
	localVarPath = strings.Replace(localVarPath, "{"+"packageLineId"+"}", _neturl.PathEscape(parameterToString(r.packageLineId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["api_key"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["ApiKey"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["jwt"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		executionError.error = err.Error()
		return localVarReturnValue, nil, executionError
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		executionError.error = err.Error()
		return localVarReturnValue, localVarHTTPResponse, executionError
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		executionError.error = err.Error()
		return localVarReturnValue, localVarHTTPResponse, executionError
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, executionError
}

type ApiRetrieveListPackageLineRequest struct {
	ctx _context.Context
	ApiService *PackageLineApiService
	arguments *PackageLineRetrieveListArguments
}

func (r ApiRetrieveListPackageLineRequest) Arguments(arguments PackageLineRetrieveListArguments) ApiRetrieveListPackageLineRequest {
	r.arguments = &arguments
	return r
}

func (r ApiRetrieveListPackageLineRequest) Execute() (PackageLineListResponse, *_nethttp.Response, GenericOpenAPIError) {
	return r.ApiService.RetrieveListPackageLineExecute(r)
}

/*
 * RetrieveListPackageLine Retrieve List of PackageLines
 * Retrieve List of PackageLines
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiRetrieveListPackageLineRequest
 */
func (a *PackageLineApiService) RetrieveListPackageLine(ctx _context.Context) ApiRetrieveListPackageLineRequest {
	return ApiRetrieveListPackageLineRequest{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 * @return PackageLineListResponse
 */
func (a *PackageLineApiService) RetrieveListPackageLineExecute(r ApiRetrieveListPackageLineRequest) (PackageLineListResponse, *_nethttp.Response, GenericOpenAPIError) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPut
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		executionError       GenericOpenAPIError
		localVarReturnValue  PackageLineListResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PackageLineApiService.RetrieveListPackageLine")
	if err != nil {
		executionError.error = err.Error()
		return localVarReturnValue, nil, executionError
	}

	localVarPath := localBasePath + "/package-line"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.arguments == nil {
		executionError.error = "arguments is required and must be specified"
		return localVarReturnValue, nil, executionError
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/xml"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.arguments
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["api_key"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["ApiKey"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["jwt"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		executionError.error = err.Error()
		return localVarReturnValue, nil, executionError
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		executionError.error = err.Error()
		return localVarReturnValue, localVarHTTPResponse, executionError
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		executionError.error = err.Error()
		return localVarReturnValue, localVarHTTPResponse, executionError
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, executionError
}

type ApiRetrievePackageLineRequest struct {
	ctx _context.Context
	ApiService *PackageLineApiService
	packageLineId int64
	includePackageLineStatus *bool
	includePackageLineTypeName *bool
	includePackageLineMetaData *bool
	includeAddressObject *bool
	includeTimeSlots *bool
	includeTimeSlotTags *bool
	includeRouteInfo *bool
	includeDriverInfo *bool
	includeCommunication *bool
	includePackageLineLinks *bool
	includePackageLinesInfo *bool
	includePackageLineFiles *bool
	includePackageLineFilesMetaData *bool
}

func (r ApiRetrievePackageLineRequest) IncludePackageLineStatus(includePackageLineStatus bool) ApiRetrievePackageLineRequest {
	r.includePackageLineStatus = &includePackageLineStatus
	return r
}
func (r ApiRetrievePackageLineRequest) IncludePackageLineTypeName(includePackageLineTypeName bool) ApiRetrievePackageLineRequest {
	r.includePackageLineTypeName = &includePackageLineTypeName
	return r
}
func (r ApiRetrievePackageLineRequest) IncludePackageLineMetaData(includePackageLineMetaData bool) ApiRetrievePackageLineRequest {
	r.includePackageLineMetaData = &includePackageLineMetaData
	return r
}
func (r ApiRetrievePackageLineRequest) IncludeAddressObject(includeAddressObject bool) ApiRetrievePackageLineRequest {
	r.includeAddressObject = &includeAddressObject
	return r
}
func (r ApiRetrievePackageLineRequest) IncludeTimeSlots(includeTimeSlots bool) ApiRetrievePackageLineRequest {
	r.includeTimeSlots = &includeTimeSlots
	return r
}
func (r ApiRetrievePackageLineRequest) IncludeTimeSlotTags(includeTimeSlotTags bool) ApiRetrievePackageLineRequest {
	r.includeTimeSlotTags = &includeTimeSlotTags
	return r
}
func (r ApiRetrievePackageLineRequest) IncludeRouteInfo(includeRouteInfo bool) ApiRetrievePackageLineRequest {
	r.includeRouteInfo = &includeRouteInfo
	return r
}
func (r ApiRetrievePackageLineRequest) IncludeDriverInfo(includeDriverInfo bool) ApiRetrievePackageLineRequest {
	r.includeDriverInfo = &includeDriverInfo
	return r
}
func (r ApiRetrievePackageLineRequest) IncludeCommunication(includeCommunication bool) ApiRetrievePackageLineRequest {
	r.includeCommunication = &includeCommunication
	return r
}
func (r ApiRetrievePackageLineRequest) IncludePackageLineLinks(includePackageLineLinks bool) ApiRetrievePackageLineRequest {
	r.includePackageLineLinks = &includePackageLineLinks
	return r
}
func (r ApiRetrievePackageLineRequest) IncludePackageLinesInfo(includePackageLinesInfo bool) ApiRetrievePackageLineRequest {
	r.includePackageLinesInfo = &includePackageLinesInfo
	return r
}
func (r ApiRetrievePackageLineRequest) IncludePackageLineFiles(includePackageLineFiles bool) ApiRetrievePackageLineRequest {
	r.includePackageLineFiles = &includePackageLineFiles
	return r
}
func (r ApiRetrievePackageLineRequest) IncludePackageLineFilesMetaData(includePackageLineFilesMetaData bool) ApiRetrievePackageLineRequest {
	r.includePackageLineFilesMetaData = &includePackageLineFilesMetaData
	return r
}

func (r ApiRetrievePackageLineRequest) Execute() (PackageLineModel, *_nethttp.Response, GenericOpenAPIError) {
	return r.ApiService.RetrievePackageLineExecute(r)
}

/*
 * RetrievePackageLine Find package-line by ID
 * Returns a single package-line
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param packageLineId ID of package-line to return
 * @return ApiRetrievePackageLineRequest
 */
func (a *PackageLineApiService) RetrievePackageLine(ctx _context.Context, packageLineId int64) ApiRetrievePackageLineRequest {
	return ApiRetrievePackageLineRequest{
		ApiService: a,
		ctx: ctx,
		packageLineId: packageLineId,
	}
}

/*
 * Execute executes the request
 * @return PackageLineModel
 */
func (a *PackageLineApiService) RetrievePackageLineExecute(r ApiRetrievePackageLineRequest) (PackageLineModel, *_nethttp.Response, GenericOpenAPIError) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		executionError       GenericOpenAPIError
		localVarReturnValue  PackageLineModel
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PackageLineApiService.RetrievePackageLine")
	if err != nil {
		executionError.error = err.Error()
		return localVarReturnValue, nil, executionError
	}

	localVarPath := localBasePath + "/package-line/{packageLineId}"
	localVarPath = strings.Replace(localVarPath, "{"+"packageLineId"+"}", _neturl.PathEscape(parameterToString(r.packageLineId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.includePackageLineStatus == nil {
		executionError.error = "includePackageLineStatus is required and must be specified"
		return localVarReturnValue, nil, executionError
	}
	if r.includePackageLineTypeName == nil {
		executionError.error = "includePackageLineTypeName is required and must be specified"
		return localVarReturnValue, nil, executionError
	}
	if r.includePackageLineMetaData == nil {
		executionError.error = "includePackageLineMetaData is required and must be specified"
		return localVarReturnValue, nil, executionError
	}
	if r.includeAddressObject == nil {
		executionError.error = "includeAddressObject is required and must be specified"
		return localVarReturnValue, nil, executionError
	}
	if r.includeTimeSlots == nil {
		executionError.error = "includeTimeSlots is required and must be specified"
		return localVarReturnValue, nil, executionError
	}
	if r.includeTimeSlotTags == nil {
		executionError.error = "includeTimeSlotTags is required and must be specified"
		return localVarReturnValue, nil, executionError
	}
	if r.includeRouteInfo == nil {
		executionError.error = "includeRouteInfo is required and must be specified"
		return localVarReturnValue, nil, executionError
	}
	if r.includeDriverInfo == nil {
		executionError.error = "includeDriverInfo is required and must be specified"
		return localVarReturnValue, nil, executionError
	}
	if r.includeCommunication == nil {
		executionError.error = "includeCommunication is required and must be specified"
		return localVarReturnValue, nil, executionError
	}
	if r.includePackageLineLinks == nil {
		executionError.error = "includePackageLineLinks is required and must be specified"
		return localVarReturnValue, nil, executionError
	}
	if r.includePackageLinesInfo == nil {
		executionError.error = "includePackageLinesInfo is required and must be specified"
		return localVarReturnValue, nil, executionError
	}
	if r.includePackageLineFiles == nil {
		executionError.error = "includePackageLineFiles is required and must be specified"
		return localVarReturnValue, nil, executionError
	}
	if r.includePackageLineFilesMetaData == nil {
		executionError.error = "includePackageLineFilesMetaData is required and must be specified"
		return localVarReturnValue, nil, executionError
	}

	localVarQueryParams.Add("include_package_line_status", parameterToString(*r.includePackageLineStatus, ""))
	localVarQueryParams.Add("include_package_line_type_name", parameterToString(*r.includePackageLineTypeName, ""))
	localVarQueryParams.Add("include_package_line_meta_data", parameterToString(*r.includePackageLineMetaData, ""))
	localVarQueryParams.Add("include_address_object", parameterToString(*r.includeAddressObject, ""))
	localVarQueryParams.Add("include_time_slots", parameterToString(*r.includeTimeSlots, ""))
	localVarQueryParams.Add("include_time_slot_tags", parameterToString(*r.includeTimeSlotTags, ""))
	localVarQueryParams.Add("include_route_info", parameterToString(*r.includeRouteInfo, ""))
	localVarQueryParams.Add("include_driver_info", parameterToString(*r.includeDriverInfo, ""))
	localVarQueryParams.Add("include_communication", parameterToString(*r.includeCommunication, ""))
	localVarQueryParams.Add("include_package_line_links", parameterToString(*r.includePackageLineLinks, ""))
	localVarQueryParams.Add("include_package_lines_info", parameterToString(*r.includePackageLinesInfo, ""))
	localVarQueryParams.Add("include_package_line_files", parameterToString(*r.includePackageLineFiles, ""))
	localVarQueryParams.Add("include_package_line_files_meta_data", parameterToString(*r.includePackageLineFilesMetaData, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["api_key"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["ApiKey"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["jwt"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		executionError.error = err.Error()
		return localVarReturnValue, nil, executionError
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		executionError.error = err.Error()
		return localVarReturnValue, localVarHTTPResponse, executionError
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		executionError.error = err.Error()
		return localVarReturnValue, localVarHTTPResponse, executionError
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, executionError
}

type ApiSetPackageLineRequest struct {
	ctx _context.Context
	ApiService *PackageLineApiService
	body *PackageLineModel
}

func (r ApiSetPackageLineRequest) Body(body PackageLineModel) ApiSetPackageLineRequest {
	r.body = &body
	return r
}

func (r ApiSetPackageLineRequest) Execute() (ApiResponse, *_nethttp.Response, GenericOpenAPIError) {
	return r.ApiService.SetPackageLineExecute(r)
}

/*
 * SetPackageLine Set (create or update) an PackageLine
 * Set (create or update) an PackageLine. If id or links are set in the data, and a corresponding package-line is found in Bumbal, an update will be performed.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiSetPackageLineRequest
 */
func (a *PackageLineApiService) SetPackageLine(ctx _context.Context) ApiSetPackageLineRequest {
	return ApiSetPackageLineRequest{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 * @return ApiResponse
 */
func (a *PackageLineApiService) SetPackageLineExecute(r ApiSetPackageLineRequest) (ApiResponse, *_nethttp.Response, GenericOpenAPIError) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		executionError       GenericOpenAPIError
		localVarReturnValue  ApiResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PackageLineApiService.SetPackageLine")
	if err != nil {
		executionError.error = err.Error()
		return localVarReturnValue, nil, executionError
	}

	localVarPath := localBasePath + "/package-line/set"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/xml"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["api_key"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["ApiKey"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["jwt"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		executionError.error = err.Error()
		return localVarReturnValue, nil, executionError
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		executionError.error = err.Error()
		return localVarReturnValue, localVarHTTPResponse, executionError
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		executionError.error = err.Error()
		return localVarReturnValue, localVarHTTPResponse, executionError
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, executionError
}

type ApiUpdatePackageLineRequest struct {
	ctx _context.Context
	ApiService *PackageLineApiService
	body *PackageLineUpdateArguments
}

func (r ApiUpdatePackageLineRequest) Body(body PackageLineUpdateArguments) ApiUpdatePackageLineRequest {
	r.body = &body
	return r
}

func (r ApiUpdatePackageLineRequest) Execute() (ApiResponse, *_nethttp.Response, GenericOpenAPIError) {
	return r.ApiService.UpdatePackageLineExecute(r)
}

/*
 * UpdatePackageLine Update package-lines in bulk
 * Update package-lines in bulk
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiUpdatePackageLineRequest
 */
func (a *PackageLineApiService) UpdatePackageLine(ctx _context.Context) ApiUpdatePackageLineRequest {
	return ApiUpdatePackageLineRequest{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 * @return ApiResponse
 */
func (a *PackageLineApiService) UpdatePackageLineExecute(r ApiUpdatePackageLineRequest) (ApiResponse, *_nethttp.Response, GenericOpenAPIError) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPut
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		executionError       GenericOpenAPIError
		localVarReturnValue  ApiResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PackageLineApiService.UpdatePackageLine")
	if err != nil {
		executionError.error = err.Error()
		return localVarReturnValue, nil, executionError
	}

	localVarPath := localBasePath + "/package-line/update"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/xml"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["api_key"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["ApiKey"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["jwt"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		executionError.error = err.Error()
		return localVarReturnValue, nil, executionError
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		executionError.error = err.Error()
		return localVarReturnValue, localVarHTTPResponse, executionError
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		executionError.error = err.Error()
		return localVarReturnValue, localVarHTTPResponse, executionError
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, executionError
}
