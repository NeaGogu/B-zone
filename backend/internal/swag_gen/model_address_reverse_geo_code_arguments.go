/*
 * Bumbal Client Api
 *
 * Bumbal API documentation
 *
 * API version: 2.0
 * Contact: info@bumbal.eu
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// AddressReverseGeoCodeArguments struct for AddressReverseGeoCodeArguments
type AddressReverseGeoCodeArguments struct {
	// 
	MinAccuracy *float32 `json:"min_accuracy,omitempty"`
	// 
	Distance *int32 `json:"distance,omitempty"`
	// 
	Latitude *string `json:"latitude,omitempty"`
	// 
	Longitude *string `json:"longitude,omitempty"`
}

// NewAddressReverseGeoCodeArguments instantiates a new AddressReverseGeoCodeArguments object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAddressReverseGeoCodeArguments() *AddressReverseGeoCodeArguments {
	this := AddressReverseGeoCodeArguments{}
	return &this
}

// NewAddressReverseGeoCodeArgumentsWithDefaults instantiates a new AddressReverseGeoCodeArguments object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAddressReverseGeoCodeArgumentsWithDefaults() *AddressReverseGeoCodeArguments {
	this := AddressReverseGeoCodeArguments{}
	return &this
}

// GetMinAccuracy returns the MinAccuracy field value if set, zero value otherwise.
func (o *AddressReverseGeoCodeArguments) GetMinAccuracy() float32 {
	if o == nil || o.MinAccuracy == nil {
		var ret float32
		return ret
	}
	return *o.MinAccuracy
}

// GetMinAccuracyOk returns a tuple with the MinAccuracy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddressReverseGeoCodeArguments) GetMinAccuracyOk() (*float32, bool) {
	if o == nil || o.MinAccuracy == nil {
		return nil, false
	}
	return o.MinAccuracy, true
}

// HasMinAccuracy returns a boolean if a field has been set.
func (o *AddressReverseGeoCodeArguments) HasMinAccuracy() bool {
	if o != nil && o.MinAccuracy != nil {
		return true
	}

	return false
}

// SetMinAccuracy gets a reference to the given float32 and assigns it to the MinAccuracy field.
func (o *AddressReverseGeoCodeArguments) SetMinAccuracy(v float32) {
	o.MinAccuracy = &v
}

// GetDistance returns the Distance field value if set, zero value otherwise.
func (o *AddressReverseGeoCodeArguments) GetDistance() int32 {
	if o == nil || o.Distance == nil {
		var ret int32
		return ret
	}
	return *o.Distance
}

// GetDistanceOk returns a tuple with the Distance field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddressReverseGeoCodeArguments) GetDistanceOk() (*int32, bool) {
	if o == nil || o.Distance == nil {
		return nil, false
	}
	return o.Distance, true
}

// HasDistance returns a boolean if a field has been set.
func (o *AddressReverseGeoCodeArguments) HasDistance() bool {
	if o != nil && o.Distance != nil {
		return true
	}

	return false
}

// SetDistance gets a reference to the given int32 and assigns it to the Distance field.
func (o *AddressReverseGeoCodeArguments) SetDistance(v int32) {
	o.Distance = &v
}

// GetLatitude returns the Latitude field value if set, zero value otherwise.
func (o *AddressReverseGeoCodeArguments) GetLatitude() string {
	if o == nil || o.Latitude == nil {
		var ret string
		return ret
	}
	return *o.Latitude
}

// GetLatitudeOk returns a tuple with the Latitude field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddressReverseGeoCodeArguments) GetLatitudeOk() (*string, bool) {
	if o == nil || o.Latitude == nil {
		return nil, false
	}
	return o.Latitude, true
}

// HasLatitude returns a boolean if a field has been set.
func (o *AddressReverseGeoCodeArguments) HasLatitude() bool {
	if o != nil && o.Latitude != nil {
		return true
	}

	return false
}

// SetLatitude gets a reference to the given string and assigns it to the Latitude field.
func (o *AddressReverseGeoCodeArguments) SetLatitude(v string) {
	o.Latitude = &v
}

// GetLongitude returns the Longitude field value if set, zero value otherwise.
func (o *AddressReverseGeoCodeArguments) GetLongitude() string {
	if o == nil || o.Longitude == nil {
		var ret string
		return ret
	}
	return *o.Longitude
}

// GetLongitudeOk returns a tuple with the Longitude field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddressReverseGeoCodeArguments) GetLongitudeOk() (*string, bool) {
	if o == nil || o.Longitude == nil {
		return nil, false
	}
	return o.Longitude, true
}

// HasLongitude returns a boolean if a field has been set.
func (o *AddressReverseGeoCodeArguments) HasLongitude() bool {
	if o != nil && o.Longitude != nil {
		return true
	}

	return false
}

// SetLongitude gets a reference to the given string and assigns it to the Longitude field.
func (o *AddressReverseGeoCodeArguments) SetLongitude(v string) {
	o.Longitude = &v
}

func (o AddressReverseGeoCodeArguments) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.MinAccuracy != nil {
		toSerialize["min_accuracy"] = o.MinAccuracy
	}
	if o.Distance != nil {
		toSerialize["distance"] = o.Distance
	}
	if o.Latitude != nil {
		toSerialize["latitude"] = o.Latitude
	}
	if o.Longitude != nil {
		toSerialize["longitude"] = o.Longitude
	}
	return json.Marshal(toSerialize)
}

type NullableAddressReverseGeoCodeArguments struct {
	value *AddressReverseGeoCodeArguments
	isSet bool
}

func (v NullableAddressReverseGeoCodeArguments) Get() *AddressReverseGeoCodeArguments {
	return v.value
}

func (v *NullableAddressReverseGeoCodeArguments) Set(val *AddressReverseGeoCodeArguments) {
	v.value = val
	v.isSet = true
}

func (v NullableAddressReverseGeoCodeArguments) IsSet() bool {
	return v.isSet
}

func (v *NullableAddressReverseGeoCodeArguments) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAddressReverseGeoCodeArguments(val *AddressReverseGeoCodeArguments) *NullableAddressReverseGeoCodeArguments {
	return &NullableAddressReverseGeoCodeArguments{value: val, isSet: true}
}

func (v NullableAddressReverseGeoCodeArguments) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAddressReverseGeoCodeArguments) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


