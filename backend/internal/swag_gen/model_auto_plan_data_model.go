/*
 * Bumbal Client Api
 *
 * Bumbal API documentation
 *
 * API version: 2.0
 * Contact: info@bumbal.eu
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// AutoPlanDataModel struct for AutoPlanDataModel
type AutoPlanDataModel struct {
	// unique per api request
	Token *int64 `json:"token,omitempty"`
	// unique key from availability result, used to reuse fromer result
	AvailabilityKey *string `json:"availability_key,omitempty"`
	// 
	Activity *[]ActivityModel `json:"activity,omitempty"`
}

// NewAutoPlanDataModel instantiates a new AutoPlanDataModel object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAutoPlanDataModel() *AutoPlanDataModel {
	this := AutoPlanDataModel{}
	return &this
}

// NewAutoPlanDataModelWithDefaults instantiates a new AutoPlanDataModel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAutoPlanDataModelWithDefaults() *AutoPlanDataModel {
	this := AutoPlanDataModel{}
	return &this
}

// GetToken returns the Token field value if set, zero value otherwise.
func (o *AutoPlanDataModel) GetToken() int64 {
	if o == nil || o.Token == nil {
		var ret int64
		return ret
	}
	return *o.Token
}

// GetTokenOk returns a tuple with the Token field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AutoPlanDataModel) GetTokenOk() (*int64, bool) {
	if o == nil || o.Token == nil {
		return nil, false
	}
	return o.Token, true
}

// HasToken returns a boolean if a field has been set.
func (o *AutoPlanDataModel) HasToken() bool {
	if o != nil && o.Token != nil {
		return true
	}

	return false
}

// SetToken gets a reference to the given int64 and assigns it to the Token field.
func (o *AutoPlanDataModel) SetToken(v int64) {
	o.Token = &v
}

// GetAvailabilityKey returns the AvailabilityKey field value if set, zero value otherwise.
func (o *AutoPlanDataModel) GetAvailabilityKey() string {
	if o == nil || o.AvailabilityKey == nil {
		var ret string
		return ret
	}
	return *o.AvailabilityKey
}

// GetAvailabilityKeyOk returns a tuple with the AvailabilityKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AutoPlanDataModel) GetAvailabilityKeyOk() (*string, bool) {
	if o == nil || o.AvailabilityKey == nil {
		return nil, false
	}
	return o.AvailabilityKey, true
}

// HasAvailabilityKey returns a boolean if a field has been set.
func (o *AutoPlanDataModel) HasAvailabilityKey() bool {
	if o != nil && o.AvailabilityKey != nil {
		return true
	}

	return false
}

// SetAvailabilityKey gets a reference to the given string and assigns it to the AvailabilityKey field.
func (o *AutoPlanDataModel) SetAvailabilityKey(v string) {
	o.AvailabilityKey = &v
}

// GetActivity returns the Activity field value if set, zero value otherwise.
func (o *AutoPlanDataModel) GetActivity() []ActivityModel {
	if o == nil || o.Activity == nil {
		var ret []ActivityModel
		return ret
	}
	return *o.Activity
}

// GetActivityOk returns a tuple with the Activity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AutoPlanDataModel) GetActivityOk() (*[]ActivityModel, bool) {
	if o == nil || o.Activity == nil {
		return nil, false
	}
	return o.Activity, true
}

// HasActivity returns a boolean if a field has been set.
func (o *AutoPlanDataModel) HasActivity() bool {
	if o != nil && o.Activity != nil {
		return true
	}

	return false
}

// SetActivity gets a reference to the given []ActivityModel and assigns it to the Activity field.
func (o *AutoPlanDataModel) SetActivity(v []ActivityModel) {
	o.Activity = &v
}

func (o AutoPlanDataModel) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Token != nil {
		toSerialize["token"] = o.Token
	}
	if o.AvailabilityKey != nil {
		toSerialize["availability_key"] = o.AvailabilityKey
	}
	if o.Activity != nil {
		toSerialize["activity"] = o.Activity
	}
	return json.Marshal(toSerialize)
}

type NullableAutoPlanDataModel struct {
	value *AutoPlanDataModel
	isSet bool
}

func (v NullableAutoPlanDataModel) Get() *AutoPlanDataModel {
	return v.value
}

func (v *NullableAutoPlanDataModel) Set(val *AutoPlanDataModel) {
	v.value = val
	v.isSet = true
}

func (v NullableAutoPlanDataModel) IsSet() bool {
	return v.isSet
}

func (v *NullableAutoPlanDataModel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAutoPlanDataModel(val *AutoPlanDataModel) *NullableAutoPlanDataModel {
	return &NullableAutoPlanDataModel{value: val, isSet: true}
}

func (v NullableAutoPlanDataModel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAutoPlanDataModel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


