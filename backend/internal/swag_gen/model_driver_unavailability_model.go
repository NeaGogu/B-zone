/*
 * Bumbal Client Api
 *
 * Bumbal API documentation
 *
 * API version: 2.0
 * Contact: info@bumbal.eu
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// DriverUnavailabilityModel struct for DriverUnavailabilityModel
type DriverUnavailabilityModel struct {
	// Unique ID
	Id *int64 `json:"id,omitempty"`
	// The user_id of the DriverUnavailability
	UserId *string `json:"user_id,omitempty"`
	// The reference of the DriverUnavailability
	Reference *string `json:"reference,omitempty"`
	// date_time_to date time
	DateTimeTo *time.Time `json:"date_time_to,omitempty"`
	// date_time_from date time
	DateTimeFrom *time.Time `json:"date_time_from,omitempty"`
	UserLink *LinkModel `json:"user_link,omitempty"`
	// created_at date time
	CreatedAt *time.Time `json:"created_at,omitempty"`
	// updated_at date time
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
	// 
	Links *[]LinkModel `json:"links,omitempty"`
	// if active=0: Driver Unavailability has been removed and is no longer visible in any bumbal interface
	Active *bool `json:"active,omitempty"`
}

// NewDriverUnavailabilityModel instantiates a new DriverUnavailabilityModel object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDriverUnavailabilityModel() *DriverUnavailabilityModel {
	this := DriverUnavailabilityModel{}
	return &this
}

// NewDriverUnavailabilityModelWithDefaults instantiates a new DriverUnavailabilityModel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDriverUnavailabilityModelWithDefaults() *DriverUnavailabilityModel {
	this := DriverUnavailabilityModel{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *DriverUnavailabilityModel) GetId() int64 {
	if o == nil || o.Id == nil {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DriverUnavailabilityModel) GetIdOk() (*int64, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *DriverUnavailabilityModel) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *DriverUnavailabilityModel) SetId(v int64) {
	o.Id = &v
}

// GetUserId returns the UserId field value if set, zero value otherwise.
func (o *DriverUnavailabilityModel) GetUserId() string {
	if o == nil || o.UserId == nil {
		var ret string
		return ret
	}
	return *o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DriverUnavailabilityModel) GetUserIdOk() (*string, bool) {
	if o == nil || o.UserId == nil {
		return nil, false
	}
	return o.UserId, true
}

// HasUserId returns a boolean if a field has been set.
func (o *DriverUnavailabilityModel) HasUserId() bool {
	if o != nil && o.UserId != nil {
		return true
	}

	return false
}

// SetUserId gets a reference to the given string and assigns it to the UserId field.
func (o *DriverUnavailabilityModel) SetUserId(v string) {
	o.UserId = &v
}

// GetReference returns the Reference field value if set, zero value otherwise.
func (o *DriverUnavailabilityModel) GetReference() string {
	if o == nil || o.Reference == nil {
		var ret string
		return ret
	}
	return *o.Reference
}

// GetReferenceOk returns a tuple with the Reference field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DriverUnavailabilityModel) GetReferenceOk() (*string, bool) {
	if o == nil || o.Reference == nil {
		return nil, false
	}
	return o.Reference, true
}

// HasReference returns a boolean if a field has been set.
func (o *DriverUnavailabilityModel) HasReference() bool {
	if o != nil && o.Reference != nil {
		return true
	}

	return false
}

// SetReference gets a reference to the given string and assigns it to the Reference field.
func (o *DriverUnavailabilityModel) SetReference(v string) {
	o.Reference = &v
}

// GetDateTimeTo returns the DateTimeTo field value if set, zero value otherwise.
func (o *DriverUnavailabilityModel) GetDateTimeTo() time.Time {
	if o == nil || o.DateTimeTo == nil {
		var ret time.Time
		return ret
	}
	return *o.DateTimeTo
}

// GetDateTimeToOk returns a tuple with the DateTimeTo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DriverUnavailabilityModel) GetDateTimeToOk() (*time.Time, bool) {
	if o == nil || o.DateTimeTo == nil {
		return nil, false
	}
	return o.DateTimeTo, true
}

// HasDateTimeTo returns a boolean if a field has been set.
func (o *DriverUnavailabilityModel) HasDateTimeTo() bool {
	if o != nil && o.DateTimeTo != nil {
		return true
	}

	return false
}

// SetDateTimeTo gets a reference to the given time.Time and assigns it to the DateTimeTo field.
func (o *DriverUnavailabilityModel) SetDateTimeTo(v time.Time) {
	o.DateTimeTo = &v
}

// GetDateTimeFrom returns the DateTimeFrom field value if set, zero value otherwise.
func (o *DriverUnavailabilityModel) GetDateTimeFrom() time.Time {
	if o == nil || o.DateTimeFrom == nil {
		var ret time.Time
		return ret
	}
	return *o.DateTimeFrom
}

// GetDateTimeFromOk returns a tuple with the DateTimeFrom field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DriverUnavailabilityModel) GetDateTimeFromOk() (*time.Time, bool) {
	if o == nil || o.DateTimeFrom == nil {
		return nil, false
	}
	return o.DateTimeFrom, true
}

// HasDateTimeFrom returns a boolean if a field has been set.
func (o *DriverUnavailabilityModel) HasDateTimeFrom() bool {
	if o != nil && o.DateTimeFrom != nil {
		return true
	}

	return false
}

// SetDateTimeFrom gets a reference to the given time.Time and assigns it to the DateTimeFrom field.
func (o *DriverUnavailabilityModel) SetDateTimeFrom(v time.Time) {
	o.DateTimeFrom = &v
}

// GetUserLink returns the UserLink field value if set, zero value otherwise.
func (o *DriverUnavailabilityModel) GetUserLink() LinkModel {
	if o == nil || o.UserLink == nil {
		var ret LinkModel
		return ret
	}
	return *o.UserLink
}

// GetUserLinkOk returns a tuple with the UserLink field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DriverUnavailabilityModel) GetUserLinkOk() (*LinkModel, bool) {
	if o == nil || o.UserLink == nil {
		return nil, false
	}
	return o.UserLink, true
}

// HasUserLink returns a boolean if a field has been set.
func (o *DriverUnavailabilityModel) HasUserLink() bool {
	if o != nil && o.UserLink != nil {
		return true
	}

	return false
}

// SetUserLink gets a reference to the given LinkModel and assigns it to the UserLink field.
func (o *DriverUnavailabilityModel) SetUserLink(v LinkModel) {
	o.UserLink = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *DriverUnavailabilityModel) GetCreatedAt() time.Time {
	if o == nil || o.CreatedAt == nil {
		var ret time.Time
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DriverUnavailabilityModel) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil || o.CreatedAt == nil {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *DriverUnavailabilityModel) HasCreatedAt() bool {
	if o != nil && o.CreatedAt != nil {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given time.Time and assigns it to the CreatedAt field.
func (o *DriverUnavailabilityModel) SetCreatedAt(v time.Time) {
	o.CreatedAt = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *DriverUnavailabilityModel) GetUpdatedAt() time.Time {
	if o == nil || o.UpdatedAt == nil {
		var ret time.Time
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DriverUnavailabilityModel) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil || o.UpdatedAt == nil {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *DriverUnavailabilityModel) HasUpdatedAt() bool {
	if o != nil && o.UpdatedAt != nil {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given time.Time and assigns it to the UpdatedAt field.
func (o *DriverUnavailabilityModel) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = &v
}

// GetLinks returns the Links field value if set, zero value otherwise.
func (o *DriverUnavailabilityModel) GetLinks() []LinkModel {
	if o == nil || o.Links == nil {
		var ret []LinkModel
		return ret
	}
	return *o.Links
}

// GetLinksOk returns a tuple with the Links field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DriverUnavailabilityModel) GetLinksOk() (*[]LinkModel, bool) {
	if o == nil || o.Links == nil {
		return nil, false
	}
	return o.Links, true
}

// HasLinks returns a boolean if a field has been set.
func (o *DriverUnavailabilityModel) HasLinks() bool {
	if o != nil && o.Links != nil {
		return true
	}

	return false
}

// SetLinks gets a reference to the given []LinkModel and assigns it to the Links field.
func (o *DriverUnavailabilityModel) SetLinks(v []LinkModel) {
	o.Links = &v
}

// GetActive returns the Active field value if set, zero value otherwise.
func (o *DriverUnavailabilityModel) GetActive() bool {
	if o == nil || o.Active == nil {
		var ret bool
		return ret
	}
	return *o.Active
}

// GetActiveOk returns a tuple with the Active field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DriverUnavailabilityModel) GetActiveOk() (*bool, bool) {
	if o == nil || o.Active == nil {
		return nil, false
	}
	return o.Active, true
}

// HasActive returns a boolean if a field has been set.
func (o *DriverUnavailabilityModel) HasActive() bool {
	if o != nil && o.Active != nil {
		return true
	}

	return false
}

// SetActive gets a reference to the given bool and assigns it to the Active field.
func (o *DriverUnavailabilityModel) SetActive(v bool) {
	o.Active = &v
}

func (o DriverUnavailabilityModel) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.UserId != nil {
		toSerialize["user_id"] = o.UserId
	}
	if o.Reference != nil {
		toSerialize["reference"] = o.Reference
	}
	if o.DateTimeTo != nil {
		toSerialize["date_time_to"] = o.DateTimeTo
	}
	if o.DateTimeFrom != nil {
		toSerialize["date_time_from"] = o.DateTimeFrom
	}
	if o.UserLink != nil {
		toSerialize["user_link"] = o.UserLink
	}
	if o.CreatedAt != nil {
		toSerialize["created_at"] = o.CreatedAt
	}
	if o.UpdatedAt != nil {
		toSerialize["updated_at"] = o.UpdatedAt
	}
	if o.Links != nil {
		toSerialize["links"] = o.Links
	}
	if o.Active != nil {
		toSerialize["active"] = o.Active
	}
	return json.Marshal(toSerialize)
}

type NullableDriverUnavailabilityModel struct {
	value *DriverUnavailabilityModel
	isSet bool
}

func (v NullableDriverUnavailabilityModel) Get() *DriverUnavailabilityModel {
	return v.value
}

func (v *NullableDriverUnavailabilityModel) Set(val *DriverUnavailabilityModel) {
	v.value = val
	v.isSet = true
}

func (v NullableDriverUnavailabilityModel) IsSet() bool {
	return v.isSet
}

func (v *NullableDriverUnavailabilityModel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDriverUnavailabilityModel(val *DriverUnavailabilityModel) *NullableDriverUnavailabilityModel {
	return &NullableDriverUnavailabilityModel{value: val, isSet: true}
}

func (v NullableDriverUnavailabilityModel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDriverUnavailabilityModel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


