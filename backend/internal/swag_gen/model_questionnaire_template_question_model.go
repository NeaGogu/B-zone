/*
 * Bumbal Client Api
 *
 * Bumbal API documentation
 *
 * API version: 2.0
 * Contact: info@bumbal.eu
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// QuestionnaireTemplateQuestionModel struct for QuestionnaireTemplateQuestionModel
type QuestionnaireTemplateQuestionModel struct {
	// Unique Identifier
	Id *int64 `json:"id,omitempty"`
	// if active=0: note has been removed and is no longer visible in any bumbal interface
	Active *bool `json:"active,omitempty"`
	// Questionnaire template id
	QuestionnaireTemplateId *int64 `json:"questionnaire_template_id,omitempty"`
	// Question type id
	QuestionTypeId *int64 `json:"question_type_id,omitempty"`
	// Question type name
	QuestionTypeName *string `json:"question_type_name,omitempty"`
	// Order
	Order *int64 `json:"order,omitempty"`
	// 
	Options *[]QuestionnaireTemplateQuestionOptionModel `json:"options,omitempty"`
	// 
	Texts *[]QuestionnaireTemplateQuestionTextModel `json:"texts,omitempty"`
}

// NewQuestionnaireTemplateQuestionModel instantiates a new QuestionnaireTemplateQuestionModel object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewQuestionnaireTemplateQuestionModel() *QuestionnaireTemplateQuestionModel {
	this := QuestionnaireTemplateQuestionModel{}
	return &this
}

// NewQuestionnaireTemplateQuestionModelWithDefaults instantiates a new QuestionnaireTemplateQuestionModel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewQuestionnaireTemplateQuestionModelWithDefaults() *QuestionnaireTemplateQuestionModel {
	this := QuestionnaireTemplateQuestionModel{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *QuestionnaireTemplateQuestionModel) GetId() int64 {
	if o == nil || o.Id == nil {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuestionnaireTemplateQuestionModel) GetIdOk() (*int64, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *QuestionnaireTemplateQuestionModel) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *QuestionnaireTemplateQuestionModel) SetId(v int64) {
	o.Id = &v
}

// GetActive returns the Active field value if set, zero value otherwise.
func (o *QuestionnaireTemplateQuestionModel) GetActive() bool {
	if o == nil || o.Active == nil {
		var ret bool
		return ret
	}
	return *o.Active
}

// GetActiveOk returns a tuple with the Active field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuestionnaireTemplateQuestionModel) GetActiveOk() (*bool, bool) {
	if o == nil || o.Active == nil {
		return nil, false
	}
	return o.Active, true
}

// HasActive returns a boolean if a field has been set.
func (o *QuestionnaireTemplateQuestionModel) HasActive() bool {
	if o != nil && o.Active != nil {
		return true
	}

	return false
}

// SetActive gets a reference to the given bool and assigns it to the Active field.
func (o *QuestionnaireTemplateQuestionModel) SetActive(v bool) {
	o.Active = &v
}

// GetQuestionnaireTemplateId returns the QuestionnaireTemplateId field value if set, zero value otherwise.
func (o *QuestionnaireTemplateQuestionModel) GetQuestionnaireTemplateId() int64 {
	if o == nil || o.QuestionnaireTemplateId == nil {
		var ret int64
		return ret
	}
	return *o.QuestionnaireTemplateId
}

// GetQuestionnaireTemplateIdOk returns a tuple with the QuestionnaireTemplateId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuestionnaireTemplateQuestionModel) GetQuestionnaireTemplateIdOk() (*int64, bool) {
	if o == nil || o.QuestionnaireTemplateId == nil {
		return nil, false
	}
	return o.QuestionnaireTemplateId, true
}

// HasQuestionnaireTemplateId returns a boolean if a field has been set.
func (o *QuestionnaireTemplateQuestionModel) HasQuestionnaireTemplateId() bool {
	if o != nil && o.QuestionnaireTemplateId != nil {
		return true
	}

	return false
}

// SetQuestionnaireTemplateId gets a reference to the given int64 and assigns it to the QuestionnaireTemplateId field.
func (o *QuestionnaireTemplateQuestionModel) SetQuestionnaireTemplateId(v int64) {
	o.QuestionnaireTemplateId = &v
}

// GetQuestionTypeId returns the QuestionTypeId field value if set, zero value otherwise.
func (o *QuestionnaireTemplateQuestionModel) GetQuestionTypeId() int64 {
	if o == nil || o.QuestionTypeId == nil {
		var ret int64
		return ret
	}
	return *o.QuestionTypeId
}

// GetQuestionTypeIdOk returns a tuple with the QuestionTypeId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuestionnaireTemplateQuestionModel) GetQuestionTypeIdOk() (*int64, bool) {
	if o == nil || o.QuestionTypeId == nil {
		return nil, false
	}
	return o.QuestionTypeId, true
}

// HasQuestionTypeId returns a boolean if a field has been set.
func (o *QuestionnaireTemplateQuestionModel) HasQuestionTypeId() bool {
	if o != nil && o.QuestionTypeId != nil {
		return true
	}

	return false
}

// SetQuestionTypeId gets a reference to the given int64 and assigns it to the QuestionTypeId field.
func (o *QuestionnaireTemplateQuestionModel) SetQuestionTypeId(v int64) {
	o.QuestionTypeId = &v
}

// GetQuestionTypeName returns the QuestionTypeName field value if set, zero value otherwise.
func (o *QuestionnaireTemplateQuestionModel) GetQuestionTypeName() string {
	if o == nil || o.QuestionTypeName == nil {
		var ret string
		return ret
	}
	return *o.QuestionTypeName
}

// GetQuestionTypeNameOk returns a tuple with the QuestionTypeName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuestionnaireTemplateQuestionModel) GetQuestionTypeNameOk() (*string, bool) {
	if o == nil || o.QuestionTypeName == nil {
		return nil, false
	}
	return o.QuestionTypeName, true
}

// HasQuestionTypeName returns a boolean if a field has been set.
func (o *QuestionnaireTemplateQuestionModel) HasQuestionTypeName() bool {
	if o != nil && o.QuestionTypeName != nil {
		return true
	}

	return false
}

// SetQuestionTypeName gets a reference to the given string and assigns it to the QuestionTypeName field.
func (o *QuestionnaireTemplateQuestionModel) SetQuestionTypeName(v string) {
	o.QuestionTypeName = &v
}

// GetOrder returns the Order field value if set, zero value otherwise.
func (o *QuestionnaireTemplateQuestionModel) GetOrder() int64 {
	if o == nil || o.Order == nil {
		var ret int64
		return ret
	}
	return *o.Order
}

// GetOrderOk returns a tuple with the Order field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuestionnaireTemplateQuestionModel) GetOrderOk() (*int64, bool) {
	if o == nil || o.Order == nil {
		return nil, false
	}
	return o.Order, true
}

// HasOrder returns a boolean if a field has been set.
func (o *QuestionnaireTemplateQuestionModel) HasOrder() bool {
	if o != nil && o.Order != nil {
		return true
	}

	return false
}

// SetOrder gets a reference to the given int64 and assigns it to the Order field.
func (o *QuestionnaireTemplateQuestionModel) SetOrder(v int64) {
	o.Order = &v
}

// GetOptions returns the Options field value if set, zero value otherwise.
func (o *QuestionnaireTemplateQuestionModel) GetOptions() []QuestionnaireTemplateQuestionOptionModel {
	if o == nil || o.Options == nil {
		var ret []QuestionnaireTemplateQuestionOptionModel
		return ret
	}
	return *o.Options
}

// GetOptionsOk returns a tuple with the Options field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuestionnaireTemplateQuestionModel) GetOptionsOk() (*[]QuestionnaireTemplateQuestionOptionModel, bool) {
	if o == nil || o.Options == nil {
		return nil, false
	}
	return o.Options, true
}

// HasOptions returns a boolean if a field has been set.
func (o *QuestionnaireTemplateQuestionModel) HasOptions() bool {
	if o != nil && o.Options != nil {
		return true
	}

	return false
}

// SetOptions gets a reference to the given []QuestionnaireTemplateQuestionOptionModel and assigns it to the Options field.
func (o *QuestionnaireTemplateQuestionModel) SetOptions(v []QuestionnaireTemplateQuestionOptionModel) {
	o.Options = &v
}

// GetTexts returns the Texts field value if set, zero value otherwise.
func (o *QuestionnaireTemplateQuestionModel) GetTexts() []QuestionnaireTemplateQuestionTextModel {
	if o == nil || o.Texts == nil {
		var ret []QuestionnaireTemplateQuestionTextModel
		return ret
	}
	return *o.Texts
}

// GetTextsOk returns a tuple with the Texts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuestionnaireTemplateQuestionModel) GetTextsOk() (*[]QuestionnaireTemplateQuestionTextModel, bool) {
	if o == nil || o.Texts == nil {
		return nil, false
	}
	return o.Texts, true
}

// HasTexts returns a boolean if a field has been set.
func (o *QuestionnaireTemplateQuestionModel) HasTexts() bool {
	if o != nil && o.Texts != nil {
		return true
	}

	return false
}

// SetTexts gets a reference to the given []QuestionnaireTemplateQuestionTextModel and assigns it to the Texts field.
func (o *QuestionnaireTemplateQuestionModel) SetTexts(v []QuestionnaireTemplateQuestionTextModel) {
	o.Texts = &v
}

func (o QuestionnaireTemplateQuestionModel) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Active != nil {
		toSerialize["active"] = o.Active
	}
	if o.QuestionnaireTemplateId != nil {
		toSerialize["questionnaire_template_id"] = o.QuestionnaireTemplateId
	}
	if o.QuestionTypeId != nil {
		toSerialize["question_type_id"] = o.QuestionTypeId
	}
	if o.QuestionTypeName != nil {
		toSerialize["question_type_name"] = o.QuestionTypeName
	}
	if o.Order != nil {
		toSerialize["order"] = o.Order
	}
	if o.Options != nil {
		toSerialize["options"] = o.Options
	}
	if o.Texts != nil {
		toSerialize["texts"] = o.Texts
	}
	return json.Marshal(toSerialize)
}

type NullableQuestionnaireTemplateQuestionModel struct {
	value *QuestionnaireTemplateQuestionModel
	isSet bool
}

func (v NullableQuestionnaireTemplateQuestionModel) Get() *QuestionnaireTemplateQuestionModel {
	return v.value
}

func (v *NullableQuestionnaireTemplateQuestionModel) Set(val *QuestionnaireTemplateQuestionModel) {
	v.value = val
	v.isSet = true
}

func (v NullableQuestionnaireTemplateQuestionModel) IsSet() bool {
	return v.isSet
}

func (v *NullableQuestionnaireTemplateQuestionModel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableQuestionnaireTemplateQuestionModel(val *QuestionnaireTemplateQuestionModel) *NullableQuestionnaireTemplateQuestionModel {
	return &NullableQuestionnaireTemplateQuestionModel{value: val, isSet: true}
}

func (v NullableQuestionnaireTemplateQuestionModel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableQuestionnaireTemplateQuestionModel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


