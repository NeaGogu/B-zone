/*
 * Bumbal Client Api
 *
 * Bumbal API documentation
 *
 * API version: 2.0
 * Contact: info@bumbal.eu
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// RecurrenceProcessRunsResponse struct for RecurrenceProcessRunsResponse
type RecurrenceProcessRunsResponse struct {
	// success
	Success *bool `json:"success,omitempty"`
	// data
	Data *map[string]interface{} `json:"data,omitempty"`
}

// NewRecurrenceProcessRunsResponse instantiates a new RecurrenceProcessRunsResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRecurrenceProcessRunsResponse() *RecurrenceProcessRunsResponse {
	this := RecurrenceProcessRunsResponse{}
	return &this
}

// NewRecurrenceProcessRunsResponseWithDefaults instantiates a new RecurrenceProcessRunsResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRecurrenceProcessRunsResponseWithDefaults() *RecurrenceProcessRunsResponse {
	this := RecurrenceProcessRunsResponse{}
	return &this
}

// GetSuccess returns the Success field value if set, zero value otherwise.
func (o *RecurrenceProcessRunsResponse) GetSuccess() bool {
	if o == nil || o.Success == nil {
		var ret bool
		return ret
	}
	return *o.Success
}

// GetSuccessOk returns a tuple with the Success field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecurrenceProcessRunsResponse) GetSuccessOk() (*bool, bool) {
	if o == nil || o.Success == nil {
		return nil, false
	}
	return o.Success, true
}

// HasSuccess returns a boolean if a field has been set.
func (o *RecurrenceProcessRunsResponse) HasSuccess() bool {
	if o != nil && o.Success != nil {
		return true
	}

	return false
}

// SetSuccess gets a reference to the given bool and assigns it to the Success field.
func (o *RecurrenceProcessRunsResponse) SetSuccess(v bool) {
	o.Success = &v
}

// GetData returns the Data field value if set, zero value otherwise.
func (o *RecurrenceProcessRunsResponse) GetData() map[string]interface{} {
	if o == nil || o.Data == nil {
		var ret map[string]interface{}
		return ret
	}
	return *o.Data
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecurrenceProcessRunsResponse) GetDataOk() (*map[string]interface{}, bool) {
	if o == nil || o.Data == nil {
		return nil, false
	}
	return o.Data, true
}

// HasData returns a boolean if a field has been set.
func (o *RecurrenceProcessRunsResponse) HasData() bool {
	if o != nil && o.Data != nil {
		return true
	}

	return false
}

// SetData gets a reference to the given map[string]interface{} and assigns it to the Data field.
func (o *RecurrenceProcessRunsResponse) SetData(v map[string]interface{}) {
	o.Data = &v
}

func (o RecurrenceProcessRunsResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Success != nil {
		toSerialize["success"] = o.Success
	}
	if o.Data != nil {
		toSerialize["data"] = o.Data
	}
	return json.Marshal(toSerialize)
}

type NullableRecurrenceProcessRunsResponse struct {
	value *RecurrenceProcessRunsResponse
	isSet bool
}

func (v NullableRecurrenceProcessRunsResponse) Get() *RecurrenceProcessRunsResponse {
	return v.value
}

func (v *NullableRecurrenceProcessRunsResponse) Set(val *RecurrenceProcessRunsResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableRecurrenceProcessRunsResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableRecurrenceProcessRunsResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRecurrenceProcessRunsResponse(val *RecurrenceProcessRunsResponse) *NullableRecurrenceProcessRunsResponse {
	return &NullableRecurrenceProcessRunsResponse{value: val, isSet: true}
}

func (v NullableRecurrenceProcessRunsResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRecurrenceProcessRunsResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


