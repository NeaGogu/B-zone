/*
 * Bumbal Client Api
 *
 * Bumbal API documentation
 *
 * API version: 2.0
 * Contact: info@bumbal.eu
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// TransactionModel struct for TransactionModel
type TransactionModel struct {
	// Unique Identifier
	Id *int64 `json:"id,omitempty"`
	// if active=0: Transaction has been removed and is no longer visible in any bumbal interface
	Active *bool `json:"active,omitempty"`
	// activity id it belongs to
	ActivityId *int32 `json:"activity_id,omitempty"`
	// amount in cents, 42 euro is 4200 cents
	Amount *int32 `json:"amount,omitempty"`
	// Type of Transaction: 1 = cash, 2 = pin, 3 = online
	TransactionType *int32 `json:"transaction_type,omitempty"`
	// If paid = 0: the transaction has not been fullfilled yet
	Paid *bool `json:"paid,omitempty"`
	// if failed = 1: the transaction has failed
	Failed *bool `json:"failed,omitempty"`
}

// NewTransactionModel instantiates a new TransactionModel object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTransactionModel() *TransactionModel {
	this := TransactionModel{}
	return &this
}

// NewTransactionModelWithDefaults instantiates a new TransactionModel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTransactionModelWithDefaults() *TransactionModel {
	this := TransactionModel{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *TransactionModel) GetId() int64 {
	if o == nil || o.Id == nil {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionModel) GetIdOk() (*int64, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *TransactionModel) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *TransactionModel) SetId(v int64) {
	o.Id = &v
}

// GetActive returns the Active field value if set, zero value otherwise.
func (o *TransactionModel) GetActive() bool {
	if o == nil || o.Active == nil {
		var ret bool
		return ret
	}
	return *o.Active
}

// GetActiveOk returns a tuple with the Active field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionModel) GetActiveOk() (*bool, bool) {
	if o == nil || o.Active == nil {
		return nil, false
	}
	return o.Active, true
}

// HasActive returns a boolean if a field has been set.
func (o *TransactionModel) HasActive() bool {
	if o != nil && o.Active != nil {
		return true
	}

	return false
}

// SetActive gets a reference to the given bool and assigns it to the Active field.
func (o *TransactionModel) SetActive(v bool) {
	o.Active = &v
}

// GetActivityId returns the ActivityId field value if set, zero value otherwise.
func (o *TransactionModel) GetActivityId() int32 {
	if o == nil || o.ActivityId == nil {
		var ret int32
		return ret
	}
	return *o.ActivityId
}

// GetActivityIdOk returns a tuple with the ActivityId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionModel) GetActivityIdOk() (*int32, bool) {
	if o == nil || o.ActivityId == nil {
		return nil, false
	}
	return o.ActivityId, true
}

// HasActivityId returns a boolean if a field has been set.
func (o *TransactionModel) HasActivityId() bool {
	if o != nil && o.ActivityId != nil {
		return true
	}

	return false
}

// SetActivityId gets a reference to the given int32 and assigns it to the ActivityId field.
func (o *TransactionModel) SetActivityId(v int32) {
	o.ActivityId = &v
}

// GetAmount returns the Amount field value if set, zero value otherwise.
func (o *TransactionModel) GetAmount() int32 {
	if o == nil || o.Amount == nil {
		var ret int32
		return ret
	}
	return *o.Amount
}

// GetAmountOk returns a tuple with the Amount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionModel) GetAmountOk() (*int32, bool) {
	if o == nil || o.Amount == nil {
		return nil, false
	}
	return o.Amount, true
}

// HasAmount returns a boolean if a field has been set.
func (o *TransactionModel) HasAmount() bool {
	if o != nil && o.Amount != nil {
		return true
	}

	return false
}

// SetAmount gets a reference to the given int32 and assigns it to the Amount field.
func (o *TransactionModel) SetAmount(v int32) {
	o.Amount = &v
}

// GetTransactionType returns the TransactionType field value if set, zero value otherwise.
func (o *TransactionModel) GetTransactionType() int32 {
	if o == nil || o.TransactionType == nil {
		var ret int32
		return ret
	}
	return *o.TransactionType
}

// GetTransactionTypeOk returns a tuple with the TransactionType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionModel) GetTransactionTypeOk() (*int32, bool) {
	if o == nil || o.TransactionType == nil {
		return nil, false
	}
	return o.TransactionType, true
}

// HasTransactionType returns a boolean if a field has been set.
func (o *TransactionModel) HasTransactionType() bool {
	if o != nil && o.TransactionType != nil {
		return true
	}

	return false
}

// SetTransactionType gets a reference to the given int32 and assigns it to the TransactionType field.
func (o *TransactionModel) SetTransactionType(v int32) {
	o.TransactionType = &v
}

// GetPaid returns the Paid field value if set, zero value otherwise.
func (o *TransactionModel) GetPaid() bool {
	if o == nil || o.Paid == nil {
		var ret bool
		return ret
	}
	return *o.Paid
}

// GetPaidOk returns a tuple with the Paid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionModel) GetPaidOk() (*bool, bool) {
	if o == nil || o.Paid == nil {
		return nil, false
	}
	return o.Paid, true
}

// HasPaid returns a boolean if a field has been set.
func (o *TransactionModel) HasPaid() bool {
	if o != nil && o.Paid != nil {
		return true
	}

	return false
}

// SetPaid gets a reference to the given bool and assigns it to the Paid field.
func (o *TransactionModel) SetPaid(v bool) {
	o.Paid = &v
}

// GetFailed returns the Failed field value if set, zero value otherwise.
func (o *TransactionModel) GetFailed() bool {
	if o == nil || o.Failed == nil {
		var ret bool
		return ret
	}
	return *o.Failed
}

// GetFailedOk returns a tuple with the Failed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionModel) GetFailedOk() (*bool, bool) {
	if o == nil || o.Failed == nil {
		return nil, false
	}
	return o.Failed, true
}

// HasFailed returns a boolean if a field has been set.
func (o *TransactionModel) HasFailed() bool {
	if o != nil && o.Failed != nil {
		return true
	}

	return false
}

// SetFailed gets a reference to the given bool and assigns it to the Failed field.
func (o *TransactionModel) SetFailed(v bool) {
	o.Failed = &v
}

func (o TransactionModel) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Active != nil {
		toSerialize["active"] = o.Active
	}
	if o.ActivityId != nil {
		toSerialize["activity_id"] = o.ActivityId
	}
	if o.Amount != nil {
		toSerialize["amount"] = o.Amount
	}
	if o.TransactionType != nil {
		toSerialize["transaction_type"] = o.TransactionType
	}
	if o.Paid != nil {
		toSerialize["paid"] = o.Paid
	}
	if o.Failed != nil {
		toSerialize["failed"] = o.Failed
	}
	return json.Marshal(toSerialize)
}

type NullableTransactionModel struct {
	value *TransactionModel
	isSet bool
}

func (v NullableTransactionModel) Get() *TransactionModel {
	return v.value
}

func (v *NullableTransactionModel) Set(val *TransactionModel) {
	v.value = val
	v.isSet = true
}

func (v NullableTransactionModel) IsSet() bool {
	return v.isSet
}

func (v *NullableTransactionModel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTransactionModel(val *TransactionModel) *NullableTransactionModel {
	return &NullableTransactionModel{value: val, isSet: true}
}

func (v NullableTransactionModel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTransactionModel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


