/*
 * Bumbal Client Api
 *
 * Bumbal API documentation
 *
 * API version: 2.0
 * Contact: info@bumbal.eu
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// LanguageFiltersModel struct for LanguageFiltersModel
type LanguageFiltersModel struct {
	// Language id's
	Id *[]int32 `json:"id,omitempty"`
	// free search through text and numeric type columns
	SearchText *string `json:"search_text,omitempty"`
	// Find given lang_code
	LangCode *string `json:"lang_code,omitempty"`
}

// NewLanguageFiltersModel instantiates a new LanguageFiltersModel object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLanguageFiltersModel() *LanguageFiltersModel {
	this := LanguageFiltersModel{}
	return &this
}

// NewLanguageFiltersModelWithDefaults instantiates a new LanguageFiltersModel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLanguageFiltersModelWithDefaults() *LanguageFiltersModel {
	this := LanguageFiltersModel{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *LanguageFiltersModel) GetId() []int32 {
	if o == nil || o.Id == nil {
		var ret []int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LanguageFiltersModel) GetIdOk() (*[]int32, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *LanguageFiltersModel) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given []int32 and assigns it to the Id field.
func (o *LanguageFiltersModel) SetId(v []int32) {
	o.Id = &v
}

// GetSearchText returns the SearchText field value if set, zero value otherwise.
func (o *LanguageFiltersModel) GetSearchText() string {
	if o == nil || o.SearchText == nil {
		var ret string
		return ret
	}
	return *o.SearchText
}

// GetSearchTextOk returns a tuple with the SearchText field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LanguageFiltersModel) GetSearchTextOk() (*string, bool) {
	if o == nil || o.SearchText == nil {
		return nil, false
	}
	return o.SearchText, true
}

// HasSearchText returns a boolean if a field has been set.
func (o *LanguageFiltersModel) HasSearchText() bool {
	if o != nil && o.SearchText != nil {
		return true
	}

	return false
}

// SetSearchText gets a reference to the given string and assigns it to the SearchText field.
func (o *LanguageFiltersModel) SetSearchText(v string) {
	o.SearchText = &v
}

// GetLangCode returns the LangCode field value if set, zero value otherwise.
func (o *LanguageFiltersModel) GetLangCode() string {
	if o == nil || o.LangCode == nil {
		var ret string
		return ret
	}
	return *o.LangCode
}

// GetLangCodeOk returns a tuple with the LangCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LanguageFiltersModel) GetLangCodeOk() (*string, bool) {
	if o == nil || o.LangCode == nil {
		return nil, false
	}
	return o.LangCode, true
}

// HasLangCode returns a boolean if a field has been set.
func (o *LanguageFiltersModel) HasLangCode() bool {
	if o != nil && o.LangCode != nil {
		return true
	}

	return false
}

// SetLangCode gets a reference to the given string and assigns it to the LangCode field.
func (o *LanguageFiltersModel) SetLangCode(v string) {
	o.LangCode = &v
}

func (o LanguageFiltersModel) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.SearchText != nil {
		toSerialize["search_text"] = o.SearchText
	}
	if o.LangCode != nil {
		toSerialize["lang_code"] = o.LangCode
	}
	return json.Marshal(toSerialize)
}

type NullableLanguageFiltersModel struct {
	value *LanguageFiltersModel
	isSet bool
}

func (v NullableLanguageFiltersModel) Get() *LanguageFiltersModel {
	return v.value
}

func (v *NullableLanguageFiltersModel) Set(val *LanguageFiltersModel) {
	v.value = val
	v.isSet = true
}

func (v NullableLanguageFiltersModel) IsSet() bool {
	return v.isSet
}

func (v *NullableLanguageFiltersModel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLanguageFiltersModel(val *LanguageFiltersModel) *NullableLanguageFiltersModel {
	return &NullableLanguageFiltersModel{value: val, isSet: true}
}

func (v NullableLanguageFiltersModel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLanguageFiltersModel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


