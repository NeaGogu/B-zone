/*
 * Bumbal Client Api
 *
 * Bumbal API documentation
 *
 * API version: 2.0
 * Contact: info@bumbal.eu
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// BlockedDateModel struct for BlockedDateModel
type BlockedDateModel struct {
	// Unique Identifier
	Id *int64 `json:"id,omitempty"`
	// Description of blocked date
	Description *string `json:"description,omitempty"`
	// updated_at date time
	Date *time.Time `json:"date,omitempty"`
}

// NewBlockedDateModel instantiates a new BlockedDateModel object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBlockedDateModel() *BlockedDateModel {
	this := BlockedDateModel{}
	return &this
}

// NewBlockedDateModelWithDefaults instantiates a new BlockedDateModel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBlockedDateModelWithDefaults() *BlockedDateModel {
	this := BlockedDateModel{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *BlockedDateModel) GetId() int64 {
	if o == nil || o.Id == nil {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockedDateModel) GetIdOk() (*int64, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *BlockedDateModel) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *BlockedDateModel) SetId(v int64) {
	o.Id = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *BlockedDateModel) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockedDateModel) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *BlockedDateModel) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *BlockedDateModel) SetDescription(v string) {
	o.Description = &v
}

// GetDate returns the Date field value if set, zero value otherwise.
func (o *BlockedDateModel) GetDate() time.Time {
	if o == nil || o.Date == nil {
		var ret time.Time
		return ret
	}
	return *o.Date
}

// GetDateOk returns a tuple with the Date field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockedDateModel) GetDateOk() (*time.Time, bool) {
	if o == nil || o.Date == nil {
		return nil, false
	}
	return o.Date, true
}

// HasDate returns a boolean if a field has been set.
func (o *BlockedDateModel) HasDate() bool {
	if o != nil && o.Date != nil {
		return true
	}

	return false
}

// SetDate gets a reference to the given time.Time and assigns it to the Date field.
func (o *BlockedDateModel) SetDate(v time.Time) {
	o.Date = &v
}

func (o BlockedDateModel) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	if o.Date != nil {
		toSerialize["date"] = o.Date
	}
	return json.Marshal(toSerialize)
}

type NullableBlockedDateModel struct {
	value *BlockedDateModel
	isSet bool
}

func (v NullableBlockedDateModel) Get() *BlockedDateModel {
	return v.value
}

func (v *NullableBlockedDateModel) Set(val *BlockedDateModel) {
	v.value = val
	v.isSet = true
}

func (v NullableBlockedDateModel) IsSet() bool {
	return v.isSet
}

func (v *NullableBlockedDateModel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBlockedDateModel(val *BlockedDateModel) *NullableBlockedDateModel {
	return &NullableBlockedDateModel{value: val, isSet: true}
}

func (v NullableBlockedDateModel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBlockedDateModel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


