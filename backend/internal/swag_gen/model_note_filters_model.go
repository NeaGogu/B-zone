/*
 * Bumbal Client Api
 *
 * Bumbal API documentation
 *
 * API version: 2.0
 * Contact: info@bumbal.eu
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// NoteFiltersModel struct for NoteFiltersModel
type NoteFiltersModel struct {
	// Show updated since
	UpdatedAtSince *time.Time `json:"updated_at_since,omitempty"`
	// Show updated till
	UpdatedAtTill *time.Time `json:"updated_at_till,omitempty"`
	// Object type IDs
	ObjectType *[]int32 `json:"object_type,omitempty"`
	// Object type names
	ObjectTypeName *[]string `json:"object_type_name,omitempty"`
	// Note category id
	NoteCategoryId *[]int32 `json:"note_category_id,omitempty"`
	// Note category name
	NoteCategoryName *[]string `json:"note_category_name,omitempty"`
	// Object ID
	ObjectId *[]int32 `json:"object_id,omitempty"`
	// Note titles
	Title *[]string `json:"title,omitempty"`
	// Note content
	Content *[]string `json:"content,omitempty"`
}

// NewNoteFiltersModel instantiates a new NoteFiltersModel object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNoteFiltersModel() *NoteFiltersModel {
	this := NoteFiltersModel{}
	return &this
}

// NewNoteFiltersModelWithDefaults instantiates a new NoteFiltersModel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNoteFiltersModelWithDefaults() *NoteFiltersModel {
	this := NoteFiltersModel{}
	return &this
}

// GetUpdatedAtSince returns the UpdatedAtSince field value if set, zero value otherwise.
func (o *NoteFiltersModel) GetUpdatedAtSince() time.Time {
	if o == nil || o.UpdatedAtSince == nil {
		var ret time.Time
		return ret
	}
	return *o.UpdatedAtSince
}

// GetUpdatedAtSinceOk returns a tuple with the UpdatedAtSince field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NoteFiltersModel) GetUpdatedAtSinceOk() (*time.Time, bool) {
	if o == nil || o.UpdatedAtSince == nil {
		return nil, false
	}
	return o.UpdatedAtSince, true
}

// HasUpdatedAtSince returns a boolean if a field has been set.
func (o *NoteFiltersModel) HasUpdatedAtSince() bool {
	if o != nil && o.UpdatedAtSince != nil {
		return true
	}

	return false
}

// SetUpdatedAtSince gets a reference to the given time.Time and assigns it to the UpdatedAtSince field.
func (o *NoteFiltersModel) SetUpdatedAtSince(v time.Time) {
	o.UpdatedAtSince = &v
}

// GetUpdatedAtTill returns the UpdatedAtTill field value if set, zero value otherwise.
func (o *NoteFiltersModel) GetUpdatedAtTill() time.Time {
	if o == nil || o.UpdatedAtTill == nil {
		var ret time.Time
		return ret
	}
	return *o.UpdatedAtTill
}

// GetUpdatedAtTillOk returns a tuple with the UpdatedAtTill field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NoteFiltersModel) GetUpdatedAtTillOk() (*time.Time, bool) {
	if o == nil || o.UpdatedAtTill == nil {
		return nil, false
	}
	return o.UpdatedAtTill, true
}

// HasUpdatedAtTill returns a boolean if a field has been set.
func (o *NoteFiltersModel) HasUpdatedAtTill() bool {
	if o != nil && o.UpdatedAtTill != nil {
		return true
	}

	return false
}

// SetUpdatedAtTill gets a reference to the given time.Time and assigns it to the UpdatedAtTill field.
func (o *NoteFiltersModel) SetUpdatedAtTill(v time.Time) {
	o.UpdatedAtTill = &v
}

// GetObjectType returns the ObjectType field value if set, zero value otherwise.
func (o *NoteFiltersModel) GetObjectType() []int32 {
	if o == nil || o.ObjectType == nil {
		var ret []int32
		return ret
	}
	return *o.ObjectType
}

// GetObjectTypeOk returns a tuple with the ObjectType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NoteFiltersModel) GetObjectTypeOk() (*[]int32, bool) {
	if o == nil || o.ObjectType == nil {
		return nil, false
	}
	return o.ObjectType, true
}

// HasObjectType returns a boolean if a field has been set.
func (o *NoteFiltersModel) HasObjectType() bool {
	if o != nil && o.ObjectType != nil {
		return true
	}

	return false
}

// SetObjectType gets a reference to the given []int32 and assigns it to the ObjectType field.
func (o *NoteFiltersModel) SetObjectType(v []int32) {
	o.ObjectType = &v
}

// GetObjectTypeName returns the ObjectTypeName field value if set, zero value otherwise.
func (o *NoteFiltersModel) GetObjectTypeName() []string {
	if o == nil || o.ObjectTypeName == nil {
		var ret []string
		return ret
	}
	return *o.ObjectTypeName
}

// GetObjectTypeNameOk returns a tuple with the ObjectTypeName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NoteFiltersModel) GetObjectTypeNameOk() (*[]string, bool) {
	if o == nil || o.ObjectTypeName == nil {
		return nil, false
	}
	return o.ObjectTypeName, true
}

// HasObjectTypeName returns a boolean if a field has been set.
func (o *NoteFiltersModel) HasObjectTypeName() bool {
	if o != nil && o.ObjectTypeName != nil {
		return true
	}

	return false
}

// SetObjectTypeName gets a reference to the given []string and assigns it to the ObjectTypeName field.
func (o *NoteFiltersModel) SetObjectTypeName(v []string) {
	o.ObjectTypeName = &v
}

// GetNoteCategoryId returns the NoteCategoryId field value if set, zero value otherwise.
func (o *NoteFiltersModel) GetNoteCategoryId() []int32 {
	if o == nil || o.NoteCategoryId == nil {
		var ret []int32
		return ret
	}
	return *o.NoteCategoryId
}

// GetNoteCategoryIdOk returns a tuple with the NoteCategoryId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NoteFiltersModel) GetNoteCategoryIdOk() (*[]int32, bool) {
	if o == nil || o.NoteCategoryId == nil {
		return nil, false
	}
	return o.NoteCategoryId, true
}

// HasNoteCategoryId returns a boolean if a field has been set.
func (o *NoteFiltersModel) HasNoteCategoryId() bool {
	if o != nil && o.NoteCategoryId != nil {
		return true
	}

	return false
}

// SetNoteCategoryId gets a reference to the given []int32 and assigns it to the NoteCategoryId field.
func (o *NoteFiltersModel) SetNoteCategoryId(v []int32) {
	o.NoteCategoryId = &v
}

// GetNoteCategoryName returns the NoteCategoryName field value if set, zero value otherwise.
func (o *NoteFiltersModel) GetNoteCategoryName() []string {
	if o == nil || o.NoteCategoryName == nil {
		var ret []string
		return ret
	}
	return *o.NoteCategoryName
}

// GetNoteCategoryNameOk returns a tuple with the NoteCategoryName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NoteFiltersModel) GetNoteCategoryNameOk() (*[]string, bool) {
	if o == nil || o.NoteCategoryName == nil {
		return nil, false
	}
	return o.NoteCategoryName, true
}

// HasNoteCategoryName returns a boolean if a field has been set.
func (o *NoteFiltersModel) HasNoteCategoryName() bool {
	if o != nil && o.NoteCategoryName != nil {
		return true
	}

	return false
}

// SetNoteCategoryName gets a reference to the given []string and assigns it to the NoteCategoryName field.
func (o *NoteFiltersModel) SetNoteCategoryName(v []string) {
	o.NoteCategoryName = &v
}

// GetObjectId returns the ObjectId field value if set, zero value otherwise.
func (o *NoteFiltersModel) GetObjectId() []int32 {
	if o == nil || o.ObjectId == nil {
		var ret []int32
		return ret
	}
	return *o.ObjectId
}

// GetObjectIdOk returns a tuple with the ObjectId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NoteFiltersModel) GetObjectIdOk() (*[]int32, bool) {
	if o == nil || o.ObjectId == nil {
		return nil, false
	}
	return o.ObjectId, true
}

// HasObjectId returns a boolean if a field has been set.
func (o *NoteFiltersModel) HasObjectId() bool {
	if o != nil && o.ObjectId != nil {
		return true
	}

	return false
}

// SetObjectId gets a reference to the given []int32 and assigns it to the ObjectId field.
func (o *NoteFiltersModel) SetObjectId(v []int32) {
	o.ObjectId = &v
}

// GetTitle returns the Title field value if set, zero value otherwise.
func (o *NoteFiltersModel) GetTitle() []string {
	if o == nil || o.Title == nil {
		var ret []string
		return ret
	}
	return *o.Title
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NoteFiltersModel) GetTitleOk() (*[]string, bool) {
	if o == nil || o.Title == nil {
		return nil, false
	}
	return o.Title, true
}

// HasTitle returns a boolean if a field has been set.
func (o *NoteFiltersModel) HasTitle() bool {
	if o != nil && o.Title != nil {
		return true
	}

	return false
}

// SetTitle gets a reference to the given []string and assigns it to the Title field.
func (o *NoteFiltersModel) SetTitle(v []string) {
	o.Title = &v
}

// GetContent returns the Content field value if set, zero value otherwise.
func (o *NoteFiltersModel) GetContent() []string {
	if o == nil || o.Content == nil {
		var ret []string
		return ret
	}
	return *o.Content
}

// GetContentOk returns a tuple with the Content field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NoteFiltersModel) GetContentOk() (*[]string, bool) {
	if o == nil || o.Content == nil {
		return nil, false
	}
	return o.Content, true
}

// HasContent returns a boolean if a field has been set.
func (o *NoteFiltersModel) HasContent() bool {
	if o != nil && o.Content != nil {
		return true
	}

	return false
}

// SetContent gets a reference to the given []string and assigns it to the Content field.
func (o *NoteFiltersModel) SetContent(v []string) {
	o.Content = &v
}

func (o NoteFiltersModel) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.UpdatedAtSince != nil {
		toSerialize["updated_at_since"] = o.UpdatedAtSince
	}
	if o.UpdatedAtTill != nil {
		toSerialize["updated_at_till"] = o.UpdatedAtTill
	}
	if o.ObjectType != nil {
		toSerialize["object_type"] = o.ObjectType
	}
	if o.ObjectTypeName != nil {
		toSerialize["object_type_name"] = o.ObjectTypeName
	}
	if o.NoteCategoryId != nil {
		toSerialize["note_category_id"] = o.NoteCategoryId
	}
	if o.NoteCategoryName != nil {
		toSerialize["note_category_name"] = o.NoteCategoryName
	}
	if o.ObjectId != nil {
		toSerialize["object_id"] = o.ObjectId
	}
	if o.Title != nil {
		toSerialize["title"] = o.Title
	}
	if o.Content != nil {
		toSerialize["content"] = o.Content
	}
	return json.Marshal(toSerialize)
}

type NullableNoteFiltersModel struct {
	value *NoteFiltersModel
	isSet bool
}

func (v NullableNoteFiltersModel) Get() *NoteFiltersModel {
	return v.value
}

func (v *NullableNoteFiltersModel) Set(val *NoteFiltersModel) {
	v.value = val
	v.isSet = true
}

func (v NullableNoteFiltersModel) IsSet() bool {
	return v.isSet
}

func (v *NullableNoteFiltersModel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNoteFiltersModel(val *NoteFiltersModel) *NullableNoteFiltersModel {
	return &NullableNoteFiltersModel{value: val, isSet: true}
}

func (v NullableNoteFiltersModel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNoteFiltersModel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


