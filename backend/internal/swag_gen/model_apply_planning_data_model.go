/*
 * Bumbal Client Api
 *
 * Bumbal API documentation
 *
 * API version: 2.0
 * Contact: info@bumbal.eu
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// ApplyPlanningDataModel struct for ApplyPlanningDataModel
type ApplyPlanningDataModel struct {
	// 
	Assigned *map[string]interface{} `json:"assigned,omitempty"`
	// 
	Unassigned *map[string]interface{} `json:"unassigned,omitempty"`
	// 
	Routes *map[string]interface{} `json:"routes,omitempty"`
	// 
	AfterUpdates *map[string]interface{} `json:"after_updates,omitempty"`
}

// NewApplyPlanningDataModel instantiates a new ApplyPlanningDataModel object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApplyPlanningDataModel() *ApplyPlanningDataModel {
	this := ApplyPlanningDataModel{}
	return &this
}

// NewApplyPlanningDataModelWithDefaults instantiates a new ApplyPlanningDataModel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApplyPlanningDataModelWithDefaults() *ApplyPlanningDataModel {
	this := ApplyPlanningDataModel{}
	return &this
}

// GetAssigned returns the Assigned field value if set, zero value otherwise.
func (o *ApplyPlanningDataModel) GetAssigned() map[string]interface{} {
	if o == nil || o.Assigned == nil {
		var ret map[string]interface{}
		return ret
	}
	return *o.Assigned
}

// GetAssignedOk returns a tuple with the Assigned field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplyPlanningDataModel) GetAssignedOk() (*map[string]interface{}, bool) {
	if o == nil || o.Assigned == nil {
		return nil, false
	}
	return o.Assigned, true
}

// HasAssigned returns a boolean if a field has been set.
func (o *ApplyPlanningDataModel) HasAssigned() bool {
	if o != nil && o.Assigned != nil {
		return true
	}

	return false
}

// SetAssigned gets a reference to the given map[string]interface{} and assigns it to the Assigned field.
func (o *ApplyPlanningDataModel) SetAssigned(v map[string]interface{}) {
	o.Assigned = &v
}

// GetUnassigned returns the Unassigned field value if set, zero value otherwise.
func (o *ApplyPlanningDataModel) GetUnassigned() map[string]interface{} {
	if o == nil || o.Unassigned == nil {
		var ret map[string]interface{}
		return ret
	}
	return *o.Unassigned
}

// GetUnassignedOk returns a tuple with the Unassigned field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplyPlanningDataModel) GetUnassignedOk() (*map[string]interface{}, bool) {
	if o == nil || o.Unassigned == nil {
		return nil, false
	}
	return o.Unassigned, true
}

// HasUnassigned returns a boolean if a field has been set.
func (o *ApplyPlanningDataModel) HasUnassigned() bool {
	if o != nil && o.Unassigned != nil {
		return true
	}

	return false
}

// SetUnassigned gets a reference to the given map[string]interface{} and assigns it to the Unassigned field.
func (o *ApplyPlanningDataModel) SetUnassigned(v map[string]interface{}) {
	o.Unassigned = &v
}

// GetRoutes returns the Routes field value if set, zero value otherwise.
func (o *ApplyPlanningDataModel) GetRoutes() map[string]interface{} {
	if o == nil || o.Routes == nil {
		var ret map[string]interface{}
		return ret
	}
	return *o.Routes
}

// GetRoutesOk returns a tuple with the Routes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplyPlanningDataModel) GetRoutesOk() (*map[string]interface{}, bool) {
	if o == nil || o.Routes == nil {
		return nil, false
	}
	return o.Routes, true
}

// HasRoutes returns a boolean if a field has been set.
func (o *ApplyPlanningDataModel) HasRoutes() bool {
	if o != nil && o.Routes != nil {
		return true
	}

	return false
}

// SetRoutes gets a reference to the given map[string]interface{} and assigns it to the Routes field.
func (o *ApplyPlanningDataModel) SetRoutes(v map[string]interface{}) {
	o.Routes = &v
}

// GetAfterUpdates returns the AfterUpdates field value if set, zero value otherwise.
func (o *ApplyPlanningDataModel) GetAfterUpdates() map[string]interface{} {
	if o == nil || o.AfterUpdates == nil {
		var ret map[string]interface{}
		return ret
	}
	return *o.AfterUpdates
}

// GetAfterUpdatesOk returns a tuple with the AfterUpdates field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplyPlanningDataModel) GetAfterUpdatesOk() (*map[string]interface{}, bool) {
	if o == nil || o.AfterUpdates == nil {
		return nil, false
	}
	return o.AfterUpdates, true
}

// HasAfterUpdates returns a boolean if a field has been set.
func (o *ApplyPlanningDataModel) HasAfterUpdates() bool {
	if o != nil && o.AfterUpdates != nil {
		return true
	}

	return false
}

// SetAfterUpdates gets a reference to the given map[string]interface{} and assigns it to the AfterUpdates field.
func (o *ApplyPlanningDataModel) SetAfterUpdates(v map[string]interface{}) {
	o.AfterUpdates = &v
}

func (o ApplyPlanningDataModel) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Assigned != nil {
		toSerialize["assigned"] = o.Assigned
	}
	if o.Unassigned != nil {
		toSerialize["unassigned"] = o.Unassigned
	}
	if o.Routes != nil {
		toSerialize["routes"] = o.Routes
	}
	if o.AfterUpdates != nil {
		toSerialize["after_updates"] = o.AfterUpdates
	}
	return json.Marshal(toSerialize)
}

type NullableApplyPlanningDataModel struct {
	value *ApplyPlanningDataModel
	isSet bool
}

func (v NullableApplyPlanningDataModel) Get() *ApplyPlanningDataModel {
	return v.value
}

func (v *NullableApplyPlanningDataModel) Set(val *ApplyPlanningDataModel) {
	v.value = val
	v.isSet = true
}

func (v NullableApplyPlanningDataModel) IsSet() bool {
	return v.isSet
}

func (v *NullableApplyPlanningDataModel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApplyPlanningDataModel(val *ApplyPlanningDataModel) *NullableApplyPlanningDataModel {
	return &NullableApplyPlanningDataModel{value: val, isSet: true}
}

func (v NullableApplyPlanningDataModel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApplyPlanningDataModel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


