/*
 * Bumbal Client Api
 *
 * Bumbal API documentation
 *
 * API version: 2.0
 * Contact: info@bumbal.eu
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// RouteStoreGeoLocations struct for RouteStoreGeoLocations
type RouteStoreGeoLocations struct {
	// Unique ID of Route
	RouteId *int64 `json:"route_id,omitempty"`
	// 
	GeoData *[]map[string]interface{} `json:"geo_data,omitempty"`
}

// NewRouteStoreGeoLocations instantiates a new RouteStoreGeoLocations object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRouteStoreGeoLocations() *RouteStoreGeoLocations {
	this := RouteStoreGeoLocations{}
	return &this
}

// NewRouteStoreGeoLocationsWithDefaults instantiates a new RouteStoreGeoLocations object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRouteStoreGeoLocationsWithDefaults() *RouteStoreGeoLocations {
	this := RouteStoreGeoLocations{}
	return &this
}

// GetRouteId returns the RouteId field value if set, zero value otherwise.
func (o *RouteStoreGeoLocations) GetRouteId() int64 {
	if o == nil || o.RouteId == nil {
		var ret int64
		return ret
	}
	return *o.RouteId
}

// GetRouteIdOk returns a tuple with the RouteId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RouteStoreGeoLocations) GetRouteIdOk() (*int64, bool) {
	if o == nil || o.RouteId == nil {
		return nil, false
	}
	return o.RouteId, true
}

// HasRouteId returns a boolean if a field has been set.
func (o *RouteStoreGeoLocations) HasRouteId() bool {
	if o != nil && o.RouteId != nil {
		return true
	}

	return false
}

// SetRouteId gets a reference to the given int64 and assigns it to the RouteId field.
func (o *RouteStoreGeoLocations) SetRouteId(v int64) {
	o.RouteId = &v
}

// GetGeoData returns the GeoData field value if set, zero value otherwise.
func (o *RouteStoreGeoLocations) GetGeoData() []map[string]interface{} {
	if o == nil || o.GeoData == nil {
		var ret []map[string]interface{}
		return ret
	}
	return *o.GeoData
}

// GetGeoDataOk returns a tuple with the GeoData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RouteStoreGeoLocations) GetGeoDataOk() (*[]map[string]interface{}, bool) {
	if o == nil || o.GeoData == nil {
		return nil, false
	}
	return o.GeoData, true
}

// HasGeoData returns a boolean if a field has been set.
func (o *RouteStoreGeoLocations) HasGeoData() bool {
	if o != nil && o.GeoData != nil {
		return true
	}

	return false
}

// SetGeoData gets a reference to the given []map[string]interface{} and assigns it to the GeoData field.
func (o *RouteStoreGeoLocations) SetGeoData(v []map[string]interface{}) {
	o.GeoData = &v
}

func (o RouteStoreGeoLocations) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.RouteId != nil {
		toSerialize["route_id"] = o.RouteId
	}
	if o.GeoData != nil {
		toSerialize["geo_data"] = o.GeoData
	}
	return json.Marshal(toSerialize)
}

type NullableRouteStoreGeoLocations struct {
	value *RouteStoreGeoLocations
	isSet bool
}

func (v NullableRouteStoreGeoLocations) Get() *RouteStoreGeoLocations {
	return v.value
}

func (v *NullableRouteStoreGeoLocations) Set(val *RouteStoreGeoLocations) {
	v.value = val
	v.isSet = true
}

func (v NullableRouteStoreGeoLocations) IsSet() bool {
	return v.isSet
}

func (v *NullableRouteStoreGeoLocations) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRouteStoreGeoLocations(val *RouteStoreGeoLocations) *NullableRouteStoreGeoLocations {
	return &NullableRouteStoreGeoLocations{value: val, isSet: true}
}

func (v NullableRouteStoreGeoLocations) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRouteStoreGeoLocations) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


