/*
 * Bumbal Client Api
 *
 * Bumbal API documentation
 *
 * API version: 2.0
 * Contact: info@bumbal.eu
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// RecurrenceGetRunsArguments struct for RecurrenceGetRunsArguments
type RecurrenceGetRunsArguments struct {
	// Recurrence Type
	Type *string `json:"type,omitempty"`
	// Max Count
	MaxCount *int32 `json:"max_count,omitempty"`
}

// NewRecurrenceGetRunsArguments instantiates a new RecurrenceGetRunsArguments object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRecurrenceGetRunsArguments() *RecurrenceGetRunsArguments {
	this := RecurrenceGetRunsArguments{}
	return &this
}

// NewRecurrenceGetRunsArgumentsWithDefaults instantiates a new RecurrenceGetRunsArguments object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRecurrenceGetRunsArgumentsWithDefaults() *RecurrenceGetRunsArguments {
	this := RecurrenceGetRunsArguments{}
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *RecurrenceGetRunsArguments) GetType() string {
	if o == nil || o.Type == nil {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecurrenceGetRunsArguments) GetTypeOk() (*string, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *RecurrenceGetRunsArguments) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *RecurrenceGetRunsArguments) SetType(v string) {
	o.Type = &v
}

// GetMaxCount returns the MaxCount field value if set, zero value otherwise.
func (o *RecurrenceGetRunsArguments) GetMaxCount() int32 {
	if o == nil || o.MaxCount == nil {
		var ret int32
		return ret
	}
	return *o.MaxCount
}

// GetMaxCountOk returns a tuple with the MaxCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecurrenceGetRunsArguments) GetMaxCountOk() (*int32, bool) {
	if o == nil || o.MaxCount == nil {
		return nil, false
	}
	return o.MaxCount, true
}

// HasMaxCount returns a boolean if a field has been set.
func (o *RecurrenceGetRunsArguments) HasMaxCount() bool {
	if o != nil && o.MaxCount != nil {
		return true
	}

	return false
}

// SetMaxCount gets a reference to the given int32 and assigns it to the MaxCount field.
func (o *RecurrenceGetRunsArguments) SetMaxCount(v int32) {
	o.MaxCount = &v
}

func (o RecurrenceGetRunsArguments) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	if o.MaxCount != nil {
		toSerialize["max_count"] = o.MaxCount
	}
	return json.Marshal(toSerialize)
}

type NullableRecurrenceGetRunsArguments struct {
	value *RecurrenceGetRunsArguments
	isSet bool
}

func (v NullableRecurrenceGetRunsArguments) Get() *RecurrenceGetRunsArguments {
	return v.value
}

func (v *NullableRecurrenceGetRunsArguments) Set(val *RecurrenceGetRunsArguments) {
	v.value = val
	v.isSet = true
}

func (v NullableRecurrenceGetRunsArguments) IsSet() bool {
	return v.isSet
}

func (v *NullableRecurrenceGetRunsArguments) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRecurrenceGetRunsArguments(val *RecurrenceGetRunsArguments) *NullableRecurrenceGetRunsArguments {
	return &NullableRecurrenceGetRunsArguments{value: val, isSet: true}
}

func (v NullableRecurrenceGetRunsArguments) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRecurrenceGetRunsArguments) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


