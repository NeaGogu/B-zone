/*
 * Bumbal Client Api
 *
 * Bumbal API documentation
 *
 * API version: 2.0
 * Contact: info@bumbal.eu
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// RecurrenceModel struct for RecurrenceModel
type RecurrenceModel struct {
	// Unique Identifier
	Id *int64 `json:"id,omitempty"`
	// Recurrence name
	Name *string `json:"name,omitempty"`
	// recurrence type_id, 11:activity, 24:route
	TypeId *int32 `json:"type_id,omitempty"`
	// recurrence type_name, activity, route
	TypeName *string `json:"type_name,omitempty"`
	// Start date
	StartDate *time.Time `json:"start_date,omitempty"`
	// End date
	EndDate *time.Time `json:"end_date,omitempty"`
	// End option
	EndOption *string `json:"end_option,omitempty"`
	// recurrence period_name, 1:day, 2:week, 3:month
	PeriodName *string `json:"period_name,omitempty"`
	// recurrence period_id, 1:day, 2:week, 3:month
	PeriodId *int32 `json:"period_id,omitempty"`
	// period frequency of recurrence (2 = repeat each 2 days/weeks/months)
	Frequency *int64 `json:"frequency,omitempty"`
	// nr of last recurrence to be created
	Count *int64 `json:"count,omitempty"`
	// nr of recurrences to show ahead in system
	ShowAhead *int64 `json:"show_ahead,omitempty"`
	// last created recurrence nr
	Current *int64 `json:"current,omitempty"`
	// summary of recurrence
	Summary *string `json:"summary,omitempty"`
	// Next date on which a new recurrence will be added
	NextRun *time.Time `json:"next_run,omitempty"`
	// Last date on which a new recurrence was added
	LastRun *time.Time `json:"last_run,omitempty"`
	// if active=0: recurrence has been removed and is no longer visible in any bumbal interface
	Active *bool `json:"active,omitempty"`
	// If the recurrence has uncreated objects
	HasUncreatedObjects *bool `json:"has_uncreated_objects,omitempty"`
	// 
	MetaData *[]MetaDataModel `json:"meta_data,omitempty"`
	// Recurrence base
	Base *string `json:"base,omitempty"`
	// Recurrence base date
	BaseDate *string `json:"base_date,omitempty"`
	// Monday
	Monday *bool `json:"monday,omitempty"`
	// Tuesday
	Tuesday *bool `json:"tuesday,omitempty"`
	// Wednesday
	Wednesday *bool `json:"wednesday,omitempty"`
	// Thursday
	Thursday *bool `json:"thursday,omitempty"`
	// Friday
	Friday *bool `json:"friday,omitempty"`
	// Saturday
	Saturday *bool `json:"saturday,omitempty"`
	// Sunday
	Sunday *bool `json:"sunday,omitempty"`
	// month day
	MonthDay *bool `json:"month_day,omitempty"`
	// Recurrence occurs every beginning or ending of the month
	MonthlyOption *string `json:"monthly_option,omitempty"`
	// ID of the object
	ObjectId int32 `json:"object_id"`
}

// NewRecurrenceModel instantiates a new RecurrenceModel object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRecurrenceModel(objectId int32, ) *RecurrenceModel {
	this := RecurrenceModel{}
	this.ObjectId = objectId
	return &this
}

// NewRecurrenceModelWithDefaults instantiates a new RecurrenceModel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRecurrenceModelWithDefaults() *RecurrenceModel {
	this := RecurrenceModel{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *RecurrenceModel) GetId() int64 {
	if o == nil || o.Id == nil {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecurrenceModel) GetIdOk() (*int64, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *RecurrenceModel) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *RecurrenceModel) SetId(v int64) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *RecurrenceModel) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecurrenceModel) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *RecurrenceModel) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *RecurrenceModel) SetName(v string) {
	o.Name = &v
}

// GetTypeId returns the TypeId field value if set, zero value otherwise.
func (o *RecurrenceModel) GetTypeId() int32 {
	if o == nil || o.TypeId == nil {
		var ret int32
		return ret
	}
	return *o.TypeId
}

// GetTypeIdOk returns a tuple with the TypeId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecurrenceModel) GetTypeIdOk() (*int32, bool) {
	if o == nil || o.TypeId == nil {
		return nil, false
	}
	return o.TypeId, true
}

// HasTypeId returns a boolean if a field has been set.
func (o *RecurrenceModel) HasTypeId() bool {
	if o != nil && o.TypeId != nil {
		return true
	}

	return false
}

// SetTypeId gets a reference to the given int32 and assigns it to the TypeId field.
func (o *RecurrenceModel) SetTypeId(v int32) {
	o.TypeId = &v
}

// GetTypeName returns the TypeName field value if set, zero value otherwise.
func (o *RecurrenceModel) GetTypeName() string {
	if o == nil || o.TypeName == nil {
		var ret string
		return ret
	}
	return *o.TypeName
}

// GetTypeNameOk returns a tuple with the TypeName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecurrenceModel) GetTypeNameOk() (*string, bool) {
	if o == nil || o.TypeName == nil {
		return nil, false
	}
	return o.TypeName, true
}

// HasTypeName returns a boolean if a field has been set.
func (o *RecurrenceModel) HasTypeName() bool {
	if o != nil && o.TypeName != nil {
		return true
	}

	return false
}

// SetTypeName gets a reference to the given string and assigns it to the TypeName field.
func (o *RecurrenceModel) SetTypeName(v string) {
	o.TypeName = &v
}

// GetStartDate returns the StartDate field value if set, zero value otherwise.
func (o *RecurrenceModel) GetStartDate() time.Time {
	if o == nil || o.StartDate == nil {
		var ret time.Time
		return ret
	}
	return *o.StartDate
}

// GetStartDateOk returns a tuple with the StartDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecurrenceModel) GetStartDateOk() (*time.Time, bool) {
	if o == nil || o.StartDate == nil {
		return nil, false
	}
	return o.StartDate, true
}

// HasStartDate returns a boolean if a field has been set.
func (o *RecurrenceModel) HasStartDate() bool {
	if o != nil && o.StartDate != nil {
		return true
	}

	return false
}

// SetStartDate gets a reference to the given time.Time and assigns it to the StartDate field.
func (o *RecurrenceModel) SetStartDate(v time.Time) {
	o.StartDate = &v
}

// GetEndDate returns the EndDate field value if set, zero value otherwise.
func (o *RecurrenceModel) GetEndDate() time.Time {
	if o == nil || o.EndDate == nil {
		var ret time.Time
		return ret
	}
	return *o.EndDate
}

// GetEndDateOk returns a tuple with the EndDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecurrenceModel) GetEndDateOk() (*time.Time, bool) {
	if o == nil || o.EndDate == nil {
		return nil, false
	}
	return o.EndDate, true
}

// HasEndDate returns a boolean if a field has been set.
func (o *RecurrenceModel) HasEndDate() bool {
	if o != nil && o.EndDate != nil {
		return true
	}

	return false
}

// SetEndDate gets a reference to the given time.Time and assigns it to the EndDate field.
func (o *RecurrenceModel) SetEndDate(v time.Time) {
	o.EndDate = &v
}

// GetEndOption returns the EndOption field value if set, zero value otherwise.
func (o *RecurrenceModel) GetEndOption() string {
	if o == nil || o.EndOption == nil {
		var ret string
		return ret
	}
	return *o.EndOption
}

// GetEndOptionOk returns a tuple with the EndOption field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecurrenceModel) GetEndOptionOk() (*string, bool) {
	if o == nil || o.EndOption == nil {
		return nil, false
	}
	return o.EndOption, true
}

// HasEndOption returns a boolean if a field has been set.
func (o *RecurrenceModel) HasEndOption() bool {
	if o != nil && o.EndOption != nil {
		return true
	}

	return false
}

// SetEndOption gets a reference to the given string and assigns it to the EndOption field.
func (o *RecurrenceModel) SetEndOption(v string) {
	o.EndOption = &v
}

// GetPeriodName returns the PeriodName field value if set, zero value otherwise.
func (o *RecurrenceModel) GetPeriodName() string {
	if o == nil || o.PeriodName == nil {
		var ret string
		return ret
	}
	return *o.PeriodName
}

// GetPeriodNameOk returns a tuple with the PeriodName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecurrenceModel) GetPeriodNameOk() (*string, bool) {
	if o == nil || o.PeriodName == nil {
		return nil, false
	}
	return o.PeriodName, true
}

// HasPeriodName returns a boolean if a field has been set.
func (o *RecurrenceModel) HasPeriodName() bool {
	if o != nil && o.PeriodName != nil {
		return true
	}

	return false
}

// SetPeriodName gets a reference to the given string and assigns it to the PeriodName field.
func (o *RecurrenceModel) SetPeriodName(v string) {
	o.PeriodName = &v
}

// GetPeriodId returns the PeriodId field value if set, zero value otherwise.
func (o *RecurrenceModel) GetPeriodId() int32 {
	if o == nil || o.PeriodId == nil {
		var ret int32
		return ret
	}
	return *o.PeriodId
}

// GetPeriodIdOk returns a tuple with the PeriodId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecurrenceModel) GetPeriodIdOk() (*int32, bool) {
	if o == nil || o.PeriodId == nil {
		return nil, false
	}
	return o.PeriodId, true
}

// HasPeriodId returns a boolean if a field has been set.
func (o *RecurrenceModel) HasPeriodId() bool {
	if o != nil && o.PeriodId != nil {
		return true
	}

	return false
}

// SetPeriodId gets a reference to the given int32 and assigns it to the PeriodId field.
func (o *RecurrenceModel) SetPeriodId(v int32) {
	o.PeriodId = &v
}

// GetFrequency returns the Frequency field value if set, zero value otherwise.
func (o *RecurrenceModel) GetFrequency() int64 {
	if o == nil || o.Frequency == nil {
		var ret int64
		return ret
	}
	return *o.Frequency
}

// GetFrequencyOk returns a tuple with the Frequency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecurrenceModel) GetFrequencyOk() (*int64, bool) {
	if o == nil || o.Frequency == nil {
		return nil, false
	}
	return o.Frequency, true
}

// HasFrequency returns a boolean if a field has been set.
func (o *RecurrenceModel) HasFrequency() bool {
	if o != nil && o.Frequency != nil {
		return true
	}

	return false
}

// SetFrequency gets a reference to the given int64 and assigns it to the Frequency field.
func (o *RecurrenceModel) SetFrequency(v int64) {
	o.Frequency = &v
}

// GetCount returns the Count field value if set, zero value otherwise.
func (o *RecurrenceModel) GetCount() int64 {
	if o == nil || o.Count == nil {
		var ret int64
		return ret
	}
	return *o.Count
}

// GetCountOk returns a tuple with the Count field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecurrenceModel) GetCountOk() (*int64, bool) {
	if o == nil || o.Count == nil {
		return nil, false
	}
	return o.Count, true
}

// HasCount returns a boolean if a field has been set.
func (o *RecurrenceModel) HasCount() bool {
	if o != nil && o.Count != nil {
		return true
	}

	return false
}

// SetCount gets a reference to the given int64 and assigns it to the Count field.
func (o *RecurrenceModel) SetCount(v int64) {
	o.Count = &v
}

// GetShowAhead returns the ShowAhead field value if set, zero value otherwise.
func (o *RecurrenceModel) GetShowAhead() int64 {
	if o == nil || o.ShowAhead == nil {
		var ret int64
		return ret
	}
	return *o.ShowAhead
}

// GetShowAheadOk returns a tuple with the ShowAhead field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecurrenceModel) GetShowAheadOk() (*int64, bool) {
	if o == nil || o.ShowAhead == nil {
		return nil, false
	}
	return o.ShowAhead, true
}

// HasShowAhead returns a boolean if a field has been set.
func (o *RecurrenceModel) HasShowAhead() bool {
	if o != nil && o.ShowAhead != nil {
		return true
	}

	return false
}

// SetShowAhead gets a reference to the given int64 and assigns it to the ShowAhead field.
func (o *RecurrenceModel) SetShowAhead(v int64) {
	o.ShowAhead = &v
}

// GetCurrent returns the Current field value if set, zero value otherwise.
func (o *RecurrenceModel) GetCurrent() int64 {
	if o == nil || o.Current == nil {
		var ret int64
		return ret
	}
	return *o.Current
}

// GetCurrentOk returns a tuple with the Current field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecurrenceModel) GetCurrentOk() (*int64, bool) {
	if o == nil || o.Current == nil {
		return nil, false
	}
	return o.Current, true
}

// HasCurrent returns a boolean if a field has been set.
func (o *RecurrenceModel) HasCurrent() bool {
	if o != nil && o.Current != nil {
		return true
	}

	return false
}

// SetCurrent gets a reference to the given int64 and assigns it to the Current field.
func (o *RecurrenceModel) SetCurrent(v int64) {
	o.Current = &v
}

// GetSummary returns the Summary field value if set, zero value otherwise.
func (o *RecurrenceModel) GetSummary() string {
	if o == nil || o.Summary == nil {
		var ret string
		return ret
	}
	return *o.Summary
}

// GetSummaryOk returns a tuple with the Summary field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecurrenceModel) GetSummaryOk() (*string, bool) {
	if o == nil || o.Summary == nil {
		return nil, false
	}
	return o.Summary, true
}

// HasSummary returns a boolean if a field has been set.
func (o *RecurrenceModel) HasSummary() bool {
	if o != nil && o.Summary != nil {
		return true
	}

	return false
}

// SetSummary gets a reference to the given string and assigns it to the Summary field.
func (o *RecurrenceModel) SetSummary(v string) {
	o.Summary = &v
}

// GetNextRun returns the NextRun field value if set, zero value otherwise.
func (o *RecurrenceModel) GetNextRun() time.Time {
	if o == nil || o.NextRun == nil {
		var ret time.Time
		return ret
	}
	return *o.NextRun
}

// GetNextRunOk returns a tuple with the NextRun field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecurrenceModel) GetNextRunOk() (*time.Time, bool) {
	if o == nil || o.NextRun == nil {
		return nil, false
	}
	return o.NextRun, true
}

// HasNextRun returns a boolean if a field has been set.
func (o *RecurrenceModel) HasNextRun() bool {
	if o != nil && o.NextRun != nil {
		return true
	}

	return false
}

// SetNextRun gets a reference to the given time.Time and assigns it to the NextRun field.
func (o *RecurrenceModel) SetNextRun(v time.Time) {
	o.NextRun = &v
}

// GetLastRun returns the LastRun field value if set, zero value otherwise.
func (o *RecurrenceModel) GetLastRun() time.Time {
	if o == nil || o.LastRun == nil {
		var ret time.Time
		return ret
	}
	return *o.LastRun
}

// GetLastRunOk returns a tuple with the LastRun field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecurrenceModel) GetLastRunOk() (*time.Time, bool) {
	if o == nil || o.LastRun == nil {
		return nil, false
	}
	return o.LastRun, true
}

// HasLastRun returns a boolean if a field has been set.
func (o *RecurrenceModel) HasLastRun() bool {
	if o != nil && o.LastRun != nil {
		return true
	}

	return false
}

// SetLastRun gets a reference to the given time.Time and assigns it to the LastRun field.
func (o *RecurrenceModel) SetLastRun(v time.Time) {
	o.LastRun = &v
}

// GetActive returns the Active field value if set, zero value otherwise.
func (o *RecurrenceModel) GetActive() bool {
	if o == nil || o.Active == nil {
		var ret bool
		return ret
	}
	return *o.Active
}

// GetActiveOk returns a tuple with the Active field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecurrenceModel) GetActiveOk() (*bool, bool) {
	if o == nil || o.Active == nil {
		return nil, false
	}
	return o.Active, true
}

// HasActive returns a boolean if a field has been set.
func (o *RecurrenceModel) HasActive() bool {
	if o != nil && o.Active != nil {
		return true
	}

	return false
}

// SetActive gets a reference to the given bool and assigns it to the Active field.
func (o *RecurrenceModel) SetActive(v bool) {
	o.Active = &v
}

// GetHasUncreatedObjects returns the HasUncreatedObjects field value if set, zero value otherwise.
func (o *RecurrenceModel) GetHasUncreatedObjects() bool {
	if o == nil || o.HasUncreatedObjects == nil {
		var ret bool
		return ret
	}
	return *o.HasUncreatedObjects
}

// GetHasUncreatedObjectsOk returns a tuple with the HasUncreatedObjects field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecurrenceModel) GetHasUncreatedObjectsOk() (*bool, bool) {
	if o == nil || o.HasUncreatedObjects == nil {
		return nil, false
	}
	return o.HasUncreatedObjects, true
}

// HasHasUncreatedObjects returns a boolean if a field has been set.
func (o *RecurrenceModel) HasHasUncreatedObjects() bool {
	if o != nil && o.HasUncreatedObjects != nil {
		return true
	}

	return false
}

// SetHasUncreatedObjects gets a reference to the given bool and assigns it to the HasUncreatedObjects field.
func (o *RecurrenceModel) SetHasUncreatedObjects(v bool) {
	o.HasUncreatedObjects = &v
}

// GetMetaData returns the MetaData field value if set, zero value otherwise.
func (o *RecurrenceModel) GetMetaData() []MetaDataModel {
	if o == nil || o.MetaData == nil {
		var ret []MetaDataModel
		return ret
	}
	return *o.MetaData
}

// GetMetaDataOk returns a tuple with the MetaData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecurrenceModel) GetMetaDataOk() (*[]MetaDataModel, bool) {
	if o == nil || o.MetaData == nil {
		return nil, false
	}
	return o.MetaData, true
}

// HasMetaData returns a boolean if a field has been set.
func (o *RecurrenceModel) HasMetaData() bool {
	if o != nil && o.MetaData != nil {
		return true
	}

	return false
}

// SetMetaData gets a reference to the given []MetaDataModel and assigns it to the MetaData field.
func (o *RecurrenceModel) SetMetaData(v []MetaDataModel) {
	o.MetaData = &v
}

// GetBase returns the Base field value if set, zero value otherwise.
func (o *RecurrenceModel) GetBase() string {
	if o == nil || o.Base == nil {
		var ret string
		return ret
	}
	return *o.Base
}

// GetBaseOk returns a tuple with the Base field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecurrenceModel) GetBaseOk() (*string, bool) {
	if o == nil || o.Base == nil {
		return nil, false
	}
	return o.Base, true
}

// HasBase returns a boolean if a field has been set.
func (o *RecurrenceModel) HasBase() bool {
	if o != nil && o.Base != nil {
		return true
	}

	return false
}

// SetBase gets a reference to the given string and assigns it to the Base field.
func (o *RecurrenceModel) SetBase(v string) {
	o.Base = &v
}

// GetBaseDate returns the BaseDate field value if set, zero value otherwise.
func (o *RecurrenceModel) GetBaseDate() string {
	if o == nil || o.BaseDate == nil {
		var ret string
		return ret
	}
	return *o.BaseDate
}

// GetBaseDateOk returns a tuple with the BaseDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecurrenceModel) GetBaseDateOk() (*string, bool) {
	if o == nil || o.BaseDate == nil {
		return nil, false
	}
	return o.BaseDate, true
}

// HasBaseDate returns a boolean if a field has been set.
func (o *RecurrenceModel) HasBaseDate() bool {
	if o != nil && o.BaseDate != nil {
		return true
	}

	return false
}

// SetBaseDate gets a reference to the given string and assigns it to the BaseDate field.
func (o *RecurrenceModel) SetBaseDate(v string) {
	o.BaseDate = &v
}

// GetMonday returns the Monday field value if set, zero value otherwise.
func (o *RecurrenceModel) GetMonday() bool {
	if o == nil || o.Monday == nil {
		var ret bool
		return ret
	}
	return *o.Monday
}

// GetMondayOk returns a tuple with the Monday field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecurrenceModel) GetMondayOk() (*bool, bool) {
	if o == nil || o.Monday == nil {
		return nil, false
	}
	return o.Monday, true
}

// HasMonday returns a boolean if a field has been set.
func (o *RecurrenceModel) HasMonday() bool {
	if o != nil && o.Monday != nil {
		return true
	}

	return false
}

// SetMonday gets a reference to the given bool and assigns it to the Monday field.
func (o *RecurrenceModel) SetMonday(v bool) {
	o.Monday = &v
}

// GetTuesday returns the Tuesday field value if set, zero value otherwise.
func (o *RecurrenceModel) GetTuesday() bool {
	if o == nil || o.Tuesday == nil {
		var ret bool
		return ret
	}
	return *o.Tuesday
}

// GetTuesdayOk returns a tuple with the Tuesday field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecurrenceModel) GetTuesdayOk() (*bool, bool) {
	if o == nil || o.Tuesday == nil {
		return nil, false
	}
	return o.Tuesday, true
}

// HasTuesday returns a boolean if a field has been set.
func (o *RecurrenceModel) HasTuesday() bool {
	if o != nil && o.Tuesday != nil {
		return true
	}

	return false
}

// SetTuesday gets a reference to the given bool and assigns it to the Tuesday field.
func (o *RecurrenceModel) SetTuesday(v bool) {
	o.Tuesday = &v
}

// GetWednesday returns the Wednesday field value if set, zero value otherwise.
func (o *RecurrenceModel) GetWednesday() bool {
	if o == nil || o.Wednesday == nil {
		var ret bool
		return ret
	}
	return *o.Wednesday
}

// GetWednesdayOk returns a tuple with the Wednesday field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecurrenceModel) GetWednesdayOk() (*bool, bool) {
	if o == nil || o.Wednesday == nil {
		return nil, false
	}
	return o.Wednesday, true
}

// HasWednesday returns a boolean if a field has been set.
func (o *RecurrenceModel) HasWednesday() bool {
	if o != nil && o.Wednesday != nil {
		return true
	}

	return false
}

// SetWednesday gets a reference to the given bool and assigns it to the Wednesday field.
func (o *RecurrenceModel) SetWednesday(v bool) {
	o.Wednesday = &v
}

// GetThursday returns the Thursday field value if set, zero value otherwise.
func (o *RecurrenceModel) GetThursday() bool {
	if o == nil || o.Thursday == nil {
		var ret bool
		return ret
	}
	return *o.Thursday
}

// GetThursdayOk returns a tuple with the Thursday field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecurrenceModel) GetThursdayOk() (*bool, bool) {
	if o == nil || o.Thursday == nil {
		return nil, false
	}
	return o.Thursday, true
}

// HasThursday returns a boolean if a field has been set.
func (o *RecurrenceModel) HasThursday() bool {
	if o != nil && o.Thursday != nil {
		return true
	}

	return false
}

// SetThursday gets a reference to the given bool and assigns it to the Thursday field.
func (o *RecurrenceModel) SetThursday(v bool) {
	o.Thursday = &v
}

// GetFriday returns the Friday field value if set, zero value otherwise.
func (o *RecurrenceModel) GetFriday() bool {
	if o == nil || o.Friday == nil {
		var ret bool
		return ret
	}
	return *o.Friday
}

// GetFridayOk returns a tuple with the Friday field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecurrenceModel) GetFridayOk() (*bool, bool) {
	if o == nil || o.Friday == nil {
		return nil, false
	}
	return o.Friday, true
}

// HasFriday returns a boolean if a field has been set.
func (o *RecurrenceModel) HasFriday() bool {
	if o != nil && o.Friday != nil {
		return true
	}

	return false
}

// SetFriday gets a reference to the given bool and assigns it to the Friday field.
func (o *RecurrenceModel) SetFriday(v bool) {
	o.Friday = &v
}

// GetSaturday returns the Saturday field value if set, zero value otherwise.
func (o *RecurrenceModel) GetSaturday() bool {
	if o == nil || o.Saturday == nil {
		var ret bool
		return ret
	}
	return *o.Saturday
}

// GetSaturdayOk returns a tuple with the Saturday field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecurrenceModel) GetSaturdayOk() (*bool, bool) {
	if o == nil || o.Saturday == nil {
		return nil, false
	}
	return o.Saturday, true
}

// HasSaturday returns a boolean if a field has been set.
func (o *RecurrenceModel) HasSaturday() bool {
	if o != nil && o.Saturday != nil {
		return true
	}

	return false
}

// SetSaturday gets a reference to the given bool and assigns it to the Saturday field.
func (o *RecurrenceModel) SetSaturday(v bool) {
	o.Saturday = &v
}

// GetSunday returns the Sunday field value if set, zero value otherwise.
func (o *RecurrenceModel) GetSunday() bool {
	if o == nil || o.Sunday == nil {
		var ret bool
		return ret
	}
	return *o.Sunday
}

// GetSundayOk returns a tuple with the Sunday field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecurrenceModel) GetSundayOk() (*bool, bool) {
	if o == nil || o.Sunday == nil {
		return nil, false
	}
	return o.Sunday, true
}

// HasSunday returns a boolean if a field has been set.
func (o *RecurrenceModel) HasSunday() bool {
	if o != nil && o.Sunday != nil {
		return true
	}

	return false
}

// SetSunday gets a reference to the given bool and assigns it to the Sunday field.
func (o *RecurrenceModel) SetSunday(v bool) {
	o.Sunday = &v
}

// GetMonthDay returns the MonthDay field value if set, zero value otherwise.
func (o *RecurrenceModel) GetMonthDay() bool {
	if o == nil || o.MonthDay == nil {
		var ret bool
		return ret
	}
	return *o.MonthDay
}

// GetMonthDayOk returns a tuple with the MonthDay field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecurrenceModel) GetMonthDayOk() (*bool, bool) {
	if o == nil || o.MonthDay == nil {
		return nil, false
	}
	return o.MonthDay, true
}

// HasMonthDay returns a boolean if a field has been set.
func (o *RecurrenceModel) HasMonthDay() bool {
	if o != nil && o.MonthDay != nil {
		return true
	}

	return false
}

// SetMonthDay gets a reference to the given bool and assigns it to the MonthDay field.
func (o *RecurrenceModel) SetMonthDay(v bool) {
	o.MonthDay = &v
}

// GetMonthlyOption returns the MonthlyOption field value if set, zero value otherwise.
func (o *RecurrenceModel) GetMonthlyOption() string {
	if o == nil || o.MonthlyOption == nil {
		var ret string
		return ret
	}
	return *o.MonthlyOption
}

// GetMonthlyOptionOk returns a tuple with the MonthlyOption field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecurrenceModel) GetMonthlyOptionOk() (*string, bool) {
	if o == nil || o.MonthlyOption == nil {
		return nil, false
	}
	return o.MonthlyOption, true
}

// HasMonthlyOption returns a boolean if a field has been set.
func (o *RecurrenceModel) HasMonthlyOption() bool {
	if o != nil && o.MonthlyOption != nil {
		return true
	}

	return false
}

// SetMonthlyOption gets a reference to the given string and assigns it to the MonthlyOption field.
func (o *RecurrenceModel) SetMonthlyOption(v string) {
	o.MonthlyOption = &v
}

// GetObjectId returns the ObjectId field value
func (o *RecurrenceModel) GetObjectId() int32 {
	if o == nil  {
		var ret int32
		return ret
	}

	return o.ObjectId
}

// GetObjectIdOk returns a tuple with the ObjectId field value
// and a boolean to check if the value has been set.
func (o *RecurrenceModel) GetObjectIdOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.ObjectId, true
}

// SetObjectId sets field value
func (o *RecurrenceModel) SetObjectId(v int32) {
	o.ObjectId = v
}

func (o RecurrenceModel) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.TypeId != nil {
		toSerialize["type_id"] = o.TypeId
	}
	if o.TypeName != nil {
		toSerialize["type_name"] = o.TypeName
	}
	if o.StartDate != nil {
		toSerialize["start_date"] = o.StartDate
	}
	if o.EndDate != nil {
		toSerialize["end_date"] = o.EndDate
	}
	if o.EndOption != nil {
		toSerialize["end_option"] = o.EndOption
	}
	if o.PeriodName != nil {
		toSerialize["period_name"] = o.PeriodName
	}
	if o.PeriodId != nil {
		toSerialize["period_id"] = o.PeriodId
	}
	if o.Frequency != nil {
		toSerialize["frequency"] = o.Frequency
	}
	if o.Count != nil {
		toSerialize["count"] = o.Count
	}
	if o.ShowAhead != nil {
		toSerialize["show_ahead"] = o.ShowAhead
	}
	if o.Current != nil {
		toSerialize["current"] = o.Current
	}
	if o.Summary != nil {
		toSerialize["summary"] = o.Summary
	}
	if o.NextRun != nil {
		toSerialize["next_run"] = o.NextRun
	}
	if o.LastRun != nil {
		toSerialize["last_run"] = o.LastRun
	}
	if o.Active != nil {
		toSerialize["active"] = o.Active
	}
	if o.HasUncreatedObjects != nil {
		toSerialize["has_uncreated_objects"] = o.HasUncreatedObjects
	}
	if o.MetaData != nil {
		toSerialize["meta_data"] = o.MetaData
	}
	if o.Base != nil {
		toSerialize["base"] = o.Base
	}
	if o.BaseDate != nil {
		toSerialize["base_date"] = o.BaseDate
	}
	if o.Monday != nil {
		toSerialize["monday"] = o.Monday
	}
	if o.Tuesday != nil {
		toSerialize["tuesday"] = o.Tuesday
	}
	if o.Wednesday != nil {
		toSerialize["wednesday"] = o.Wednesday
	}
	if o.Thursday != nil {
		toSerialize["thursday"] = o.Thursday
	}
	if o.Friday != nil {
		toSerialize["friday"] = o.Friday
	}
	if o.Saturday != nil {
		toSerialize["saturday"] = o.Saturday
	}
	if o.Sunday != nil {
		toSerialize["sunday"] = o.Sunday
	}
	if o.MonthDay != nil {
		toSerialize["month_day"] = o.MonthDay
	}
	if o.MonthlyOption != nil {
		toSerialize["monthly_option"] = o.MonthlyOption
	}
	if true {
		toSerialize["object_id"] = o.ObjectId
	}
	return json.Marshal(toSerialize)
}

type NullableRecurrenceModel struct {
	value *RecurrenceModel
	isSet bool
}

func (v NullableRecurrenceModel) Get() *RecurrenceModel {
	return v.value
}

func (v *NullableRecurrenceModel) Set(val *RecurrenceModel) {
	v.value = val
	v.isSet = true
}

func (v NullableRecurrenceModel) IsSet() bool {
	return v.isSet
}

func (v *NullableRecurrenceModel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRecurrenceModel(val *RecurrenceModel) *NullableRecurrenceModel {
	return &NullableRecurrenceModel{value: val, isSet: true}
}

func (v NullableRecurrenceModel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRecurrenceModel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


