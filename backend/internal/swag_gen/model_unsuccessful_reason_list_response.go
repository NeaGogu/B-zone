/*
 * Bumbal Client Api
 *
 * Bumbal API documentation
 *
 * API version: 2.0
 * Contact: info@bumbal.eu
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// UnsuccessfulReasonListResponse struct for UnsuccessfulReasonListResponse
type UnsuccessfulReasonListResponse struct {
	// 
	Items *[]UnsuccessfulReasonModel `json:"items,omitempty"`
	// Count of total items with filters in place
	CountFiltered *int32 `json:"count_filtered,omitempty"`
	// Count of total items without filters in place
	CountUnfiltered *int32 `json:"count_unfiltered,omitempty"`
	// Count of items with limit in place
	CountLimited *int32 `json:"count_limited,omitempty"`
}

// NewUnsuccessfulReasonListResponse instantiates a new UnsuccessfulReasonListResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUnsuccessfulReasonListResponse() *UnsuccessfulReasonListResponse {
	this := UnsuccessfulReasonListResponse{}
	return &this
}

// NewUnsuccessfulReasonListResponseWithDefaults instantiates a new UnsuccessfulReasonListResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUnsuccessfulReasonListResponseWithDefaults() *UnsuccessfulReasonListResponse {
	this := UnsuccessfulReasonListResponse{}
	return &this
}

// GetItems returns the Items field value if set, zero value otherwise.
func (o *UnsuccessfulReasonListResponse) GetItems() []UnsuccessfulReasonModel {
	if o == nil || o.Items == nil {
		var ret []UnsuccessfulReasonModel
		return ret
	}
	return *o.Items
}

// GetItemsOk returns a tuple with the Items field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UnsuccessfulReasonListResponse) GetItemsOk() (*[]UnsuccessfulReasonModel, bool) {
	if o == nil || o.Items == nil {
		return nil, false
	}
	return o.Items, true
}

// HasItems returns a boolean if a field has been set.
func (o *UnsuccessfulReasonListResponse) HasItems() bool {
	if o != nil && o.Items != nil {
		return true
	}

	return false
}

// SetItems gets a reference to the given []UnsuccessfulReasonModel and assigns it to the Items field.
func (o *UnsuccessfulReasonListResponse) SetItems(v []UnsuccessfulReasonModel) {
	o.Items = &v
}

// GetCountFiltered returns the CountFiltered field value if set, zero value otherwise.
func (o *UnsuccessfulReasonListResponse) GetCountFiltered() int32 {
	if o == nil || o.CountFiltered == nil {
		var ret int32
		return ret
	}
	return *o.CountFiltered
}

// GetCountFilteredOk returns a tuple with the CountFiltered field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UnsuccessfulReasonListResponse) GetCountFilteredOk() (*int32, bool) {
	if o == nil || o.CountFiltered == nil {
		return nil, false
	}
	return o.CountFiltered, true
}

// HasCountFiltered returns a boolean if a field has been set.
func (o *UnsuccessfulReasonListResponse) HasCountFiltered() bool {
	if o != nil && o.CountFiltered != nil {
		return true
	}

	return false
}

// SetCountFiltered gets a reference to the given int32 and assigns it to the CountFiltered field.
func (o *UnsuccessfulReasonListResponse) SetCountFiltered(v int32) {
	o.CountFiltered = &v
}

// GetCountUnfiltered returns the CountUnfiltered field value if set, zero value otherwise.
func (o *UnsuccessfulReasonListResponse) GetCountUnfiltered() int32 {
	if o == nil || o.CountUnfiltered == nil {
		var ret int32
		return ret
	}
	return *o.CountUnfiltered
}

// GetCountUnfilteredOk returns a tuple with the CountUnfiltered field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UnsuccessfulReasonListResponse) GetCountUnfilteredOk() (*int32, bool) {
	if o == nil || o.CountUnfiltered == nil {
		return nil, false
	}
	return o.CountUnfiltered, true
}

// HasCountUnfiltered returns a boolean if a field has been set.
func (o *UnsuccessfulReasonListResponse) HasCountUnfiltered() bool {
	if o != nil && o.CountUnfiltered != nil {
		return true
	}

	return false
}

// SetCountUnfiltered gets a reference to the given int32 and assigns it to the CountUnfiltered field.
func (o *UnsuccessfulReasonListResponse) SetCountUnfiltered(v int32) {
	o.CountUnfiltered = &v
}

// GetCountLimited returns the CountLimited field value if set, zero value otherwise.
func (o *UnsuccessfulReasonListResponse) GetCountLimited() int32 {
	if o == nil || o.CountLimited == nil {
		var ret int32
		return ret
	}
	return *o.CountLimited
}

// GetCountLimitedOk returns a tuple with the CountLimited field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UnsuccessfulReasonListResponse) GetCountLimitedOk() (*int32, bool) {
	if o == nil || o.CountLimited == nil {
		return nil, false
	}
	return o.CountLimited, true
}

// HasCountLimited returns a boolean if a field has been set.
func (o *UnsuccessfulReasonListResponse) HasCountLimited() bool {
	if o != nil && o.CountLimited != nil {
		return true
	}

	return false
}

// SetCountLimited gets a reference to the given int32 and assigns it to the CountLimited field.
func (o *UnsuccessfulReasonListResponse) SetCountLimited(v int32) {
	o.CountLimited = &v
}

func (o UnsuccessfulReasonListResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Items != nil {
		toSerialize["items"] = o.Items
	}
	if o.CountFiltered != nil {
		toSerialize["count_filtered"] = o.CountFiltered
	}
	if o.CountUnfiltered != nil {
		toSerialize["count_unfiltered"] = o.CountUnfiltered
	}
	if o.CountLimited != nil {
		toSerialize["count_limited"] = o.CountLimited
	}
	return json.Marshal(toSerialize)
}

type NullableUnsuccessfulReasonListResponse struct {
	value *UnsuccessfulReasonListResponse
	isSet bool
}

func (v NullableUnsuccessfulReasonListResponse) Get() *UnsuccessfulReasonListResponse {
	return v.value
}

func (v *NullableUnsuccessfulReasonListResponse) Set(val *UnsuccessfulReasonListResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableUnsuccessfulReasonListResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableUnsuccessfulReasonListResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUnsuccessfulReasonListResponse(val *UnsuccessfulReasonListResponse) *NullableUnsuccessfulReasonListResponse {
	return &NullableUnsuccessfulReasonListResponse{value: val, isSet: true}
}

func (v NullableUnsuccessfulReasonListResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUnsuccessfulReasonListResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


