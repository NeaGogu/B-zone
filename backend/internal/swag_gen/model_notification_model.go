/*
 * Bumbal Client Api
 *
 * Bumbal API documentation
 *
 * API version: 2.0
 * Contact: info@bumbal.eu
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// NotificationModel struct for NotificationModel
type NotificationModel struct {
	// Unique Identifier
	Id *int64 `json:"id,omitempty"`
	// Object type ID
	ObjectType *int64 `json:"object_type,omitempty"`
	// Notification title
	Title *string `json:"title,omitempty"`
	// Object type name
	ObjectTypeName *string `json:"object_type_name,omitempty"`
	// Object ID
	ObjectId *int32 `json:"object_id,omitempty"`
	// Notification category id
	NotificationCategoryId *int32 `json:"notification_category_id,omitempty"`
	// Notification category name
	NotificationCategoryName *string `json:"notification_category_name,omitempty"`
	// Notification updated by user full name
	UpdatedByName *string `json:"updated_by_name,omitempty"`
	// Notification content
	Content *string `json:"content,omitempty"`
	// if active=0: note has been removed and is no longer visible in any bumbal interface
	Active *bool `json:"active,omitempty"`
	// created_at date time
	NotificationCreatedAt *time.Time `json:"notification_created_at,omitempty"`
	// updated_at date time
	NotificationUpdatedAt *time.Time `json:"notification_updated_at,omitempty"`
	// created_by user id
	NotificationCreatedBy *int32 `json:"notification_created_by,omitempty"`
	// updated_by user id
	NotificationUpdatedBy *int32 `json:"notification_updated_by,omitempty"`
	// 
	Users *[]UserNotificationModel `json:"users,omitempty"`
	// Roles to enable notification for, works only on create, ignored on update
	RoleNames *[]string `json:"role_names,omitempty"`
}

// NewNotificationModel instantiates a new NotificationModel object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNotificationModel() *NotificationModel {
	this := NotificationModel{}
	return &this
}

// NewNotificationModelWithDefaults instantiates a new NotificationModel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNotificationModelWithDefaults() *NotificationModel {
	this := NotificationModel{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *NotificationModel) GetId() int64 {
	if o == nil || o.Id == nil {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationModel) GetIdOk() (*int64, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *NotificationModel) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *NotificationModel) SetId(v int64) {
	o.Id = &v
}

// GetObjectType returns the ObjectType field value if set, zero value otherwise.
func (o *NotificationModel) GetObjectType() int64 {
	if o == nil || o.ObjectType == nil {
		var ret int64
		return ret
	}
	return *o.ObjectType
}

// GetObjectTypeOk returns a tuple with the ObjectType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationModel) GetObjectTypeOk() (*int64, bool) {
	if o == nil || o.ObjectType == nil {
		return nil, false
	}
	return o.ObjectType, true
}

// HasObjectType returns a boolean if a field has been set.
func (o *NotificationModel) HasObjectType() bool {
	if o != nil && o.ObjectType != nil {
		return true
	}

	return false
}

// SetObjectType gets a reference to the given int64 and assigns it to the ObjectType field.
func (o *NotificationModel) SetObjectType(v int64) {
	o.ObjectType = &v
}

// GetTitle returns the Title field value if set, zero value otherwise.
func (o *NotificationModel) GetTitle() string {
	if o == nil || o.Title == nil {
		var ret string
		return ret
	}
	return *o.Title
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationModel) GetTitleOk() (*string, bool) {
	if o == nil || o.Title == nil {
		return nil, false
	}
	return o.Title, true
}

// HasTitle returns a boolean if a field has been set.
func (o *NotificationModel) HasTitle() bool {
	if o != nil && o.Title != nil {
		return true
	}

	return false
}

// SetTitle gets a reference to the given string and assigns it to the Title field.
func (o *NotificationModel) SetTitle(v string) {
	o.Title = &v
}

// GetObjectTypeName returns the ObjectTypeName field value if set, zero value otherwise.
func (o *NotificationModel) GetObjectTypeName() string {
	if o == nil || o.ObjectTypeName == nil {
		var ret string
		return ret
	}
	return *o.ObjectTypeName
}

// GetObjectTypeNameOk returns a tuple with the ObjectTypeName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationModel) GetObjectTypeNameOk() (*string, bool) {
	if o == nil || o.ObjectTypeName == nil {
		return nil, false
	}
	return o.ObjectTypeName, true
}

// HasObjectTypeName returns a boolean if a field has been set.
func (o *NotificationModel) HasObjectTypeName() bool {
	if o != nil && o.ObjectTypeName != nil {
		return true
	}

	return false
}

// SetObjectTypeName gets a reference to the given string and assigns it to the ObjectTypeName field.
func (o *NotificationModel) SetObjectTypeName(v string) {
	o.ObjectTypeName = &v
}

// GetObjectId returns the ObjectId field value if set, zero value otherwise.
func (o *NotificationModel) GetObjectId() int32 {
	if o == nil || o.ObjectId == nil {
		var ret int32
		return ret
	}
	return *o.ObjectId
}

// GetObjectIdOk returns a tuple with the ObjectId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationModel) GetObjectIdOk() (*int32, bool) {
	if o == nil || o.ObjectId == nil {
		return nil, false
	}
	return o.ObjectId, true
}

// HasObjectId returns a boolean if a field has been set.
func (o *NotificationModel) HasObjectId() bool {
	if o != nil && o.ObjectId != nil {
		return true
	}

	return false
}

// SetObjectId gets a reference to the given int32 and assigns it to the ObjectId field.
func (o *NotificationModel) SetObjectId(v int32) {
	o.ObjectId = &v
}

// GetNotificationCategoryId returns the NotificationCategoryId field value if set, zero value otherwise.
func (o *NotificationModel) GetNotificationCategoryId() int32 {
	if o == nil || o.NotificationCategoryId == nil {
		var ret int32
		return ret
	}
	return *o.NotificationCategoryId
}

// GetNotificationCategoryIdOk returns a tuple with the NotificationCategoryId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationModel) GetNotificationCategoryIdOk() (*int32, bool) {
	if o == nil || o.NotificationCategoryId == nil {
		return nil, false
	}
	return o.NotificationCategoryId, true
}

// HasNotificationCategoryId returns a boolean if a field has been set.
func (o *NotificationModel) HasNotificationCategoryId() bool {
	if o != nil && o.NotificationCategoryId != nil {
		return true
	}

	return false
}

// SetNotificationCategoryId gets a reference to the given int32 and assigns it to the NotificationCategoryId field.
func (o *NotificationModel) SetNotificationCategoryId(v int32) {
	o.NotificationCategoryId = &v
}

// GetNotificationCategoryName returns the NotificationCategoryName field value if set, zero value otherwise.
func (o *NotificationModel) GetNotificationCategoryName() string {
	if o == nil || o.NotificationCategoryName == nil {
		var ret string
		return ret
	}
	return *o.NotificationCategoryName
}

// GetNotificationCategoryNameOk returns a tuple with the NotificationCategoryName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationModel) GetNotificationCategoryNameOk() (*string, bool) {
	if o == nil || o.NotificationCategoryName == nil {
		return nil, false
	}
	return o.NotificationCategoryName, true
}

// HasNotificationCategoryName returns a boolean if a field has been set.
func (o *NotificationModel) HasNotificationCategoryName() bool {
	if o != nil && o.NotificationCategoryName != nil {
		return true
	}

	return false
}

// SetNotificationCategoryName gets a reference to the given string and assigns it to the NotificationCategoryName field.
func (o *NotificationModel) SetNotificationCategoryName(v string) {
	o.NotificationCategoryName = &v
}

// GetUpdatedByName returns the UpdatedByName field value if set, zero value otherwise.
func (o *NotificationModel) GetUpdatedByName() string {
	if o == nil || o.UpdatedByName == nil {
		var ret string
		return ret
	}
	return *o.UpdatedByName
}

// GetUpdatedByNameOk returns a tuple with the UpdatedByName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationModel) GetUpdatedByNameOk() (*string, bool) {
	if o == nil || o.UpdatedByName == nil {
		return nil, false
	}
	return o.UpdatedByName, true
}

// HasUpdatedByName returns a boolean if a field has been set.
func (o *NotificationModel) HasUpdatedByName() bool {
	if o != nil && o.UpdatedByName != nil {
		return true
	}

	return false
}

// SetUpdatedByName gets a reference to the given string and assigns it to the UpdatedByName field.
func (o *NotificationModel) SetUpdatedByName(v string) {
	o.UpdatedByName = &v
}

// GetContent returns the Content field value if set, zero value otherwise.
func (o *NotificationModel) GetContent() string {
	if o == nil || o.Content == nil {
		var ret string
		return ret
	}
	return *o.Content
}

// GetContentOk returns a tuple with the Content field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationModel) GetContentOk() (*string, bool) {
	if o == nil || o.Content == nil {
		return nil, false
	}
	return o.Content, true
}

// HasContent returns a boolean if a field has been set.
func (o *NotificationModel) HasContent() bool {
	if o != nil && o.Content != nil {
		return true
	}

	return false
}

// SetContent gets a reference to the given string and assigns it to the Content field.
func (o *NotificationModel) SetContent(v string) {
	o.Content = &v
}

// GetActive returns the Active field value if set, zero value otherwise.
func (o *NotificationModel) GetActive() bool {
	if o == nil || o.Active == nil {
		var ret bool
		return ret
	}
	return *o.Active
}

// GetActiveOk returns a tuple with the Active field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationModel) GetActiveOk() (*bool, bool) {
	if o == nil || o.Active == nil {
		return nil, false
	}
	return o.Active, true
}

// HasActive returns a boolean if a field has been set.
func (o *NotificationModel) HasActive() bool {
	if o != nil && o.Active != nil {
		return true
	}

	return false
}

// SetActive gets a reference to the given bool and assigns it to the Active field.
func (o *NotificationModel) SetActive(v bool) {
	o.Active = &v
}

// GetNotificationCreatedAt returns the NotificationCreatedAt field value if set, zero value otherwise.
func (o *NotificationModel) GetNotificationCreatedAt() time.Time {
	if o == nil || o.NotificationCreatedAt == nil {
		var ret time.Time
		return ret
	}
	return *o.NotificationCreatedAt
}

// GetNotificationCreatedAtOk returns a tuple with the NotificationCreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationModel) GetNotificationCreatedAtOk() (*time.Time, bool) {
	if o == nil || o.NotificationCreatedAt == nil {
		return nil, false
	}
	return o.NotificationCreatedAt, true
}

// HasNotificationCreatedAt returns a boolean if a field has been set.
func (o *NotificationModel) HasNotificationCreatedAt() bool {
	if o != nil && o.NotificationCreatedAt != nil {
		return true
	}

	return false
}

// SetNotificationCreatedAt gets a reference to the given time.Time and assigns it to the NotificationCreatedAt field.
func (o *NotificationModel) SetNotificationCreatedAt(v time.Time) {
	o.NotificationCreatedAt = &v
}

// GetNotificationUpdatedAt returns the NotificationUpdatedAt field value if set, zero value otherwise.
func (o *NotificationModel) GetNotificationUpdatedAt() time.Time {
	if o == nil || o.NotificationUpdatedAt == nil {
		var ret time.Time
		return ret
	}
	return *o.NotificationUpdatedAt
}

// GetNotificationUpdatedAtOk returns a tuple with the NotificationUpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationModel) GetNotificationUpdatedAtOk() (*time.Time, bool) {
	if o == nil || o.NotificationUpdatedAt == nil {
		return nil, false
	}
	return o.NotificationUpdatedAt, true
}

// HasNotificationUpdatedAt returns a boolean if a field has been set.
func (o *NotificationModel) HasNotificationUpdatedAt() bool {
	if o != nil && o.NotificationUpdatedAt != nil {
		return true
	}

	return false
}

// SetNotificationUpdatedAt gets a reference to the given time.Time and assigns it to the NotificationUpdatedAt field.
func (o *NotificationModel) SetNotificationUpdatedAt(v time.Time) {
	o.NotificationUpdatedAt = &v
}

// GetNotificationCreatedBy returns the NotificationCreatedBy field value if set, zero value otherwise.
func (o *NotificationModel) GetNotificationCreatedBy() int32 {
	if o == nil || o.NotificationCreatedBy == nil {
		var ret int32
		return ret
	}
	return *o.NotificationCreatedBy
}

// GetNotificationCreatedByOk returns a tuple with the NotificationCreatedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationModel) GetNotificationCreatedByOk() (*int32, bool) {
	if o == nil || o.NotificationCreatedBy == nil {
		return nil, false
	}
	return o.NotificationCreatedBy, true
}

// HasNotificationCreatedBy returns a boolean if a field has been set.
func (o *NotificationModel) HasNotificationCreatedBy() bool {
	if o != nil && o.NotificationCreatedBy != nil {
		return true
	}

	return false
}

// SetNotificationCreatedBy gets a reference to the given int32 and assigns it to the NotificationCreatedBy field.
func (o *NotificationModel) SetNotificationCreatedBy(v int32) {
	o.NotificationCreatedBy = &v
}

// GetNotificationUpdatedBy returns the NotificationUpdatedBy field value if set, zero value otherwise.
func (o *NotificationModel) GetNotificationUpdatedBy() int32 {
	if o == nil || o.NotificationUpdatedBy == nil {
		var ret int32
		return ret
	}
	return *o.NotificationUpdatedBy
}

// GetNotificationUpdatedByOk returns a tuple with the NotificationUpdatedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationModel) GetNotificationUpdatedByOk() (*int32, bool) {
	if o == nil || o.NotificationUpdatedBy == nil {
		return nil, false
	}
	return o.NotificationUpdatedBy, true
}

// HasNotificationUpdatedBy returns a boolean if a field has been set.
func (o *NotificationModel) HasNotificationUpdatedBy() bool {
	if o != nil && o.NotificationUpdatedBy != nil {
		return true
	}

	return false
}

// SetNotificationUpdatedBy gets a reference to the given int32 and assigns it to the NotificationUpdatedBy field.
func (o *NotificationModel) SetNotificationUpdatedBy(v int32) {
	o.NotificationUpdatedBy = &v
}

// GetUsers returns the Users field value if set, zero value otherwise.
func (o *NotificationModel) GetUsers() []UserNotificationModel {
	if o == nil || o.Users == nil {
		var ret []UserNotificationModel
		return ret
	}
	return *o.Users
}

// GetUsersOk returns a tuple with the Users field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationModel) GetUsersOk() (*[]UserNotificationModel, bool) {
	if o == nil || o.Users == nil {
		return nil, false
	}
	return o.Users, true
}

// HasUsers returns a boolean if a field has been set.
func (o *NotificationModel) HasUsers() bool {
	if o != nil && o.Users != nil {
		return true
	}

	return false
}

// SetUsers gets a reference to the given []UserNotificationModel and assigns it to the Users field.
func (o *NotificationModel) SetUsers(v []UserNotificationModel) {
	o.Users = &v
}

// GetRoleNames returns the RoleNames field value if set, zero value otherwise.
func (o *NotificationModel) GetRoleNames() []string {
	if o == nil || o.RoleNames == nil {
		var ret []string
		return ret
	}
	return *o.RoleNames
}

// GetRoleNamesOk returns a tuple with the RoleNames field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationModel) GetRoleNamesOk() (*[]string, bool) {
	if o == nil || o.RoleNames == nil {
		return nil, false
	}
	return o.RoleNames, true
}

// HasRoleNames returns a boolean if a field has been set.
func (o *NotificationModel) HasRoleNames() bool {
	if o != nil && o.RoleNames != nil {
		return true
	}

	return false
}

// SetRoleNames gets a reference to the given []string and assigns it to the RoleNames field.
func (o *NotificationModel) SetRoleNames(v []string) {
	o.RoleNames = &v
}

func (o NotificationModel) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.ObjectType != nil {
		toSerialize["object_type"] = o.ObjectType
	}
	if o.Title != nil {
		toSerialize["title"] = o.Title
	}
	if o.ObjectTypeName != nil {
		toSerialize["object_type_name"] = o.ObjectTypeName
	}
	if o.ObjectId != nil {
		toSerialize["object_id"] = o.ObjectId
	}
	if o.NotificationCategoryId != nil {
		toSerialize["notification_category_id"] = o.NotificationCategoryId
	}
	if o.NotificationCategoryName != nil {
		toSerialize["notification_category_name"] = o.NotificationCategoryName
	}
	if o.UpdatedByName != nil {
		toSerialize["updated_by_name"] = o.UpdatedByName
	}
	if o.Content != nil {
		toSerialize["content"] = o.Content
	}
	if o.Active != nil {
		toSerialize["active"] = o.Active
	}
	if o.NotificationCreatedAt != nil {
		toSerialize["notification_created_at"] = o.NotificationCreatedAt
	}
	if o.NotificationUpdatedAt != nil {
		toSerialize["notification_updated_at"] = o.NotificationUpdatedAt
	}
	if o.NotificationCreatedBy != nil {
		toSerialize["notification_created_by"] = o.NotificationCreatedBy
	}
	if o.NotificationUpdatedBy != nil {
		toSerialize["notification_updated_by"] = o.NotificationUpdatedBy
	}
	if o.Users != nil {
		toSerialize["users"] = o.Users
	}
	if o.RoleNames != nil {
		toSerialize["role_names"] = o.RoleNames
	}
	return json.Marshal(toSerialize)
}

type NullableNotificationModel struct {
	value *NotificationModel
	isSet bool
}

func (v NullableNotificationModel) Get() *NotificationModel {
	return v.value
}

func (v *NullableNotificationModel) Set(val *NotificationModel) {
	v.value = val
	v.isSet = true
}

func (v NullableNotificationModel) IsSet() bool {
	return v.isSet
}

func (v *NullableNotificationModel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNotificationModel(val *NotificationModel) *NullableNotificationModel {
	return &NullableNotificationModel{value: val, isSet: true}
}

func (v NullableNotificationModel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNotificationModel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


