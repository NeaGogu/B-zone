/*
 * Bumbal Client Api
 *
 * Bumbal API documentation
 *
 * API version: 2.0
 * Contact: info@bumbal.eu
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// UserNotificationFiltersModel struct for UserNotificationFiltersModel
type UserNotificationFiltersModel struct {
	// UserNotification id's
	Id *[]int32 `json:"id,omitempty"`
	// User id's
	UserId *[]int32 `json:"user_id,omitempty"`
	// Notification id's
	NotificationId *[]int32 `json:"notification_id,omitempty"`
	// Unread status
	Unread *int32 `json:"unread,omitempty"`
	// Pinned status
	Pinned *int32 `json:"pinned,omitempty"`
	// Archived status
	Archived *int32 `json:"archived,omitempty"`
	// Notification category id
	NotificationCategoryId *[]int32 `json:"notification_category_id,omitempty"`
	// Notification category name
	NotificationCategoryName *[]string `json:"notification_category_name,omitempty"`
	// Object type ID
	ObjectType *[]int32 `json:"object_type,omitempty"`
	// Object type name
	ObjectTypeName *[]string `json:"object_type_name,omitempty"`
}

// NewUserNotificationFiltersModel instantiates a new UserNotificationFiltersModel object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserNotificationFiltersModel() *UserNotificationFiltersModel {
	this := UserNotificationFiltersModel{}
	return &this
}

// NewUserNotificationFiltersModelWithDefaults instantiates a new UserNotificationFiltersModel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserNotificationFiltersModelWithDefaults() *UserNotificationFiltersModel {
	this := UserNotificationFiltersModel{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *UserNotificationFiltersModel) GetId() []int32 {
	if o == nil || o.Id == nil {
		var ret []int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserNotificationFiltersModel) GetIdOk() (*[]int32, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *UserNotificationFiltersModel) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given []int32 and assigns it to the Id field.
func (o *UserNotificationFiltersModel) SetId(v []int32) {
	o.Id = &v
}

// GetUserId returns the UserId field value if set, zero value otherwise.
func (o *UserNotificationFiltersModel) GetUserId() []int32 {
	if o == nil || o.UserId == nil {
		var ret []int32
		return ret
	}
	return *o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserNotificationFiltersModel) GetUserIdOk() (*[]int32, bool) {
	if o == nil || o.UserId == nil {
		return nil, false
	}
	return o.UserId, true
}

// HasUserId returns a boolean if a field has been set.
func (o *UserNotificationFiltersModel) HasUserId() bool {
	if o != nil && o.UserId != nil {
		return true
	}

	return false
}

// SetUserId gets a reference to the given []int32 and assigns it to the UserId field.
func (o *UserNotificationFiltersModel) SetUserId(v []int32) {
	o.UserId = &v
}

// GetNotificationId returns the NotificationId field value if set, zero value otherwise.
func (o *UserNotificationFiltersModel) GetNotificationId() []int32 {
	if o == nil || o.NotificationId == nil {
		var ret []int32
		return ret
	}
	return *o.NotificationId
}

// GetNotificationIdOk returns a tuple with the NotificationId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserNotificationFiltersModel) GetNotificationIdOk() (*[]int32, bool) {
	if o == nil || o.NotificationId == nil {
		return nil, false
	}
	return o.NotificationId, true
}

// HasNotificationId returns a boolean if a field has been set.
func (o *UserNotificationFiltersModel) HasNotificationId() bool {
	if o != nil && o.NotificationId != nil {
		return true
	}

	return false
}

// SetNotificationId gets a reference to the given []int32 and assigns it to the NotificationId field.
func (o *UserNotificationFiltersModel) SetNotificationId(v []int32) {
	o.NotificationId = &v
}

// GetUnread returns the Unread field value if set, zero value otherwise.
func (o *UserNotificationFiltersModel) GetUnread() int32 {
	if o == nil || o.Unread == nil {
		var ret int32
		return ret
	}
	return *o.Unread
}

// GetUnreadOk returns a tuple with the Unread field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserNotificationFiltersModel) GetUnreadOk() (*int32, bool) {
	if o == nil || o.Unread == nil {
		return nil, false
	}
	return o.Unread, true
}

// HasUnread returns a boolean if a field has been set.
func (o *UserNotificationFiltersModel) HasUnread() bool {
	if o != nil && o.Unread != nil {
		return true
	}

	return false
}

// SetUnread gets a reference to the given int32 and assigns it to the Unread field.
func (o *UserNotificationFiltersModel) SetUnread(v int32) {
	o.Unread = &v
}

// GetPinned returns the Pinned field value if set, zero value otherwise.
func (o *UserNotificationFiltersModel) GetPinned() int32 {
	if o == nil || o.Pinned == nil {
		var ret int32
		return ret
	}
	return *o.Pinned
}

// GetPinnedOk returns a tuple with the Pinned field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserNotificationFiltersModel) GetPinnedOk() (*int32, bool) {
	if o == nil || o.Pinned == nil {
		return nil, false
	}
	return o.Pinned, true
}

// HasPinned returns a boolean if a field has been set.
func (o *UserNotificationFiltersModel) HasPinned() bool {
	if o != nil && o.Pinned != nil {
		return true
	}

	return false
}

// SetPinned gets a reference to the given int32 and assigns it to the Pinned field.
func (o *UserNotificationFiltersModel) SetPinned(v int32) {
	o.Pinned = &v
}

// GetArchived returns the Archived field value if set, zero value otherwise.
func (o *UserNotificationFiltersModel) GetArchived() int32 {
	if o == nil || o.Archived == nil {
		var ret int32
		return ret
	}
	return *o.Archived
}

// GetArchivedOk returns a tuple with the Archived field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserNotificationFiltersModel) GetArchivedOk() (*int32, bool) {
	if o == nil || o.Archived == nil {
		return nil, false
	}
	return o.Archived, true
}

// HasArchived returns a boolean if a field has been set.
func (o *UserNotificationFiltersModel) HasArchived() bool {
	if o != nil && o.Archived != nil {
		return true
	}

	return false
}

// SetArchived gets a reference to the given int32 and assigns it to the Archived field.
func (o *UserNotificationFiltersModel) SetArchived(v int32) {
	o.Archived = &v
}

// GetNotificationCategoryId returns the NotificationCategoryId field value if set, zero value otherwise.
func (o *UserNotificationFiltersModel) GetNotificationCategoryId() []int32 {
	if o == nil || o.NotificationCategoryId == nil {
		var ret []int32
		return ret
	}
	return *o.NotificationCategoryId
}

// GetNotificationCategoryIdOk returns a tuple with the NotificationCategoryId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserNotificationFiltersModel) GetNotificationCategoryIdOk() (*[]int32, bool) {
	if o == nil || o.NotificationCategoryId == nil {
		return nil, false
	}
	return o.NotificationCategoryId, true
}

// HasNotificationCategoryId returns a boolean if a field has been set.
func (o *UserNotificationFiltersModel) HasNotificationCategoryId() bool {
	if o != nil && o.NotificationCategoryId != nil {
		return true
	}

	return false
}

// SetNotificationCategoryId gets a reference to the given []int32 and assigns it to the NotificationCategoryId field.
func (o *UserNotificationFiltersModel) SetNotificationCategoryId(v []int32) {
	o.NotificationCategoryId = &v
}

// GetNotificationCategoryName returns the NotificationCategoryName field value if set, zero value otherwise.
func (o *UserNotificationFiltersModel) GetNotificationCategoryName() []string {
	if o == nil || o.NotificationCategoryName == nil {
		var ret []string
		return ret
	}
	return *o.NotificationCategoryName
}

// GetNotificationCategoryNameOk returns a tuple with the NotificationCategoryName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserNotificationFiltersModel) GetNotificationCategoryNameOk() (*[]string, bool) {
	if o == nil || o.NotificationCategoryName == nil {
		return nil, false
	}
	return o.NotificationCategoryName, true
}

// HasNotificationCategoryName returns a boolean if a field has been set.
func (o *UserNotificationFiltersModel) HasNotificationCategoryName() bool {
	if o != nil && o.NotificationCategoryName != nil {
		return true
	}

	return false
}

// SetNotificationCategoryName gets a reference to the given []string and assigns it to the NotificationCategoryName field.
func (o *UserNotificationFiltersModel) SetNotificationCategoryName(v []string) {
	o.NotificationCategoryName = &v
}

// GetObjectType returns the ObjectType field value if set, zero value otherwise.
func (o *UserNotificationFiltersModel) GetObjectType() []int32 {
	if o == nil || o.ObjectType == nil {
		var ret []int32
		return ret
	}
	return *o.ObjectType
}

// GetObjectTypeOk returns a tuple with the ObjectType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserNotificationFiltersModel) GetObjectTypeOk() (*[]int32, bool) {
	if o == nil || o.ObjectType == nil {
		return nil, false
	}
	return o.ObjectType, true
}

// HasObjectType returns a boolean if a field has been set.
func (o *UserNotificationFiltersModel) HasObjectType() bool {
	if o != nil && o.ObjectType != nil {
		return true
	}

	return false
}

// SetObjectType gets a reference to the given []int32 and assigns it to the ObjectType field.
func (o *UserNotificationFiltersModel) SetObjectType(v []int32) {
	o.ObjectType = &v
}

// GetObjectTypeName returns the ObjectTypeName field value if set, zero value otherwise.
func (o *UserNotificationFiltersModel) GetObjectTypeName() []string {
	if o == nil || o.ObjectTypeName == nil {
		var ret []string
		return ret
	}
	return *o.ObjectTypeName
}

// GetObjectTypeNameOk returns a tuple with the ObjectTypeName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserNotificationFiltersModel) GetObjectTypeNameOk() (*[]string, bool) {
	if o == nil || o.ObjectTypeName == nil {
		return nil, false
	}
	return o.ObjectTypeName, true
}

// HasObjectTypeName returns a boolean if a field has been set.
func (o *UserNotificationFiltersModel) HasObjectTypeName() bool {
	if o != nil && o.ObjectTypeName != nil {
		return true
	}

	return false
}

// SetObjectTypeName gets a reference to the given []string and assigns it to the ObjectTypeName field.
func (o *UserNotificationFiltersModel) SetObjectTypeName(v []string) {
	o.ObjectTypeName = &v
}

func (o UserNotificationFiltersModel) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.UserId != nil {
		toSerialize["user_id"] = o.UserId
	}
	if o.NotificationId != nil {
		toSerialize["notification_id"] = o.NotificationId
	}
	if o.Unread != nil {
		toSerialize["unread"] = o.Unread
	}
	if o.Pinned != nil {
		toSerialize["pinned"] = o.Pinned
	}
	if o.Archived != nil {
		toSerialize["archived"] = o.Archived
	}
	if o.NotificationCategoryId != nil {
		toSerialize["notification_category_id"] = o.NotificationCategoryId
	}
	if o.NotificationCategoryName != nil {
		toSerialize["notification_category_name"] = o.NotificationCategoryName
	}
	if o.ObjectType != nil {
		toSerialize["object_type"] = o.ObjectType
	}
	if o.ObjectTypeName != nil {
		toSerialize["object_type_name"] = o.ObjectTypeName
	}
	return json.Marshal(toSerialize)
}

type NullableUserNotificationFiltersModel struct {
	value *UserNotificationFiltersModel
	isSet bool
}

func (v NullableUserNotificationFiltersModel) Get() *UserNotificationFiltersModel {
	return v.value
}

func (v *NullableUserNotificationFiltersModel) Set(val *UserNotificationFiltersModel) {
	v.value = val
	v.isSet = true
}

func (v NullableUserNotificationFiltersModel) IsSet() bool {
	return v.isSet
}

func (v *NullableUserNotificationFiltersModel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserNotificationFiltersModel(val *UserNotificationFiltersModel) *NullableUserNotificationFiltersModel {
	return &NullableUserNotificationFiltersModel{value: val, isSet: true}
}

func (v NullableUserNotificationFiltersModel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserNotificationFiltersModel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


