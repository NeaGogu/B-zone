/*
 * Bumbal Client Api
 *
 * Bumbal API documentation
 *
 * API version: 2.0
 * Contact: info@bumbal.eu
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// QuestionnaireChangeLanguageResponse struct for QuestionnaireChangeLanguageResponse
type QuestionnaireChangeLanguageResponse struct {
	// List with answer id's succesful updated
	Success *[]int32 `json:"success,omitempty"`
	// List with answer id's failed to update
	Failed *[]int32 `json:"failed,omitempty"`
	// New Language Code
	NewLangCode *string `json:"new_lang_code,omitempty"`
	// Old Language code
	OldLangCode *string `json:"old_lang_code,omitempty"`
}

// NewQuestionnaireChangeLanguageResponse instantiates a new QuestionnaireChangeLanguageResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewQuestionnaireChangeLanguageResponse() *QuestionnaireChangeLanguageResponse {
	this := QuestionnaireChangeLanguageResponse{}
	return &this
}

// NewQuestionnaireChangeLanguageResponseWithDefaults instantiates a new QuestionnaireChangeLanguageResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewQuestionnaireChangeLanguageResponseWithDefaults() *QuestionnaireChangeLanguageResponse {
	this := QuestionnaireChangeLanguageResponse{}
	return &this
}

// GetSuccess returns the Success field value if set, zero value otherwise.
func (o *QuestionnaireChangeLanguageResponse) GetSuccess() []int32 {
	if o == nil || o.Success == nil {
		var ret []int32
		return ret
	}
	return *o.Success
}

// GetSuccessOk returns a tuple with the Success field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuestionnaireChangeLanguageResponse) GetSuccessOk() (*[]int32, bool) {
	if o == nil || o.Success == nil {
		return nil, false
	}
	return o.Success, true
}

// HasSuccess returns a boolean if a field has been set.
func (o *QuestionnaireChangeLanguageResponse) HasSuccess() bool {
	if o != nil && o.Success != nil {
		return true
	}

	return false
}

// SetSuccess gets a reference to the given []int32 and assigns it to the Success field.
func (o *QuestionnaireChangeLanguageResponse) SetSuccess(v []int32) {
	o.Success = &v
}

// GetFailed returns the Failed field value if set, zero value otherwise.
func (o *QuestionnaireChangeLanguageResponse) GetFailed() []int32 {
	if o == nil || o.Failed == nil {
		var ret []int32
		return ret
	}
	return *o.Failed
}

// GetFailedOk returns a tuple with the Failed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuestionnaireChangeLanguageResponse) GetFailedOk() (*[]int32, bool) {
	if o == nil || o.Failed == nil {
		return nil, false
	}
	return o.Failed, true
}

// HasFailed returns a boolean if a field has been set.
func (o *QuestionnaireChangeLanguageResponse) HasFailed() bool {
	if o != nil && o.Failed != nil {
		return true
	}

	return false
}

// SetFailed gets a reference to the given []int32 and assigns it to the Failed field.
func (o *QuestionnaireChangeLanguageResponse) SetFailed(v []int32) {
	o.Failed = &v
}

// GetNewLangCode returns the NewLangCode field value if set, zero value otherwise.
func (o *QuestionnaireChangeLanguageResponse) GetNewLangCode() string {
	if o == nil || o.NewLangCode == nil {
		var ret string
		return ret
	}
	return *o.NewLangCode
}

// GetNewLangCodeOk returns a tuple with the NewLangCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuestionnaireChangeLanguageResponse) GetNewLangCodeOk() (*string, bool) {
	if o == nil || o.NewLangCode == nil {
		return nil, false
	}
	return o.NewLangCode, true
}

// HasNewLangCode returns a boolean if a field has been set.
func (o *QuestionnaireChangeLanguageResponse) HasNewLangCode() bool {
	if o != nil && o.NewLangCode != nil {
		return true
	}

	return false
}

// SetNewLangCode gets a reference to the given string and assigns it to the NewLangCode field.
func (o *QuestionnaireChangeLanguageResponse) SetNewLangCode(v string) {
	o.NewLangCode = &v
}

// GetOldLangCode returns the OldLangCode field value if set, zero value otherwise.
func (o *QuestionnaireChangeLanguageResponse) GetOldLangCode() string {
	if o == nil || o.OldLangCode == nil {
		var ret string
		return ret
	}
	return *o.OldLangCode
}

// GetOldLangCodeOk returns a tuple with the OldLangCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuestionnaireChangeLanguageResponse) GetOldLangCodeOk() (*string, bool) {
	if o == nil || o.OldLangCode == nil {
		return nil, false
	}
	return o.OldLangCode, true
}

// HasOldLangCode returns a boolean if a field has been set.
func (o *QuestionnaireChangeLanguageResponse) HasOldLangCode() bool {
	if o != nil && o.OldLangCode != nil {
		return true
	}

	return false
}

// SetOldLangCode gets a reference to the given string and assigns it to the OldLangCode field.
func (o *QuestionnaireChangeLanguageResponse) SetOldLangCode(v string) {
	o.OldLangCode = &v
}

func (o QuestionnaireChangeLanguageResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Success != nil {
		toSerialize["success"] = o.Success
	}
	if o.Failed != nil {
		toSerialize["failed"] = o.Failed
	}
	if o.NewLangCode != nil {
		toSerialize["new_lang_code"] = o.NewLangCode
	}
	if o.OldLangCode != nil {
		toSerialize["old_lang_code"] = o.OldLangCode
	}
	return json.Marshal(toSerialize)
}

type NullableQuestionnaireChangeLanguageResponse struct {
	value *QuestionnaireChangeLanguageResponse
	isSet bool
}

func (v NullableQuestionnaireChangeLanguageResponse) Get() *QuestionnaireChangeLanguageResponse {
	return v.value
}

func (v *NullableQuestionnaireChangeLanguageResponse) Set(val *QuestionnaireChangeLanguageResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableQuestionnaireChangeLanguageResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableQuestionnaireChangeLanguageResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableQuestionnaireChangeLanguageResponse(val *QuestionnaireChangeLanguageResponse) *NullableQuestionnaireChangeLanguageResponse {
	return &NullableQuestionnaireChangeLanguageResponse{value: val, isSet: true}
}

func (v NullableQuestionnaireChangeLanguageResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableQuestionnaireChangeLanguageResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


