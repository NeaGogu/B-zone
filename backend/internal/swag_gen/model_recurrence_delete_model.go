/*
 * Bumbal Client Api
 *
 * Bumbal API documentation
 *
 * API version: 2.0
 * Contact: info@bumbal.eu
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// RecurrenceDeleteModel struct for RecurrenceDeleteModel
type RecurrenceDeleteModel struct {
	// Unique Identifier
	Id *int64 `json:"id,omitempty"`
	// Remove recurrence objects
	RemoveObjects *bool `json:"remove_objects,omitempty"`
}

// NewRecurrenceDeleteModel instantiates a new RecurrenceDeleteModel object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRecurrenceDeleteModel() *RecurrenceDeleteModel {
	this := RecurrenceDeleteModel{}
	return &this
}

// NewRecurrenceDeleteModelWithDefaults instantiates a new RecurrenceDeleteModel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRecurrenceDeleteModelWithDefaults() *RecurrenceDeleteModel {
	this := RecurrenceDeleteModel{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *RecurrenceDeleteModel) GetId() int64 {
	if o == nil || o.Id == nil {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecurrenceDeleteModel) GetIdOk() (*int64, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *RecurrenceDeleteModel) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *RecurrenceDeleteModel) SetId(v int64) {
	o.Id = &v
}

// GetRemoveObjects returns the RemoveObjects field value if set, zero value otherwise.
func (o *RecurrenceDeleteModel) GetRemoveObjects() bool {
	if o == nil || o.RemoveObjects == nil {
		var ret bool
		return ret
	}
	return *o.RemoveObjects
}

// GetRemoveObjectsOk returns a tuple with the RemoveObjects field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecurrenceDeleteModel) GetRemoveObjectsOk() (*bool, bool) {
	if o == nil || o.RemoveObjects == nil {
		return nil, false
	}
	return o.RemoveObjects, true
}

// HasRemoveObjects returns a boolean if a field has been set.
func (o *RecurrenceDeleteModel) HasRemoveObjects() bool {
	if o != nil && o.RemoveObjects != nil {
		return true
	}

	return false
}

// SetRemoveObjects gets a reference to the given bool and assigns it to the RemoveObjects field.
func (o *RecurrenceDeleteModel) SetRemoveObjects(v bool) {
	o.RemoveObjects = &v
}

func (o RecurrenceDeleteModel) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.RemoveObjects != nil {
		toSerialize["remove_objects"] = o.RemoveObjects
	}
	return json.Marshal(toSerialize)
}

type NullableRecurrenceDeleteModel struct {
	value *RecurrenceDeleteModel
	isSet bool
}

func (v NullableRecurrenceDeleteModel) Get() *RecurrenceDeleteModel {
	return v.value
}

func (v *NullableRecurrenceDeleteModel) Set(val *RecurrenceDeleteModel) {
	v.value = val
	v.isSet = true
}

func (v NullableRecurrenceDeleteModel) IsSet() bool {
	return v.isSet
}

func (v *NullableRecurrenceDeleteModel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRecurrenceDeleteModel(val *RecurrenceDeleteModel) *NullableRecurrenceDeleteModel {
	return &NullableRecurrenceDeleteModel{value: val, isSet: true}
}

func (v NullableRecurrenceDeleteModel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRecurrenceDeleteModel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


