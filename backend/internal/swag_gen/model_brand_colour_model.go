/*
 * Bumbal Client Api
 *
 * Bumbal API documentation
 *
 * API version: 2.0
 * Contact: info@bumbal.eu
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// BrandColourModel struct for BrandColourModel
type BrandColourModel struct {
	// Unique Identifier
	Id *int64 `json:"id,omitempty"`
	// id for brand where this colour belongs to
	BrandId *int64 `json:"brand_id,omitempty"`
	// name
	Name *string `json:"name,omitempty"`
	// hex
	Hex *string `json:"hex,omitempty"`
	// red value for rgba
	R *int32 `json:"r,omitempty"`
	// green value for rgba
	G *int32 `json:"g,omitempty"`
	// blue value for rgba
	B *int32 `json:"b,omitempty"`
	// alpha value (opacity/transparency) for rgba
	A *float64 `json:"a,omitempty"`
}

// NewBrandColourModel instantiates a new BrandColourModel object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBrandColourModel() *BrandColourModel {
	this := BrandColourModel{}
	return &this
}

// NewBrandColourModelWithDefaults instantiates a new BrandColourModel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBrandColourModelWithDefaults() *BrandColourModel {
	this := BrandColourModel{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *BrandColourModel) GetId() int64 {
	if o == nil || o.Id == nil {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BrandColourModel) GetIdOk() (*int64, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *BrandColourModel) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *BrandColourModel) SetId(v int64) {
	o.Id = &v
}

// GetBrandId returns the BrandId field value if set, zero value otherwise.
func (o *BrandColourModel) GetBrandId() int64 {
	if o == nil || o.BrandId == nil {
		var ret int64
		return ret
	}
	return *o.BrandId
}

// GetBrandIdOk returns a tuple with the BrandId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BrandColourModel) GetBrandIdOk() (*int64, bool) {
	if o == nil || o.BrandId == nil {
		return nil, false
	}
	return o.BrandId, true
}

// HasBrandId returns a boolean if a field has been set.
func (o *BrandColourModel) HasBrandId() bool {
	if o != nil && o.BrandId != nil {
		return true
	}

	return false
}

// SetBrandId gets a reference to the given int64 and assigns it to the BrandId field.
func (o *BrandColourModel) SetBrandId(v int64) {
	o.BrandId = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *BrandColourModel) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BrandColourModel) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *BrandColourModel) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *BrandColourModel) SetName(v string) {
	o.Name = &v
}

// GetHex returns the Hex field value if set, zero value otherwise.
func (o *BrandColourModel) GetHex() string {
	if o == nil || o.Hex == nil {
		var ret string
		return ret
	}
	return *o.Hex
}

// GetHexOk returns a tuple with the Hex field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BrandColourModel) GetHexOk() (*string, bool) {
	if o == nil || o.Hex == nil {
		return nil, false
	}
	return o.Hex, true
}

// HasHex returns a boolean if a field has been set.
func (o *BrandColourModel) HasHex() bool {
	if o != nil && o.Hex != nil {
		return true
	}

	return false
}

// SetHex gets a reference to the given string and assigns it to the Hex field.
func (o *BrandColourModel) SetHex(v string) {
	o.Hex = &v
}

// GetR returns the R field value if set, zero value otherwise.
func (o *BrandColourModel) GetR() int32 {
	if o == nil || o.R == nil {
		var ret int32
		return ret
	}
	return *o.R
}

// GetROk returns a tuple with the R field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BrandColourModel) GetROk() (*int32, bool) {
	if o == nil || o.R == nil {
		return nil, false
	}
	return o.R, true
}

// HasR returns a boolean if a field has been set.
func (o *BrandColourModel) HasR() bool {
	if o != nil && o.R != nil {
		return true
	}

	return false
}

// SetR gets a reference to the given int32 and assigns it to the R field.
func (o *BrandColourModel) SetR(v int32) {
	o.R = &v
}

// GetG returns the G field value if set, zero value otherwise.
func (o *BrandColourModel) GetG() int32 {
	if o == nil || o.G == nil {
		var ret int32
		return ret
	}
	return *o.G
}

// GetGOk returns a tuple with the G field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BrandColourModel) GetGOk() (*int32, bool) {
	if o == nil || o.G == nil {
		return nil, false
	}
	return o.G, true
}

// HasG returns a boolean if a field has been set.
func (o *BrandColourModel) HasG() bool {
	if o != nil && o.G != nil {
		return true
	}

	return false
}

// SetG gets a reference to the given int32 and assigns it to the G field.
func (o *BrandColourModel) SetG(v int32) {
	o.G = &v
}

// GetB returns the B field value if set, zero value otherwise.
func (o *BrandColourModel) GetB() int32 {
	if o == nil || o.B == nil {
		var ret int32
		return ret
	}
	return *o.B
}

// GetBOk returns a tuple with the B field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BrandColourModel) GetBOk() (*int32, bool) {
	if o == nil || o.B == nil {
		return nil, false
	}
	return o.B, true
}

// HasB returns a boolean if a field has been set.
func (o *BrandColourModel) HasB() bool {
	if o != nil && o.B != nil {
		return true
	}

	return false
}

// SetB gets a reference to the given int32 and assigns it to the B field.
func (o *BrandColourModel) SetB(v int32) {
	o.B = &v
}

// GetA returns the A field value if set, zero value otherwise.
func (o *BrandColourModel) GetA() float64 {
	if o == nil || o.A == nil {
		var ret float64
		return ret
	}
	return *o.A
}

// GetAOk returns a tuple with the A field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BrandColourModel) GetAOk() (*float64, bool) {
	if o == nil || o.A == nil {
		return nil, false
	}
	return o.A, true
}

// HasA returns a boolean if a field has been set.
func (o *BrandColourModel) HasA() bool {
	if o != nil && o.A != nil {
		return true
	}

	return false
}

// SetA gets a reference to the given float64 and assigns it to the A field.
func (o *BrandColourModel) SetA(v float64) {
	o.A = &v
}

func (o BrandColourModel) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.BrandId != nil {
		toSerialize["brand_id"] = o.BrandId
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Hex != nil {
		toSerialize["hex"] = o.Hex
	}
	if o.R != nil {
		toSerialize["r"] = o.R
	}
	if o.G != nil {
		toSerialize["g"] = o.G
	}
	if o.B != nil {
		toSerialize["b"] = o.B
	}
	if o.A != nil {
		toSerialize["a"] = o.A
	}
	return json.Marshal(toSerialize)
}

type NullableBrandColourModel struct {
	value *BrandColourModel
	isSet bool
}

func (v NullableBrandColourModel) Get() *BrandColourModel {
	return v.value
}

func (v *NullableBrandColourModel) Set(val *BrandColourModel) {
	v.value = val
	v.isSet = true
}

func (v NullableBrandColourModel) IsSet() bool {
	return v.isSet
}

func (v *NullableBrandColourModel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBrandColourModel(val *BrandColourModel) *NullableBrandColourModel {
	return &NullableBrandColourModel{value: val, isSet: true}
}

func (v NullableBrandColourModel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBrandColourModel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


